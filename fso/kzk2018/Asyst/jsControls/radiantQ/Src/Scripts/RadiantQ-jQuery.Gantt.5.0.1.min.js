/*!
 * RadiantQ jQuery Gantt
 * @author RadiantQ
 * @version 5.0.1
 * http://www.radiantq.com
 *
 * Copyright RadiantQ
 */
(function(e, b) {
    function c(a) {
        var d = a || window.event,
            c = [].slice.call(arguments, 1),
            g = 0,
            f = 0,
            p = 0;
        a = e.event.fix(d);
        a.type = "mousewheel";
        d.wheelDelta && (g = d.wheelDelta / 120);
        d.detail && (g = -d.detail / 3);
        p = g;
        d.axis !== b && d.axis === d.HORIZONTAL_AXIS && (p = 0, f = -1 * g);
        d.wheelDeltaY !== b && (p = d.wheelDeltaY / 120);
        d.wheelDeltaX !== b && (f = -1 * d.wheelDeltaX / 120);
        c.unshift(a, g, f, p);
        return (e.event.dispatch || e.event.handle).apply(this, c)
    }
    var a = ["DOMMouseScroll", "mousewheel"];
    if (e.event.fixHooks)
        for (var d = a.length; d;) e.event.fixHooks[a[--d]] =
            e.event.mouseHooks;
    e.event.special.mousewheel = {
        setup: function() {
            if (this.addEventListener)
                for (var d = a.length; d;) this.addEventListener(a[--d], c, !1);
            else this.onmousewheel = c
        },
        teardown: function() {
            if (this.removeEventListener)
                for (var d = a.length; d;) this.removeEventListener(a[--d], c, !1);
            else this.onmousewheel = null
        }
    };
    e.fn.mousewheel == b && e.fn.extend({
        mousewheel: function(a) {
            return a ? this.bind("mousewheel", a) : this.trigger("mousewheel")
        },
        unmousewheel: function(a) {
            return this.unbind("mousewheel", a)
        }
    });
    if (e.observable ==
        b) {
        e.observable = function(a) {
            return new f(a)
        };
        var g = [].splice,
            f = e.observable.Observable = function(a) {
                this.data = a
            };
        f.prototype = {
            data: null,
            _set: function(a, d) {
                var b = a.split("."),
                    c = b.pop();
                this._get(b)[c] = d
            },
            _get: function(a) {
                a = "string" === e.type(a) ? a.split(".") : a;
                var d, b = this.data;
                if (0 === a.length) return b;
                for (; 1 < a.length;) d = a.shift(), b = b[d];
                return b[a[0]]
            },
            property: function(a, d) {
                if ("object" === e.type(a)) {
                    var b = {}, c = {}, g = !1,
                        f;
                    for (f in a) {
                        var q = this._get(f);
                        q != a[f] && (g = !0, b[f] = q, c[f] = a[f])
                    }
                    if (g) return this._property(b,
                        c)
                } else {
                    if (1 == arguments.length) return this._get(a);
                    q = this._get(a);
                    if (q != d) return b = {}, b[a] = q, c = {}, c[a] = d, this._property(b, c)
                }
                return this
            },
            _property: function(a, d) {
                var b = this;
                e.each(d, function(a, d) {
                    b._set(a, d)
                });
                return this._trigger("change", {
                    oldValues: a,
                    newValues: d
                })
            },
            insert: function(a, d) {
                "object" === e.type(a) ? (d = [a], a = this.data.length) : e.isArray(d) || (d = [d]);
                return this._insert(a, d)
            },
            _insert: function(a, d) {
                this.data.splice.apply(this.data, [a, 0].concat(d));
                return this._trigger("insert", {
                    index: a,
                    items: d
                })
            },
            remove: function(a, d) {
                var b = !1;
                if ("array" === e.type(a)) {
                    var c, g, f, q, b = [],
                        s = a;
                    c = 0;
                    for (f = this.data.length; c < f; c++)
                        for (g = 0, q = s.length; g < q; g++)
                            if (s[g] === this.data[c]) {
                                b.push({
                                    index: c,
                                    item: this.data[g]
                                });
                                break
                            }
                    c = g = 0;
                    for (f = b.length; c < f; c++) this.data.splice(b[c].index - g, 1), g += 1;
                    return this._trigger("remove", {
                        items: b
                    })
                }
                "number" === e.type(a) && a <= this.data.length - 1 && (b = !0);
                if ("object" === e.type(a))
                    for (c = 0, f = this.data.length; c < f; c++)
                        if (this.data[c] === a) {
                            a = c;
                            b = !0;
                            break
                        }
                d || (d = 1);
                return this._remove(a, d, b)
            },
            _remove: function(a,
                d, b) {
                if (!0 == b) return b = this.data.slice(a, a + d), this.data.splice(a, d), this._trigger("remove", {
                    index: a,
                    items: b
                })
            },
            replaceAll: function(a) {
                var d = {
                    oldItems: this.data.slice(0),
                    newItems: a
                };
                g.apply(this.data, [0, this.data.length].concat(a));
                return this._trigger("replaceAll", d)
            }
        };
        e.each({
            bind: "bind",
            unbind: "unbind",
            _trigger: "triggerHandler"
        }, function(a, d) {
            f.prototype[a] = function() {
                var a = e([this.data]);
                a[d].apply(a, arguments);
                return this
            }
        })
    }
})(jQuery);
void 0 == window.RadiantQ && (window.RadiantQ = {});
(function(e) {
    RadiantQ.RQ_CollectionChangeNotifier = function(b) {
        Array.call(this);
        if (b && b.length) {
            this.length = b.length;
            for (var c = 0, a = b.length; c < a; c++) this[c] = b[c]
        }
        this.CollectionChanged = new ObjectEvent("CollectionChanged")
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype = [];
    RadiantQ.RQ_CollectionChangeNotifier.prototype.add = function(b) {
        this.push(b)
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.contains = function(b) {
        return -1 != e.inArray(b, this)
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.push = function(b) {
        Array.prototype.push.call(this,
            b);
        this.triggerCollectionChanged({
            Action: "Add",
            NewItems: [b],
            index: this.length - 1
        })
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.insert = function(b, c) {
        "number" == typeof b ? this.splice(b, 0, c) : this.add(b)
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.splice = function(b, c, a) {
        var d = [],
            d = void 0 == a ? Array.prototype.splice.call(this, b, c) : Array.prototype.splice.call(this, b, c, a);
        !1 == RadiantQ.CanUseDefineProperty && void 0 != this[b] && delete this[this.length];
        if (a) {
            var g = {
                Action: "Add"
            };
            g.index = b;
            g.NewItems = a instanceof
            Array ? a : [a];
            this.triggerCollectionChanged(g)
        }
        c && 0 < c && (g = {
            Action: "Remove"
        }, g.index = b, g.OldItems = d, this.triggerCollectionChanged(g))
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.merge = function(b, c) {
        !1 == c instanceof Array && (c = [c]);
        var a = c.slice(0);
        a.splice(0, 0, b, 0);
        Array.prototype.splice.apply(this, a);
        c && (a = {
            Action: "Add"
        }, a.index = b, a.NewItems = c instanceof Array ? c : [c], this.triggerCollectionChanged(a))
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.pop = function() {
        var b = Array.prototype.pop.call(this);
        args = {};
        b && (args.Action = "Remove", args.index = this.length, args.OldItems = [b]);
        this.triggerCollectionChanged(args);
        return b
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.remove = function(b) {
        if ("number" == typeof b) return this.splice(b, 1);
        b = this.indexOf(b);
        if (-1 != b) return this.splice(b, 1)
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.clear = function() {
        this.splice(0, this.length)
    };
    RadiantQ.RQ_CollectionChangeNotifier.prototype.triggerCollectionChanged = function(b) {
        var c = {
            type: "",
            sender: this,
            target: this
        };
        "Add" == b.Action ? (c.type = "insert", b.items = b.NewItems) : (c.type = "remove", b.items = b.OldItems);
        this.CollectionChanged.raise(c, b)
    }
})(jQuery);
(function(e) {
    var b = e(document);
    if (e.fn.menu) {
        e.jQContextMenu = function(g, f) {
            this.options;
            var h = e.extend({
                selector: null,
                target: null,
                beforeContextMenu: null,
                itemClick: null,
                position: d
            }, f);
            this.options = h;
            this.options.menuParent = null;
            this.options.menuElement = null;
            this.options.menuWidget = null;
            this.options.menuLayer = null;
            this.options.currentElement = null;
            b.on("contextmenu", h.selector, this.options, a.contextMenuHandler);
            c(this.options);
            this.hide = function() {
                "block" == this.options.menuParent.style("display") && a.hideMenu()
            }
        };
        e.fn.jQContextMenu = function(a) {
            var d = this.data("jQContextMenu");
            if (a.x && a.y) this.first().trigger(jQuery.Event("contextmenu", {
                pageX: a.x,
                pageY: a.y
            }));
            else if ("hide" == a && d) d.hide();
            else if (void 0 == d || void 0 != a.selector && d.options.selector != a.selector) d = new e.jQContextMenu(this, a), this.data("jQContextMenu", d), a.selector && e(a.selector).data("jQContextMenu", d);
            return this
        };
        var c = function(d) {
            var b = e(d.target),
                c;
            0 != b.length ? (d.menuElement = b, c = b.parent()) : d.menuElement = e("<ul>");
            c && "menuParent" == c[0].id ? d.menuParent =
                c : (d.menuParent = e("<div id='menuParent' style='overflow: inherit; font-size: 12px; position: absolute;'>"), d.menuParent.append(d.menuElement).appendTo("body"), d.menuParent.hide(), d.menuParent.on("mouseleave", {
                    options: d
                }, a.onMenuMouseLeave), d.menuParent.on("mouseenter", {
                    options: d
                }, a.onMenuMouseEnter), d.menuElement.menu({
                    select: a.menuSelectHandler
                }));
            d.menuWidget = d.menuElement.menu("instance");
            b = e(window);
            d.menuLayer = e("#menuLayerDiv", "body");
            0 == d.menuLayer.length && (d.menuLayer = e('<div id="menuLayerDiv" style="position:fixed; top:0; left:0; filter: alpha(opacity=0); opacity: 0; background-color: #000;"></div>'),
                d.menuLayer.css({
                    height: b.height(),
                    width: b.width(),
                    display: "block"
                }), d.menuLayer.insertBefore(d.menuParent), d.menuLayer.on("contextmenu", {
                    options: d
                }, a.onLayerContextMenu), d.menuLayer.on("mousedown", {
                    options: d
                }, a.onLayerMouseDown), b.on("resize", {
                    options: d
                }, a.onWinResize), d.menuLayer.hide())
        }, a = {
                options: null,
                contextMenuHandler: function(d) {
                    d.preventDefault();
                    d.stopImmediatePropagation();
                    var c = d.data;
                    a.options = c;
                    c.currentElement = e(d.currentTarget);
                    var h = d.pageX;
                    d = d.pageY;
                    c.beforeContextMenu && "function" ==
                        typeof c.beforeContextMenu && c.beforeContextMenu(c.currentElement, c.menuWidget);
                    if (0 != c.menuElement[0].children.length) {
                        e(window);
                        var k = b[0].body.scrollHeight,
                            n = b[0].body.scrollWidth,
                            l = c.menuParent.height(),
                            m = c.menuParent.width();
                        h + m > n && (h = n - m);
                        d + l > k && (d = k - l);
                        c.position(c, h, d);
                        h = 0;
                        for (d = c.currentElement; h = Math.max(h, parseInt(d.css("z-index"), 10) || 0), d = d.parent(), d && d.length && !(-1 < "html body".indexOf(d.prop("nodeName").toLowerCase())););
                        h += 1;
                        c.menuParent.css({
                            "z-index": h
                        });
                        c.menuLayer.css({
                            "z-index": h
                        });
                        c.menuParent.show();
                        c.menuLayer.show();
                        c.menuElement.focus();
                        b.on("keydown", a.onDocKeyDown)
                    }
                },
                menuSelectHandler: function(d, b) {
                    if (0 < e("ul", b.item).length) return !1;
                    a.options.itemClick && "function" == typeof a.options.itemClick && a.options.itemClick(a.options.currentElement, {
                        event: d,
                        items: b.item
                    });
                    a.hideMenu()
                },
                onLayerContextMenu: function(a) {
                    a.preventDefault();
                    a.stopImmediatePropagation()
                },
                onLayerMouseDown: function(d) {
                    d.preventDefault();
                    d.stopImmediatePropagation();
                    opn = d.data.options;
                    opn.menuParent.hide();
                    e(this).hide();
                    b.off("keydown", a.onDocKeyDow)
                },
                onDocKeyDown: function(d) {
                    switch (d.keyCode) {
                        case 27:
                            a.hideMenu()
                    }
                },
                onMenuMouseEnter: function(a) {
                    a.data.options.menuElement.focus()
                },
                onMenuMouseLeave: function(a) {
                    a.data.options.menuElement.blur()
                },
                onWinResize: function(a) {
                    var d = a.data.options;
                    a = e(a.currentTarget);
                    d.menuLayer.css({
                        height: a.height(),
                        width: a.width()
                    })
                },
                hideMenu: function() {
                    a.options.menuParent.hide();
                    a.options.menuLayer.hide();
                    b.off("keydown", a.onDocKeyDow)
                }
            }, d = function(a, d, b) {
                a.menuParent.css({
                    top: b,
                    left: d
                })
            }
    }
})(jQuery);
(function(e) {
    var b = /^[\],:{}\s]*$/,
        c = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
        a = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
        d = /(?:^|:|,)(?:\s*\[)+/g,
        g = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?Z/i,
        f = /\/Date\((\d+)(?:-\d+)?\)\//i,
        h = /"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?-\d{2}:\d{2}"/,
        k = /\/Date\((-\d+)(?:-\d+)?\)\//i,
        n = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2})(\.\d*)?)/,
        l = /"(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:[.,](\d+))?Z"/gi,
        m = /"\\\/Date\((\d+)(?:-\d+)?\)\\\/"/gi,
        p = /^(\d*.\d{2}:\d{2}:\d{2})$/,
        q = /^(\d{2}:\d{2}:\d{2})/,
        s = window.JSON && window.JSON.parse ? !0 : !1,
        r = s && "Y" === window.JSON.parse('{"x":9}', function(a, d) {
            return "Y"
        });
    e.extend({
        parseJSON: function(t, x, w, u) {
            if ("string" !== typeof t || !t) return null;
            null != Date.prototype._toString && -1 == Date.prototype._toString.toString().indexOf("[native code]") && console.error("Multiple references to 'date.js' is found. Correct this and ensure that there is only a single reference.");
            t = e.trim(t);
            this.jsonDateConverter = function(a,
                d) {
                var b = null;
                if ("string" === typeof d) {
                    if (p.test(d) || q.test(d)) b = RQTimeSpan.parse(d);
                    if (g.test(d)) {
                        b = new Date(d);
                        if (isNaN(b)) {
                            var c = /^(\d{4})-(\d{2})-(\d{2})((T)(\d{2}):(\d{2})(:(\d{2})(\.\d*)?)?)?(Z)?$/;
                            (c = "string" === typeof d && d.match(c)) && (b = new Date(+c[1], +c[2] - 1, +c[3], +c[6] || 0, +c[7] || 0, +c[9] || 0, parseInt(1E3 * +c[10]) || 0))
                        }
                        "Invalid Date" != b && !0 == w && b.addMinutes(b.getTimezoneOffset())
                    } else h.test(d) ? b = new Date(d) : f.test(d) ? b = new Date(parseInt(f.exec(d)[1], 10)) : k.test(d) ? b = Date.MinValue : n.test(d) &&
                        (b = new Date(d))
                }
                return u && (c = u.apply(this, [a, b || d]), null != c) ? c : b || d
            };
            if (b.test(t.replace(c, "@").replace(a, "]").replace(d, ""))) {
                if (r || s && !0 !== x) return window.JSON.parse(t, !0 === x ? this.jsonDateConverter : void 0);
                t = !0 === x ? t.replace(l, "new Date(parseInt('$1',10),parseInt('$2',10)-1,parseInt('$3',10),parseInt('$4',10),parseInt('$5',10),parseInt('$6',10),(function(s){return parseInt(s,10)||0;})('$7'))").replace(m, "new Date($1)") : t;
                return (new Function("return " + t))()
            }
            e.error("Invalid JSON: " + t)
        }
    })
})(jQuery);
(function(e) {
    function b(a, d) {
        this.type = a;
        this.fn = [];
        this._thisArgs = [];
        this.handlers = [];
        "function" == typeof d && (this.handlers.push(new b.handlerInfo(this, d, this)), this.fn.push(d), this._thisArgs.push(this))
    }

    function c(a, d, b) {
        this.event = a;
        this.fn = d;
        this.DataContext = b
    }
    b.prototype.isSubscribed = function(a) {
        return a ? -1 == e.inArray(a, this.fn) ? !1 : !0 : 0 < this.fn.length ? !0 : !1
    };
    b.prototype.raise = function(a, d) {
        for (var b = this.handlers.slice(0), c = 0; c < b.length; c++) {
            var h = b[c];
            "function" == typeof h.fn && h.fn.apply(h.DataContext,
                arguments)
        }
    };
    b.prototype.subscribe = function(a, d) {
        d = d || this._callee || this;
        var c = new b.handlerInfo(this, a, d);
        this.handlers.push(c);
        this.fn.push(a);
        this._thisArgs.push(d);
        return c
    };
    b.prototype.unsubscribe = function(a, d) {
        if (d)
            for (var b = 0; b < this._thisArgs.length; b++) {
                if (this._thisArgs[b] === d && this.fn[b] == a) {
                    this.handlers[b]._makeObjectsNull();
                    this.fn.splice(b, 1);
                    this._thisArgs.splice(b, 1);
                    this.handlers.splice(b, 1);
                    break
                }
            } else
                for (b = 0; b < this.fn.length; b++)
                    if (this.fn[b] === a) {
                        this.fn.splice(b, 1);
                        this._thisArgs.splice(b,
                            1);
                        break
                    }
    };
    b.prototype.Dispose = b.prototype.clear = function() {
        for (var a = this.handlers.slice(0), d = 0; d < a.length; d++) a[d].Dispose();
        b.call(this, this.type)
    };
    b.prototype.IsEqual = function(a) {
        var d = null,
            b = null;
        if (!this.isSubscribed() && a.isSubscribed() || this.isSubscribed() && !a.isSubscribed()) return !1;
        if (this.isSubscribed() && a.isSubscribed()) {
            d = this.fn;
            b = a.fn;
            if (this.fn.length != a.fn.length) return !1;
            for (a = 0; a < d.length; a++)
                if (d[a] != b[a]) return !1
        }
        return !0
    };
    c.prototype.Dispose = function() {
        null != this.event && this.event.unsubscribe(this.fn,
            this.DataContext);
        this._makeObjectsNull()
    };
    c.prototype._makeObjectsNull = function() {
        this.DataContext = this.fn = this.event = null
    };
    b.handlerInfo = c;
    window.ObjectEvent = b
})(jQuery);
(function(e, b) {
    Template = function(b, a) {
        var d = b.replace(/\\\}/g, "__CURLY__").replace(/\$\{([^}]*)\}/g, "#=($1)#").split("#"),
            g = "var x=";
        for (i = 0; i < d.length; i++) {
            var f;
            f = d[i];
            f = 0 === i % 2 ? "'" + f.split("'").join("\\'").split('\\"').join('\\\\\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t") + "'" : "=" === f.charAt(0) ? "+(" + f.substring(1) + ")+" : ";" + f + ";x+=";
            g += f
        }
        g += ";return x;";
        g = g.replace("__CURLY__", "}");
        d = new Function("data", g);
        return a ? d(a) : d
    };
    getHasValue = function(c, a) {
        for (var d = a.split("."),
                g = 0; g < d.length; g++) "undefined" != typeof c && (c = c[d[g] + "_M"] ? c[d[g] + "_M"]() : c[d[g]]);
        if (!0 == b.isFunction(c)) return !0;
        if (void 0 == c) return !1
    };
    Template.hasValueInWindow = function(b) {
        return !1 == getHasValue(window, b) ? !1 : !0
    };
    Template.getterCache = {};
    Template.getter = function(b, a) {
        if ("" == b) return "";
        var d = null;
        null == Template.getterCache[b] && (d = " if(d." + b + " != undefined)  if(typeof(d." + b + ") ==='function')   return d." + b + "(); else return d." + b + ";else if(" + Template.hasValueInWindow(b) + " ){ if(typeof " + b + " === 'function')    return " +
            b + "(d); else return " + b + ";}else return null;", d = Function("d", d), Template.getterCache[b] = d);
        d = Template.getterCache[b];
        return a ? d(a) : d
    };
    Template.setterCache = {};
    Template.setter = function(b, a, d) {
        var g = null;
        null == Template.setterCache[b] && (g = " if(d." + b + " != undefined) if(typeof(d." + b + ") ==='function') d." + b + "(value);else d." + b + "= value;else if(" + Template.hasValueInWindow(b) + " ){ if(typeof " + b + " === 'function') " + b + "(d,value); else " + b + "=value;}else d." + b + "= value;", g = Function("d", "value", g), Template.setterCache[b] =
            g);
        g = Template.setterCache[b];
        return a ? g(a, d) : g
    };
    e.Default = {};
    e.Default.Template = {};
    e.Template = Template;
    e.Default.Template.ProjectGanttExpandableTextBlockTemplate = function(b) {
        var a = /data.Activity.ActivityName/g;
        return b ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${data.Activity_M().ActivityName_M()}</div>'.replace(a,
            b) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${data.Activity_M().ActivityName_M()}</div>'
    };
    e.Default.Template.FlexyGanttExpandableTextBlockTemplate =
        function(b) {
            var a = /name/g;
            return b ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'.replace(a,
                b) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'
    };
    ExpanderOnclick = function(c, a) {
        var d = b(c).closest("tr"),
            g = d.closest("table.ui-grid-body-table").find("tbody").data("VWGrid"),
            d = g.GetDataFromRow(d);
        d instanceof e.FlexyGantt.FlexyNodeData ? (d.HierarchicalItem._forceToCreateNewChildList = !0, d.HierarchicalItem.IsExpanded(!d.HierarchicalItem.IsExpanded()), d.HierarchicalItem._forceToCreateNewChildList = !1, g.RefreshItem(d)) : d.IsExpanded_M(!d.IsExpanded_M());
        void 0 != a.stopPropagation && a.stopPropagation()
    }
})(RadiantQ, jQuery);

function NotifyPropertyChanged() {
    this.PropertyChanged = new ObjectEvent("PropertyChanged")
}
NotifyPropertyChanged.prototype.OnPropertyChanged = function(e, b, c) {
    c ? this.PropertyChanged.raise(this, {
        PropertyName: e,
        value: b,
        context: c
    }) : this.PropertyChanged.raise(this, {
        PropertyName: e,
        value: b
    })
};
NotifyPropertyChanged.prototype.Dispose = function() {
    this.PropertyChanged && this.PropertyChanged.Dispose();
    this.PropertyChanged = null
};

function Binding(e, b, c, a, d, g, f) {
    var h = b.split(".");
    1 < h.length && (e = RadiantQ.Gantt.Utils.getChildObject(e, b), b = h[h.length - 1]);
    h = a.split(".");
    1 < h.length && (c = RadiantQ.Gantt.Utils.getChildObject(e, a), a = h[h.length - 1]);
    this.source = e;
    this.sourcePropertyName = b;
    this.targetPropertyName = a;
    this.sourceProperty = e[b + "_M"] ? b + "_M" : b;
    this.targetProperty = c[a + "_M"] ? a + "_M" : a;
    this.converterFn = d;
    this.ConvertBack = this.Convert = null;
    this.target = c;
    this.targetKOSubscriberInstance = this.sourceKOSubscriberInstance = null;
    this.bindingMode =
        void 0 == g ? "OneWay" : g;
    this.ConverterContext = f;
    null != this.converterFn && (this.Convert = d.Convert ? d.Convert : null, this.ConvertBack = d.ConvertBack ? d.ConvertBack : null);
    this.targetChanging = this.sourceChanging = !1;
    var k = this;
    this.SourcePropertyChangeListener = function(a, d) {
        d.PropertyName == k.sourcePropertyName && (k.sourceChanging = !0, !1 == k.targetChanging && k.updateTarget(), k.sourceChanging = !1)
    };
    this.TargetPropertyChangeListener = function(a, d) {
        d.PropertyName == k.targetPropertyName && (k.targetChanging = !0, !1 == k.sourceChanging &&
            k.updateSource(), k.targetChanging = !1)
    };
    this.subscribePropchangeNotifier();
    k.sourceChanging = !0;
    this.updateTarget.apply(this, arguments);
    k.sourceChanging = !1;
    this.Dispose = function() {
        this._sourcePropertyChangedHandler ? (this._sourcePropertyChangedHandler.Dispose(), this._sourcePropertyChangedHandler = null) : this.sourceKOSubscriberInstance && (this.sourceKOSubscriberInstance.dispose(), this.sourceKOSubscriberInstance = null);
        this.bindingMode == RadiantQ.Gantt.BindingMode.TwoWay && (this._targetPropertyChangedHandler ?
            (this._targetPropertyChangedHandler.Dispose(), this._targetPropertyChangedHandler = null) : this.targetKOSubscriberInstance && (this.targetKOSubscriberInstance.dispose(), this.targetKOSubscriberInstance = null))
    }
}
Binding.prototype.subscribePropchangeNotifier = function() {
    var e = this;
    "function" === typeof this.source[this.sourcePropertyName] && this.source[this.sourcePropertyName].subscribe && (this.sourceKOSubscriberInstance = this.source[this.sourcePropertyName].subscribe(function(b) {
        Binding.prototype.updateTarget.apply(e, arguments)
    }.bind(this)));
    null == this.sourceKOSubscriberInstance && this.source.PropertyChanged && (this._sourcePropertyChangedHandler = this.source.PropertyChanged.subscribe(this.SourcePropertyChangeListener,
        this));
    if (this.bindingMode == RadiantQ.Gantt.BindingMode.TwoWay) {
        "function" === typeof this.target[this.targetPropertyName] && this.target[this.targetPropertyName].subscribe && (this.targetKOSubscriberInstance = this.target[this.targetPropertyName].subscribe(function(b) {
            Binding.prototype.updateSource.apply(e, arguments)
        }.bind(this)));
        if (!this.target.PropertyChanged) throw Error("Binding should be used with a source that is of type NotifyPropertyChanged");
        null == this.targetKOSubscriberInstance && (this._targetPropertyChangedHandler =
            this.target.PropertyChanged.subscribe(this.TargetPropertyChangeListener));
        if (!this.ConvertBack && this.Convert) throw Error("Two Way binding requires ConvertBack");
    }
};
Binding.prototype.updateTarget = function() {
    this.updateValue(this.source, this.sourceProperty, this.target, this.targetProperty, this.Convert)
};
Binding.prototype.updateSource = function() {
    this.updateValue(this.target, this.targetProperty, this.source, this.sourceProperty, this.ConvertBack)
};
Binding.prototype.updateValue = function(e, b, c, a, d) {
    var g = null,
        f = this.ConverterContext || this,
        g = "function" === typeof e[b] ? e[b]() : e[b];
    null != d && (g = d.call(f, g, e, c));
    if ("function" === typeof c[a]) c[a](g);
    else c[a] = g
};
(function(e) {
    void 0 == window.RadiantQ && (window.RadiantQ = {});
    "undefined" == typeof Function.prototype.bind && (Function.prototype.bind = function(a, d) {
        return void 0 == d ? e.proxy(this, a) : e.proxy(this, a, d)
    });
    if (Object.defineProperty) {
        RadiantQ.CanUseDefineProperty = !0;
        try {
            Object.defineProperty({}, "test", {
                get: function() {
                    return !0
                }
            })
        } catch (b) {
            RadiantQ.CanUseDefineProperty = !1
        }
    } else RadiantQ.CanUseDefineProperty = !1;
    RadiantQ.Gantt = {};
    RadiantQ.Gantt.Widget = {};
    RadiantQ.Gantt.Utils = {};
    RadiantQ.Gantt.TimeScaleType = {
        Minutes: 90,
        Hours: 180,
        Days: 270,
        Weeks: 360,
        Months: 450,
        Years: 540,
        Custom: 630
    };
    RadiantQ.Gantt.RoundToOptions = {
        None: "None",
        Auto: "Auto",
        Minute: "Minute",
        FifteenMinutes: "FifteenMinutes",
        ThirtyMinutes: "ThirtyMinutes",
        Hour: "Hour",
        HalfDay: "HalfDay",
        Day: "Day"
    };
    RadiantQ.Gantt.DependencyType = {
        FinishToStart: "FinishToStart",
        StartToStart: "StartToStart",
        FinishToFinish: "FinishToFinish",
        StartToFinish: "StartToFinish",
        None: "None"
    };
    RadiantQ.Gantt.RowDragBehavior = {
        DragRowHeader: 1,
        DragEntireRow: 2,
        DragElement: 3
    };
    RadiantQ.Gantt.TimeUnitsCache =
        function() {
            this._timeUnitsByRange = new RadiantQ.Gantt.Dictionary;
            this.GetRangeString = function(a, d) {
                return a.toString() + "-" + d.toString()
            };
            this.SetTimeUnitsCacheForRange = function(a, d, b) {
                a = this.GetRangeString(a, d);
                4 < this._timeUnitsByRange.Keys.length && (this._timeUnitsByRange.Keys.First(), this._timeUnitsByRange.Remove(this._timeUnitsByRange.Keys.First()));
                this._timeUnitsByRange.Add(a, b)
            };
            this.GetTimeUnitsCacheForRange = function(a, d) {
                var b = this.GetRangeString(a, d);
                return this._timeUnitsByRange.GetItemByKey(b)
            };
            this.ClearTimeUnitsCacheForRange = function(a, d) {
                var b = this.GetRangeString(a, d);
                this._timeUnitsByRange.Remove(b)
            }
    };
    RadiantQ.Gantt.CustomTimeScaleTypeHint = function(a, d) {
        this.EquivalentUnits = a;
        this.EquivalentType = d;
        this.Clone = function() {
            var a = new RadiantQ.Gantt.CustomTimeScaleTypeHint;
            a.EquivalentType = this.EquivalentType;
            a.EquivalentUnits = this.EquivalentUnits;
            return a
        };
        this.IsEqual = function(a) {
            if (this instanceof RadiantQ.Gantt.CustomTimeScaleTypeHint && a instanceof RadiantQ.Gantt.CustomTimeScaleTypeHint) return null ==
                this && null == a ? !0 : null == this || null == a || this.EquivalentType != a.EquivalentType || this.EquivalentUnits != a.EquivalentUnits ? !1 : !0
        }
    };
    RadiantQ.Gantt.TimeScaleHeaderDefinition = function() {
        NotifyPropertyChanged.apply(this, arguments);
        this.ProvideCustomTimeIntervals = new ObjectEvent("ProvideCustomTimeIntervals");
        this.ProvideCustomHeaderText = new ObjectEvent("ProvideCustomHeaderText");
        this.RenderCallBack = new ObjectEvent("RenderCallBack");
        this.TimeUnitsCache = new RadiantQ.Gantt.TimeUnitsCache;
        this._name = null;
        this.Type =
            RadiantQ.Gantt.TimeScaleType.Days;
        this.CustomTimeScaleTypeHint = null;
        this.BaseTimeUnitWidth = 25;
        this.BaseTimeScaleType = RadiantQ.Gantt.TimeScaleType.Hours;
        this.textFormat = "";
        this.TextFormat_M = function(a) {
            if (0 == arguments.length) return this._textFormat;
            this._textFormat != a && (this._textFormat = a, this.OnPropertyChanged("TextFormat", a))
        };
        RadiantQ.CanUseDefineProperty ? Object.defineProperty(this, "TextFormat", {
            get: function() {
                return this._textFormat
            },
            set: function(a) {
                this._textFormat != a && (this._textFormat = a, this.OnPropertyChanged("TextFormat",
                    a))
            },
            enumerable: !0,
            configurable: !0
        }) : this.TextFormat = "";
        this.HeaderHeight = 22;
        this.name = function(a) {
            if (void 0 == a)
                if (null == this._name || "" == this._name)
                    if (this.Type != RadiantQ.Gantt.TimeScaleType.Custom)
                        for (key in RadiantQ.Gantt.TimeScaleType) {
                            if (RadiantQ.Gantt.TimeScaleType[key] == this.Type) return key.toString()
                        } else return new String;
                    else return this._name;
                    else this._name = a
        };
        this.Clone = function() {
            var a = new RadiantQ.Gantt.TimeScaleHeaderDefinition;
            a.CustomTimeScaleTypeHint = this.CustomTimeScaleTypeHint;
            a.HeaderHeight = this.HeaderHeight;
            a.TextFormat = this.TextFormat;
            a.Type = this.Type;
            a.TimeUnitTemplate = this.TimeUnitTemplate;
            if (this.ProvideCustomHeaderText.isSubscribed())
                for (var d = 0; d < this.ProvideCustomHeaderText.fn.length; d++) a.ProvideCustomHeaderText.subscribe(this.ProvideCustomHeaderText.fn[d]);
            if (this.ProvideCustomTimeIntervals.isSubscribed())
                for (d = 0; d < this.ProvideCustomTimeIntervals.fn.length; d++) a.ProvideCustomTimeIntervals.subscribe(this.ProvideCustomTimeIntervals.fn[d]);
            return a
        };
        this.IsEqual =
            function(a) {
                var d = null,
                    b = null;
                if (null == this && null == a) return !0;
                if (null == this || null == a) return !1;
                if (null != this.CustomTimeScaleTypeHint && null != a.CustomTimeScaleTypeHint) {
                    if (!this.CustomTimeScaleTypeHint.IsEqual(a.CustomTimeScaleTypeHint)) return !1
                } else {
                    if (this.HeaderHeight != a.HeaderHeight || this.TextFormat != a.TextFormat || this.Type != a.Type || this.TimeUnitTemplate != a.TimeUnitTemplate || !this.ProvideCustomHeaderText.IsEqual(a.ProvideCustomHeaderText)) return !1;
                    if (this.ProvideCustomHeaderText.IsEqual(a.ProvideCustomHeaderText)) {
                        d =
                            this.ProvideCustomHeaderText.fn;
                        b = a.ProvideCustomHeaderText.fn;
                        if (this.ProvideCustomHeaderText.fn.length != a.ProvideCustomHeaderText.fn.length) return !1;
                        for (var c = 0; c < d.length; c++)
                            if (d[c] != b[c]) return !1
                    }
                } if (!this.ProvideCustomTimeIntervals.IsEqual(a.ProvideCustomTimeIntervals)) return !1;
                if (this.ProvideCustomTimeIntervals.IsEqual(a.ProvideCustomTimeIntervals)) {
                    d = this.ProvideCustomTimeIntervals.fn;
                    b = a.ProvideCustomTimeIntervals.fn;
                    if (this.ProvideCustomTimeIntervals.fn.length != a.ProvideCustomTimeIntervals.fn.length) return !1;
                    for (c = 0; c < d.length; c++)
                        if (d[c] != b[c]) return !1
                }
                return !0
        };
        this.IsGreater = function(a) {
            var d = this.Type,
                b = a.Type;
            if (d == RadiantQ.Gantt.TimeScaleType.Custom) {
                if (null == this.CustomTimeScaleTypeHint) throw "Encountered a Custom TimeScaleType header with CustomTimeScaleTypeHint not set in TimeScaleHeaderDefinition's > operator.";
                d = this.CustomTimeScaleTypeHint.EquivalentType
            }
            if (b == RadiantQ.Gantt.TimeScaleType.Custom) {
                if (null == a.CustomTimeScaleTypeHint) throw "Encountered a Custom TimeScaleType header with CustomTimeScaleTypeHint not set in TimeScaleHeaderDefinition's > operator.";
                b = a.CustomTimeScaleTypeHint.EquivalentType
            }
            return d > b ? !0 : d != b || this.Type != RadiantQ.Gantt.TimeScaleType.Custom && a.Type != RadiantQ.Gantt.TimeScaleType.Custom ? !1 : (this.Type == RadiantQ.Gantt.TimeScaleType.Custom ? this.CustomTimeScaleTypeHint.EquivalentUnits : 1) > (a.Type == RadiantQ.Gantt.TimeScaleType.Custom ? a.CustomTimeScaleTypeHint.EquivalentUnits : 1) ? !0 : !1
        }
    };
    RadiantQ.Gantt.TimeScaleHeaderDefinition.prototype = new NotifyPropertyChanged;
    RadiantQ.Gantt.ProvideCustomerHeaderTextEventArgs = function(a, d, b) {
        this.dateTime =
            a;
        this.Text = d;
        this.TooltipText = null;
        this.width = b
    };
    RadiantQ.Gantt.ProvideCustomTimeIntervalsEventArgs = function(a, d) {
        this.ViewStartTime = a;
        this.ViewEndTime = d;
        this.TimeIntervals = []
    };
    RadiantQ.Gantt.RoundDownDuration = function(a) {
        var d = RadiantQ.Gantt.Utils.TimeComputingUtils,
            b = Date.today();
        a = b.addTimeSpan(a);
        a = this.RoundTimeDown(a, this.GetActualRoundToOption());
        return d.GetTimeSpan(b, a)
    };
    RadiantQ.Gantt.RoundDown = function(a) {
        return this.RoundTimeDown(a, this.GetActualRoundToOption())
    };
    RadiantQ.Gantt.RoundTimeDown =
        function(a, d) {
            var b = a.getHours(),
                c = new Date(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0);
            switch (d) {
                case RadiantQ.Gantt.RoundToOptions.HalfDay:
                    if (c == a || c.addHours((new RQTimeSpan(0, 12, 0, 0)).getTotalHours()) == a) break;
                    return 12 > b ? a.Date() : a.Date().addHours(12);
                case RadiantQ.Gantt.RoundToOptions.Day:
                    return a.Date();
                case RadiantQ.Gantt.RoundToOptions.Hour:
                    return b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), b, 0, 0);
                case RadiantQ.Gantt.RoundToOptions.ThirtyMinutes:
                    if (c = a.getMinutes(), !(0 == c || 30 >
                        c) && (30 == c || 59 >= c)) return c = 30, new Date(a.getFullYear(), a.getMonth(), a.getDate(), b, c, 0, DateTimeKind.Utc);
                case RadiantQ.Gantt.RoundToOptions.FifteenMinutes:
                    c = a.getMinutes();
                    if (0 == c || 15 > c) c = 0;
                    else if (15 == c || 30 > c) c = 15;
                    else if (30 == c || 45 > c) c = 30;
                    else if (45 == c || 59 >= c) c = 45;
                    return new Date(a.getFullYear(), a.getMonth(), a.getDate(), b, c, 0, DateTimeKind.Utc);
                case RadiantQ.Gantt.RoundToOptions.Minute:
                    return b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), b, a.Minute, 0, DateTimeKind.Utc)
            }
            return a
    };
    RadiantQ.Gantt.TimeSpanHeaderMouseTracker =
        function(a) {
            this.Headers = function() {
                return a
            };
            this.LatestPos = function(a) {
                if (void 0 == a) {
                    if (null != this.xLatestPos) return this.xLatestPos
                } else this.xLatestPos = a
            };
            this.IsDragging = function(a) {
                if (void 0 == a) {
                    if (null != this._isDragging) return this._isDragging
                } else this._isDragging = a, RadiantQ.Gantt.TimeSpanHeaderMouseTracker.IsDraggingGlobal = a, this._isDragging || this.OnDoneDragging()
            }
    };
    RadiantQ.Gantt.TimeSpanHeaderMouseTracker.IsDraggingGlobal = !1;
    RadiantQ.Gantt.TimeSpanHeaderZoomTracker = function() {
        this.StartDragging =
            function(a, d) {
                this.LatestPos(a);
                this.StartBTUW = d;
                this.IsDragging(!0);
                return !0
        };
        this.MouseMovedTo = function(a, d) {
            if (this.IsDragging()) {
                var b = this.LatestPos() - a;
                d._trigger("zoomed", this, this.StartBTUW - b / 5)
            }
        };
        this.OnDoneDragging = function() {}
    };
    RadiantQ.Gantt.TimeSpanHeaderZoomTracker.prototype = new RadiantQ.Gantt.TimeSpanHeaderMouseTracker;
    RadiantQ.Gantt.TimeSpanHeaderScrollTracker = function() {
        this.StartDragging = function(a, d, b) {
            this.LatestPos(a);
            this.StartBTUW = d;
            b.StartPanning();
            this.IsDragging(!0);
            return !0
        };
        this.MouseMovedTo = function(a, d) {
            if (this.IsDragging()) {
                var b = this.LatestPos() - a;
                d.ScrollBy(b);
                this.LatestPos(a)
            }
        };
        this.OnDoneDragging = function() {}
    };
    RadiantQ.Gantt.TimeSpanHeaderScrollTracker.prototype = new RadiantQ.Gantt.TimeSpanHeaderMouseTracker;
    RadiantQ.Gantt.AnchorTimeToStartTimeConverter = function() {};
    RadiantQ.Gantt.AnchorTimeToStartTimeConverter.RoundAnchorTime = function(a, d) {
        d > RadiantQ.Gantt.TimeScaleType.Hours ? a = (new Date(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0)).clone() : d > RadiantQ.Gantt.TimeScaleType.Minutes ?
            a = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), 0, 0) : d == RadiantQ.Gantt.TimeScaleType.Minutes && (a = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), 0));
        return a.clone()
    };
    RadiantQ.Gantt.AnchorTimeToStartTimeConverter.Convert = function(a) {
        var d = a.options.BaseTimeScaleType,
            b;
        if (!0 == a.options.ResizeToFit) b = a.options.AnchorTime.clone();
        else {
            b = a.options.AnchorTime.clone();
            var c = 0,
                c = RadiantQ.Gantt.TimeSpanHeaderMouseTracker.IsDraggingGlobal ? a.options.ViewWidth /
                    2 / a.options.BaseTimeUnitWidth : Math.ceil(a.options.ViewWidth / 2 / a.options.BaseTimeUnitWidth),
                c = RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertTimeUnitsToTimeSpan(d, c);
            b = b.clone().add({
                millisecond: -c.millisecond || c.milliseconds_M(),
                seconds: -c.seconds_M(),
                minutes: -c.minutes_M(),
                hours: -c.hours_M(),
                days: -c.days_M()
            })
        }
        a = null == a ? d : a.GetBTSTToRenderAgainst();
        return b = RadiantQ.Gantt.AnchorTimeToStartTimeConverter.RoundAnchorTime(b, a)
    };
    RadiantQ.Gantt.AnchorTimeToEndTimeConverter = function() {};
    RadiantQ.Gantt.AnchorTimeToEndTimeConverter.Convert =
        function(a) {
            var d = RadiantQ.Gantt.AnchorTimeToStartTimeConverter.Convert(a),
                b = RadiantQ.Gantt.Utils.TimeComputingUtils,
                c = a.options.BaseTimeScaleType;
            a = Math.ceil(a.options.ViewWidth / a.options.BaseTimeUnitWidth);
            a = b.ConvertTimeUnitsToTimeSpan(c, a);
            d = d.addTimeSpan(a);
            return d = c == RadiantQ.Gantt.TimeScaleType.Minutes ? b.CeilToNextMinute(d) : c == RadiantQ.Gantt.TimeScaleType.Hours ? b.CeilToNextHour(d) : b.CeilToNextDay(d)
    };
    RadiantQ.Gantt.GanttChartPanningUtil = function(a, d, b) {
        var c = RadiantQ.Gantt.Utils.TimeComputingUtils;
        this.IntermediateAnchorTime = a.clone();
        this.CurAnchorTime = a.clone();
        this.BaseTimeScaleType = d;
        this.BaseTimeUnitWidth = b;
        this.AnchorTimeChanged = new ObjectEvent("AnchorTimeChanged");
        this.ApplyXChange = function(a) {
            a = c.ConvertTimeUnitsToTimeSpan(this.BaseTimeScaleType, a / this.BaseTimeUnitWidth);
            this.IntermediateAnchorTime = this.IntermediateAnchorTime.addTimeSpan(a);
            a = RadiantQ.Gantt.AnchorTimeToStartTimeConverter.RoundAnchorTime(this.IntermediateAnchorTime, this.BaseTimeScaleType);
            a.equals(this.CurAnchorTime) ||
                (this.CurAnchorTime = a.clone(), this.AnchorTimeChanged.raise(this, null))
        }
    };
    RadiantQ.Gantt.ChartZoomOptions = {
        None: 0,
        ShowZoomSliderInHeader: 1,
        MouseWheelZoomOnTimeScaleHeaders: 2,
        MouseWheelZoomOnGanttChart: 4,
        LeftMouseButtonDownDrag: 8
    };
    RadiantQ.Gantt.ChartScrollOptions = {
        None: 0,
        LeftMouseButtonDownDrag: 1,
        CtrlAndLeftMouseButtonDownDrag: 2
    };
    RadiantQ.Gantt.CustomRangeInformationEventArgs = function(a, d) {
        this.ViewStartTime = a;
        this.ViewEndTime = d;
        this.CustomRanges = []
    };
    RadiantQ.Gantt.CustomRangeInfo = function(a, d, b) {
        this.StartTime =
            a;
        this.EndTime = d;
        if (d < a) throw "endTime cannot be earlier than startTime in a call to CustomRangeInfo constructor.";
        this.DataTemplate = b
    };
    RadiantQ.Gantt.CustomRangesInfos = function() {
        this.ProvideRepeatingCustomRanges = new ObjectEvent("ProvideRepeatingCustomRanges");
        this.DiscreetCustomRanges = new RadiantQ.RQ_CollectionChangeNotifier;
        this.RaiseProvideRepeatingCustomRanges = function(a) {
            this.ProvideRepeatingCustomRanges.raise(this, a)
        }
    };
    RadiantQ.Gantt.CustomRangeTimeUnit = function(a, d, b) {
        this.Width = a;
        this.CanvasLeft =
            d;
        this.CustomRangeInfo = b
    };
    RadiantQ.Gantt.Utils.GanttChartTimeScaleHeaderSettings = function(a) {
        this.AutoHidingTimeScaleHeaders = !0;
        this.MaximumTimeScaleHeadersCount = 2;
        this.DefaultBottomHeaderWidth = -1;
        this.BottomHeaderMaxWidth = 35;
        this.TopHeaderMinWidth = 40;
        this.ResizeToFit = !1;
        var d = a,
            b = a;
        this.IsProjectGantt = !1;
        this.TimeScaleHeaders = function(a) {
            if (void 0 == a) return b;
            b = a
        };
        var c = null;
        this.BoundGantt = function(a) {
            if (void 0 == a) return c;
            if (c != a) {
                if (!e(a).hasClass("rq-ganttBase")) throw "Invalid Selector";
                c = e(a);
                this.IsProjectGantt = null != c.data("GanttControl");
                null != c && this.ApplySettingsOnGantt()
            }
        };
        this.SelectedHeaders = function(a) {
            if (void 0 == a) return d;
            d = a
        };
        this.Clone = function() {
            var a = new RadiantQ.Gantt.Utils.GanttChartTimeScaleHeaderSettings(this.SelectedHeaders);
            a.AutoHidingTimeScaleHeaders = this.AutoHidingTimeScaleHeaders;
            a.TimeScaleHeaders(this.TimeScaleHeaders().Clone());
            a.BottomHeaderMaxWidth = this.BottomHeaderMaxWidth;
            a.DefaultBottomHeaderWidth = this.DefaultBottomHeaderWidth;
            a.MaximumTimeScaleHeadersCount =
                this.MaximumTimeScaleHeadersCount;
            a.TopHeaderMinWidth = this.TopHeaderMinWidth;
            a.ResizeToFit = this.ResizeToFit;
            return a
        };
        this.IsEqual = function(a) {
            if (null == this && null == a) return !0;
            if (null == this || null == a || this.AutoHidingTimeScaleHeaders != a.AutoHidingTimeScaleHeaders || this.BottomHeaderMaxWidth != a.BottomHeaderMaxWidth || this.DefaultBottomHeaderWidth != a.DefaultBottomHeaderWidth || this.MaximumTimeScaleHeadersCount != a.MaximumTimeScaleHeadersCount || this.TopHeaderMinWidth != a.TopHeaderMinWidth || this.ResizeToFit !=
                a.ResizeToFit || !this.TimeScaleHeaders().IsEqual(a.TimeScaleHeaders()) || this.SelectedHeaders().length != a.SelectedHeaders().length) return !1;
            for (var d = 0; d < this.SelectedHeaders().length; d++)
                if (-1 == e.inArray(this.SelectedHeaders()[d], a.SelectedHeaders())) return !1;
            return !0
        };
        this.ConvertWidths = function(a, d, b) {
            if (a == d) return b;
            switch (a) {
                case RadiantQ.Gantt.TimeScaleType.Minutes:
                    return d == RadiantQ.Gantt.TimeScaleType.Years ? b / 525600 : d == RadiantQ.Gantt.TimeScaleType.Months ? b / 43200 : d == RadiantQ.Gantt.TimeScaleType.Weeks ?
                        b / 10080 : d == RadiantQ.Gantt.TimeScaleType.Days ? b / 1440 : b / 60;
                case RadiantQ.Gantt.TimeScaleType.Hours:
                    return d == RadiantQ.Gantt.TimeScaleType.Years ? b / 8760 : d == RadiantQ.Gantt.TimeScaleType.Months ? b / 720 : d == RadiantQ.Gantt.TimeScaleType.Weeks ? b / 168 : b / 24;
                case RadiantQ.Gantt.TimeScaleType.Days:
                    return d == RadiantQ.Gantt.TimeScaleType.Years ? b / 365 : d == RadiantQ.Gantt.TimeScaleType.Months ? b / 30 : b / 7
            }
            return b
        };
        this.GetDefaultBottomHeaderWidth = function() {
            if (-1 == this.DefaultBottomHeaderWidth) {
                var a = RadiantQ.Gantt.TimeScaleType.Days;
                0 < this.SelectedHeaders().length && (a = this.SelectedHeaders().Last().BaseTimeScaleType);
                switch (a) {
                    default: return 25;
                    case TimeScaleType.Months:
                        return 50;
                    case TimeScaleType.Weeks:
                        return 65;
                    case TimeScaleType.Years:
                        return 100
                }
            } else return this.DefaultBottomHeaderWidth
        };
        this.GetDefaultBaseTimeUnitWidth = function() {
            var a = this.SelectedHeaders();
            if (0 == a.length) return this.GetDefaultBottomHeaderWidth();
            var d = a.Last().BaseTimeScaleType,
                d = RadiantQ.Gantt.AdjustBaseScaleType(d),
                a = a.Last().Type;
            return this.ConvertWidths(d,
                a, this.GetDefaultBottomHeaderWidth())
        };
        this.GetPreferredMaximumBaseTimeUnitWidth = function() {
            var a = this.SelectedHeaders();
            if (0 == a.length) return 40;
            var d = a.Last().BaseTimeScaleType,
                d = RadiantQ.Gantt.AdjustBaseScaleType(d),
                a = a.Last().Type;
            return this.ConvertWidths(d, a, this.BottomHeaderMaxWidth)
        };
        this.GetPreferredMinimumBaseTimeUnitWidth = function() {
            var a = this.SelectedHeaders();
            if (0 == a.length) return 20;
            var d = a.Last().BaseTimeScaleType,
                d = RadiantQ.Gantt.AdjustBaseScaleType(d),
                a = a.First().Type;
            return this.ConvertWidths(d,
                a, this.TopHeaderMinWidth)
        };
        this.UpdateHeadersOnZoom = function() {
            var a = this.SelectedHeaders();
            if (0 != a.lenght) {
                var d = this.getGanttChartProperty("TimeScaleHeaders"),
                    b = this.getGanttChartProperty("BaseTimeScaleType"),
                    c = this.getGanttChartProperty("BaseTimeUnitWidth"),
                    g = this.getGanttChartProperty("MinTimeUnitWidthForHeaderVisibility");
                if (!(null == a.Last() || a.lenght <= this.MaximumTimeScaleHeadersCount))
                    for (var f = 0, q = a.length - 1; 0 <= q; q--) f < this.MaximumTimeScaleHeadersCount ? (-1 == e.inArray(a[q], d) && d.insertInOrder(a[q]),
                        RadiantQ.Gantt.IsHeaderViewable(a[q], b, c, g) && f++) : d.remove(a[q])
            }
        };
        this.ApplyTimeScaleHeaderSettings = function() {
            for (var a = new RadiantQ.Gantt.TimeScaleHeaderDefinitions, d = this.SelectedHeaders(), b = 0; b < d.length; b++) a.insertInOrder(d[b]);
            this.BeginUpdate();
            this.setGanttChartProperty("TimeScaleHeaders", a)
        };
        this.ApplySettingsOnGantt = function() {
            if (1 > this.MaximumTimeScaleHeadersCount) throw "MaximumTimeScaleHeadersCount cannot be less than 2.";
            if (10 > this.BottomHeaderMaxWidth || 100 < this.BottomHeaderMaxWidth) throw "BottomHeaderMaxWidth cannot be less than 10 or greater than 100.";
            if (10 > this.TopHeaderMinWidth || 400 < this.TopHeaderMinWidth) throw "TopHeaderMinWidth cannot be less than 10 or greater than 400.";
            if (-1 > this.DefaultBottomHeaderWidth || 100 < this.DefaultBottomHeaderWidth) throw "DefaultBottomHeaderWidth cannot be less than -1 or greater than 100.";
            if (null == this.TimeScaleHeaders()) throw "TimeScaleHeaders in GanttChartTimeScaleHeaderSettings cannot be null when BoundGantt property is set.";
            if (0 == this.SelectedHeaders().length) throw "There are no selected TimeScaleHeaders to apply on the gantt in the call to ApplySettingsOnGantt.";
            this.ApplyTimeScaleHeaderSettings();
            var a = this.GetPreferredMinimumBaseTimeUnitWidth(),
                d = this.GetPreferredMaximumBaseTimeUnitWidth(),
                b = this.GetDefaultBaseTimeUnitWidth();
            b < a && (b = a);
            b > d && (b = d);
            this.BeginUpdate();
            this.setGanttChartProperty("BaseTimeUnitWidthMinimum", a);
            this.setGanttChartProperty("BaseTimeUnitWidthMaximum", d);
            this.setGanttChartProperty("BaseTimeUnitWidth", b);
            this.setGanttChartProperty("ResizeToFit", this.ResizeToFit);
            this.EndUpdate();
            var c = this,
                a = this.BoundGantt();
            this.AutoHidingTimeScaleHeaders &&
                (!1 == this.IsProjectGantt ? a.bind("flexyganttbeforezooming", function(a, d) {
                c.UpdateHeadersOnZoom()
            }) : a.bind("ganttcontrolbeforezooming", function(a, d) {
                c.UpdateHeadersOnZoom()
            }));
            (a = a.data("GanttBase")) && a.CanAllowBTUW.subscribe(this.CanAllowBTUW, this);
            this.UpdateHeadersOnZoom()
        };
        this.CanAllowBTUW = function(a, d) {
            var b = a.options,
                c = d.NewBTUW,
                g = this.SelectedHeaders(); - 1 == b.TimeScaleHeaders.indexOf(g.First()) && (c *= a.getCurrentTimeUnitsForBaseType(g.First()), d.Allow = c >= b.MinTimeUnitWidthForHeaderVisibility)
        };
        this.BeginUpdate = function() {
            this.CallGanttMethod("BeginUpdate")
        };
        this.EndUpdate = function() {
            this.CallGanttMethod("EndUpdate")
        }
    };
    RadiantQ.Gantt.Utils.GanttChartTimeScaleHeaderSettings.prototype.getGanttChartProperty = function(a) {
        var d = this.BoundGantt();
        return !1 == this.IsProjectGantt ? d.FlexyGantt("option", a) : d.GanttControl("option", a)
    };
    RadiantQ.Gantt.Utils.GanttChartTimeScaleHeaderSettings.prototype.CallGanttMethod = function(a) {
        var d = this.BoundGantt();
        !1 == this.IsProjectGantt ? d.FlexyGantt(a) : d.GanttControl(a)
    };
    RadiantQ.Gantt.Utils.GanttChartTimeScaleHeaderSettings.prototype.setGanttChartProperty = function(a, d) {
        var b = this.BoundGantt();
        !1 == this.IsProjectGantt ? b.FlexyGantt("option", a, d) : b.GanttControl("option", a, d)
    };
    ObservableCollection = function() {
        Array.apply(this, arguments);
        this.CollectionChanged = new ObjectEvent("CollectionChanged");
        e.observable(this).unbind("insert remove replaceAll", this.collectionChanged);
        e.observable(this).bind("insert remove replaceAll", this.collectionChanged)
    };
    window.ObservableCollection =
        ObservableCollection;
    ObservableCollection.prototype = [];
    ObservableCollection.prototype.OnCollectionChanged = function(a, d) {
        this.CollectionChanged.raise(a, d)
    };
    ObservableCollection.prototype.collectionChanged = function(a, d) {
        a.target.OnCollectionChanged(a, d)
    };
    ObservableCollection.prototype.remove = function(a, d) {
        var b = !1;
        if ("number" === e.type(a))
            if (d) {
                if ("number" === e.type(d))
                    for (var c = a; c < d; c++)
                        if (void 0 != this[c]) b = !0;
                        else {
                            b = !1;
                            break
                        }
            } else void 0 != this[a] && (b = !0);
            else "string" === e.type(a) ? (c = e.inArray(a, this), -1 != c && (b = !0, a = c)) : -1 != e.inArray(a, this) && (b = !0);
        b && d ? e.observable(this).remove(a, d) : b && e.observable(this).remove(a)
    };
    ObservableCollection.prototype.insert = function(a, d) {
        e.observable(this).insert(a, d)
    };
    ObservableCollection.prototype.contains = function(a) {
        return -1 != e.inArray(a, this)
    };
    ObservableCollection.prototype.replaceAll = function(a) {
        e.observable(this).replaceAll(a)
    };
    ObservableCollection.prototype.clear = function() {
        0 != this.length && this.remove(0, this.length)
    };
    ObservableCollection.prototype.add = function(a) {
        e.observable(this).insert(this.length,
            a)
    };
    ObservableCollection.prototype.indexOf = function(a, d) {
        var b = this.length,
            c = Number(d) || 0,
            c = 0 > c ? Math.ceil(c) : Math.floor(c);
        for (0 > c && (c += b); c < b; c++)
            if (c in this && this[c] === a) return c;
        return -1
    };
    RadiantQ.Gantt.TimeScaleHeaderDefinitions = function() {
        RadiantQ.RQ_CollectionChangeNotifier.apply(this, arguments);
        this.getById = function(a) {
            if (this.isValidateIndex(a)) return this[a]
        };
        this.getByType = function(a) {
            for (var d = 0; d < this.length; d++) {
                var b = this[d];
                if (b.Type == a) return b
            }
        };
        this.insertInOrder = function(a) {
            for (var d =
                0; d < this.length; d++)
                if (!this[d].IsGreater(a)) {
                    this.insert(d, a);
                    return
                }
            this.add(a)
        };
        this.removeType = function(a) {
            if (a == RadiantQ.Gantt.TimeScaleType) throw "RemoveType is not supported for TimeScaleType.Custom type.";
            for (var d = 0; d < this.length; d++) {
                var b = this.getById(d);
                if (b.Type == a) {
                    this.remove(b);
                    break
                }
            }
        };
        this.IsContentEqual = function(a) {
            if (null == this && null == a) return !0;
            if (null == this && null != a || null != this && null == a || this.length != a.length) return !1;
            for (var d = 0; d < this.length; d++)
                if (!this.getById(d).IsEqual(a.getById(d))) return !1;
            return !0
        };
        this.Clone = function() {
            for (var a = new RadiantQ.Gantt.TimeScaleHeaderDefinitions, d = 0; d < this.length; d++) {
                var b = this[d].Clone();
                a.add(b)
            }
            return a
        };
        this.IsEqual = function(a) {
            if (null == this && null == a) return !0;
            if (null == this || null == a || this.length != a.length) return !1;
            for (var d = 0; d < this.length; d++)
                if (!this.getById(d).IsEqual(a.getById(d))) return !1;
            return !0
        };
        this.isValidateIndex = function(a) {
            return this.length > a
        }
    };
    RadiantQ.Gantt.TimeScaleHeaderDefinitions.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
    RadiantQ.Gantt.BottomTwoHeaderDefinitions = function() {
        RadiantQ.Gantt.TimeScaleHeaderDefinitions.apply(this, arguments);
        this.UpdateIndexProperties = function() {
            for (var a = 0, b = 0; b < this.length; b++) this.SetIndex(this[b], a++)
        };
        var a = this;
        this.collectionChanged = function(d, b) {
            "insert" == d.type ? a.UpdateIndexProperties() : a.remove(b.items[0])
        };
        this.CollectionChanged.isSubscribed() ? this.CollectionChanged.unsubscribe(this.collectionChanged) : this.CollectionChanged.subscribe(this.collectionChanged);
        this.SetIndex = function(a,
            b) {
            a.IndexProperty = b
        };
        this.remove = function(a) {
            a.IndexProperty = -1
        }
    };
    RadiantQ.Gantt.BottomTwoHeaderDefinitions.GetIndex = function(a) {
        return a.IndexProperty
    };
    RadiantQ.Gantt.BottomTwoHeaderDefinitions.prototype = new RadiantQ.Gantt.TimeScaleHeaderDefinitions;
    RadiantQ.Gantt.IsHeaderViewable = function(a, d, b, c) {
        var h = a.Type,
            k = RadiantQ.Gantt.Utils.TimeComputingUtils,
            e = 1;
        if (h == ns_gantt.TimeScaleType.Custom) {
            if (null == a.CustomTimeScaleTypeHint) throw new "CustomTimeScaleTypeHint is not set in TimeScaleHeaderDefinition of TimeScaleType.Custom.";
            h = a.CustomTimeScaleTypeHint.EquivalentType;
            e = a.CustomTimeScaleTypeHint.EquivalentUnits
        }
        a = k.ConvertToApproxUnitsOfBaseType(d, h, e) * b;
        return Math.round(a) < c ? !1 : !0
    };
    RadiantQ.Gantt.AdjustBaseScaleType = function(a) {
        return a > RadiantQ.Gantt.TimeScaleType.Days ? RadiantQ.Gantt.TimeScaleType.Days : a
    };
    Array.prototype.Last = function() {
        return this[this.length - 1]
    };
    Array.prototype.First = function() {
        return this[0]
    };
    Array.prototype.remove = function(a) {
        a = this.indexOf(a); - 1 != a && this.splice(a, 1)
    };
    RadiantQ.Gantt.isModifierKeyIsPresed =
        function(a) {
            return a.ctrlKey || a.shiftKey || a.altKey || a.metaKey
    };
    RadiantQ.Gantt.addMethod = function(a, d, b) {
        var c = a[d];
        a[d] = c ? function() {
            if (b.length == arguments.length) return b.apply(this, arguments);
            if ("function" == typeof c) return c.apply(this, arguments)
        } : b
    };
    RadiantQ.Gantt.TimeUnit = function() {
        this.Type = this.Width = this.ToolTipText = this.TextFormat = this.Text = this.Tag = 0;
        this.IsWorkingTime = !0;
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this._binding = null;
        this.BindingObject = function(a) {
            if (void 0 ==
                a || null == a) return this._binding;
            null != this._binding && this._binding.Dispose();
            this._binding = a
        };
        this._isHighlighted = !1;
        this.IsHighlighted = function(a) {
            if (void 0 == a || null == a) return this._isHighlighted;
            this._isHighlighted != a && (this._isHighlighted = a, this.OnPropertyChanged("IsHighlighted", a))
        };
        this.OnPropertyChanged = function(a, d) {
            this.PropertyChanged.raise(this, {
                PropertyName: a,
                value: d
            })
        }
    };
    RadiantQ.Gantt.TimeUnit.prototype = new NotifyPropertyChanged;
    RadiantQ.Gantt.SpecialLineInfo = function() {
        this.ToolTipText =
            "";
        this.LineColor = void 0;
        this.LineDateTime = new Date;
        this.ClassName = ""
    };
    RadiantQ.Gantt.CancellableActivityEventArgs = function(a) {
        this._cancel = !0;
        this._activity = a
    };
    RadiantQ.Gantt.CancellableActivityEventArgs.prototype.Activity_M = function() {
        return this._activity
    };
    RadiantQ.Gantt.CancellableActivityEventArgs.prototype.Cancel_M = function(a) {
        if (0 == arguments.length) return this._cancel;
        this._cancel = a
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.CancellableActivityEventArgs.prototype,
        "Activity", {
            get: function() {
                return this._activity
            }
        }), Object.defineProperty(RadiantQ.Gantt.CancellableActivityEventArgs.prototype, "Cancel", {
        get: function() {
            return this._cancel
        },
        set: function(a) {
            this._cancel = a
        }
    }));
    RadiantQ.Gantt.TimeRangeHighlightBehavior = {
        None: 0,
        HighlightInChartOnHeaderMouseHover: 1
    };
    RadiantQ.Gantt.ActivityTimeChangeType = {
        StartTimeChanged: "StartTimeChanged",
        DurationResized: "DurationResized"
    };
    RadiantQ.Gantt.ActivityTimeChangedEventArgs = function(a, d, b) {
        this.Activity = a;
        this.Type = d;
        this.UserSpecifiedTime =
            b
    };
    RadiantQ.Gantt.SelectionMode = {
        Multiple: "Multiple",
        Single: "Single"
    };
    RadiantQ.Gantt.TimeIndicatorLines = {
        None: 0,
        Always: 1,
        OnHover: 2,
        OnResize: 3
    };
    RadiantQ.Gantt.SelectionChanged = function(a, d) {
        this.AddedItems = a;
        this.RemovedItems = d
    };
    RadiantQ.Gantt.DefaultStyles = {};
    var c = RadiantQ.Gantt.DefaultStyles;
    c.direction = ["top", "bottom", "right", "left"];
    c.CreateCssTxt = function(a, d, b) {
        var f = e.isArray(d);
        2 == d.length && (d.splice.apply(d, [1, 0].concat(d[0])), d.push(d[d.length - 1]));
        return e.map(c.direction, function(c, k) {
            var e =
                void 0 == b ? a + "-" + c + ":" : a + "-" + c + "-" + b + ":";
            return f ? e + d[k] + ";" : e + d + ";"
        }).toString().replace(/,/g, "")
    };
    c.ZeroMargin = function() {
        return c.CreateCss("margin", "0px").toString()
    };
    c.init = function() {
        var a = RadiantQ.Gantt.DefaultStyles;
        c.GanttTableTRStyleTxt = a.CreateCssTxt("padding", "0px") + a.CreateCssTxt("margin", "0px") + a.CreateCssTxt("border", "0px", "width");
        c.GanttTableTDStyleTxt = a.CreateCssTxt("padding", ["0.2em", "0.4em"]) + a.CreateCssTxt("margin", "0px") + a.CreateCssTxt("border", ["0px", "1px", "1px", "0px"], "width");
        c.ZeroStyle = a.CreateCssTxt("padding", "0px") + a.CreateCssTxt("margin", "0px") + a.CreateCssTxt("border", "0px", "width") + "border-collapse: collapse;border-spacing: 0;width:100%;height:100%;"
    };
    document.mouseButtonPressed = !1
})(jQuery);
RadiantQ.ContextMenuImpl = {};
(function(e) {
    function b(a, d) {
        tapHoldTimer = tapDownY = tapDownX = null;
        canShowContextMenu = !1;
        timeOutFunctions = null;
        var b = function(a) {
            a = a.originalEvent.touches ? a.originalEvent.touches[0] : a;
            var d = this;
            d.tapDownX = a.clientX;
            d.tapDownY = a.clientY;
            d.tapHoldTimer = setTimeout(function() {
                d.canShowContextMenu = !0
            }, 500)
        }, c = function() {
                clearTimeout(tapHoldTimer)
            }, h = function(a) {
                if (!0 == this.canShowContextMenu) {
                    var d = a.originalEvent.changedTouches ? a.originalEvent.changedTouches[0] : a;
                    this.tapDownX == d.clientX && this.tapDownY ==
                        d.clientY && (clearTimeout(this.timeOutFunctions), this.timeOutFunctions = setTimeout(function() {
                            var b = a.originalEvent;
                            if ("mouse" != b.pointerType && 4 != b.pointerType) {
                                var c = e.ui ? e.ui.version || "1.5.2" : null;
                                c && 1.11 <= parseFloat(c) && e.isFunction(e.jQContextMenu) ? e(b.target).jQContextMenu({
                                    x: d.clientX,
                                    y: d.clientY
                                }) : e.isFunction(e.contextMenu) && e(b.target).contextMenu({
                                    x: d.clientX,
                                    y: d.clientY
                                })
                            }
                        }, 100));
                    this.canShowContextMenu = !1
                }
                clearTimeout(this.tapHoldTimer)
            }, k = e(a, d);
        k.on("touchstart", b.bind(this));
        k.on("touchend",
            h.bind(this));
        k.on("touchmove", c.bind(this));
        k.on("MSPointerDown", b.bind(this));
        k.on("MSPointerUp", h.bind(this));
        k.on("MSPointerMove", c.bind(this))
    }
    var c = e.ui ? e.ui.version || "1.5.2" : null;
    c && 1.11 <= parseFloat(c) && e.isFunction(e.jQContextMenu) ? RadiantQ.ContextMenuImpl.ContextMenu = function(a, d) {
        var c = this;
        this.ItemClicked = new ObjectEvent("ItemClicked");
        this.BeforeContextMenu = new ObjectEvent("BeforeContextMenu");
        this.selector = a;
        var f = this;
        this._position = {
            x: 0,
            y: 0
        };
        this.Items = new RadiantQ.Dictionary;
        this.ItemCallbacks =
            new RadiantQ.Dictionary;
        var h = e('<ul id="context-menu"></ul>');
        e(document.body).append(h);
        e(d).jQContextMenu({
            target: "#context-menu",
            beforeContextMenu: function(a, d) {
                e("#context-menu").empty();
                c.BeforeContextMenu.raise(a, d);
                if (0 != f.Items.length) {
                    for (var b = f.Items.asArray, h = 0; h < b.length; h++) {
                        var p = b[h],
                            q = e("<li keyName='" + p.keyName + "' >" + p.name + "</li>");
                        !0 == p.disabled && q.addClass("ui-state-disabled");
                        e.isFunction(p.callback) && c.ItemCallbacks.Add(p.keyName, p.callback);
                        e("#context-menu").append(q)
                    }
                    d.refresh();
                    return !0
                }
            },
            selector: a,
            itemClick: function(a, d) {
                var b = e(d.items[0]).attr("keyName"),
                    f = c.ItemCallbacks.GetItemByKey(b);
                f && f(b, {
                    $trigger: a,
                    args: d
                });
                c.ItemClicked.raise(b, a)
            }
        });
        this.AddNewItems = function(a, d) {
            if (!1 == d) {
                this.Items = new RadiantQ.Dictionary;
                var b = 0
            } else b = 0;
            for (; b < a.length; b++) this.Items.Add(a[b].keyName, a[b])
        };
        b(a, d);
        return this
    } : e.isFunction(e.contextMenu) && (RadiantQ.ContextMenuImpl.ContextMenu = function(a, d) {
        this.ItemClicked = new ObjectEvent("ItemClicked");
        this.BeforeContextMenu = new ObjectEvent("BeforeContextMenu");
        this.selector = a;
        var c = this;
        this._position = {
            x: 0,
            y: 0
        };
        this.Items = new RadiantQ.Dictionary;
        e.contextMenu && e.contextMenu({
            selector: a,
            position: function(a, d, b) {
                var n = e(document.body).width(),
                    l = e(document.body).height(),
                    m = d + a.$menu.width(),
                    p = b + a.$menu.height();
                m > n && (d = n - a.$menu.width() - 10);
                p > l && (b = l - a.$menu.height() - 10);
                c._position = {
                    x: d,
                    y: b
                };
                "function" == typeof c.position && c.position(c._position);
                a.$menu.css({
                    top: c._position.y,
                    left: c._position.x
                })
            },
            build: function(a, d) {
                c.BeforeContextMenu.raise(a, d);
                if (c.Items &&
                    0 < c.Items.length) {
                    d.Cancel = !1;
                    if (!0 == d.Cancel) return !1;
                    for (var b = c.Items.asArray, n = 0; n < b.length; n++) {
                        var l = b[n].keyName || b[n].name;
                        !0 == b[n].separator ? d.data.items["separator" + n] = "separator" + n : d.data.items[l] = {
                            name: b[n].name,
                            icon: b[n].icon,
                            callback: b[n].callback,
                            disabled: b[n].disabled,
                            items: b[n].items
                        }
                    }
                }
                return void 0 == d.data.items || e.isEmptyObject(d.data.items) ? !1 : {
                    GetPosition: function() {
                        return c._position
                    },
                    callback: function(a, d) {
                        c.ItemClicked.raise(a, d.$trigger)
                    }
                }
            }
        });
        this.AddNewItems = function(a, d) {
            if (!1 ==
                d) {
                this.Items = new RadiantQ.Dictionary;
                var b = 0
            } else b = 0;
            for (; b < a.length; b++) this.Items.Add(a[b].keyName, a[b])
        };
        b(a, d);
        this.Dispose = function() {
            e.contextMenu("destroy", this.selector);
            this.Items = this.BeforeContextMenu = this.ItemClicked = null
        };
        return this
    })
})(jQuery);
var EXPANDER_WIDTH = 12;
RadiantQ.Gantt.LevelToIndentWidth = function(e, b) {
    var c = 0;
    0 < e && (c += e * EXPANDER_WIDTH);
    !1 == b && (c += EXPANDER_WIDTH);
    return c
};

function Expander() {
    this._isExpanded = !1
}
Expander.prototype = new NotifyPropertyChanged;
Expander.prototype.IsExpanded = function(e) {
    if (null == e) return this._isExpanded;
    this._isExpanded != e && (this._isExpanded = e, this.OnPropertyChanged("IsExpanded"))
};
(function(e) {
    RadiantQ.FlexyGantt = {};
    var b = RadiantQ.FlexyGantt;
    b.FlexyNodeData = function(b) {
        NotifyPropertyChanged.apply(this, arguments);
        this._data = b.data;
        this.HierarchicalItem = b;
        var a = 1;
        this._displayIndex = -1;
        this._guid = RadiantQ.Gantt.guidGenerator();
        var d, g;
        this.MaxOverlappingBlocksRowCount = function(d) {
            if (void 0 == d || null == d) return a;
            a != d && (a = d, this.OnPropertyChanged("MaxOverlappingBlocksRowCount", d, null, !1))
        };
        this.TableRow = function(a) {
            if (void 0 == a || null == a) return d;
            if (!this.IsSelected) return 0;
            if (void 0 !=
                d) {
                this.IsSelected() && this.addSelectionClassToTable(a);
                this.IsMouseIn() && this.addHoverClassToTable(a);
                var b = e(d).height();
                this.RowHeight && (b = this.RowHeight);
                e(a).height(b)
            }
            d = a;
            this.OnPropertyChanged("TableRow", a, null, !1)
        };
        this.ChartRow = function(a) {
            if (void 0 == a || null == a) return g;
            if (void 0 != g) {
                var d = e(g).height();
                e(a).height(d)
            }
            g = a;
            this.OnPropertyChanged("ChartRow", a, null, !1)
        };
        this._isSelected = !1;
        this.IsSelected = function(a) {
            if (void 0 == a || null == a) return this._isSelected;
            this._isSelected != a && (this._isSelected =
                a, this.OnPropertyChanged("IsSelected", a, null, !1), this.UpdateSelection(a))
        };
        this._isMouseIn = !1;
        this.IsMouseIn = function(a) {
            if (void 0 == a || null == a) return this._isMouseIn;
            this._isMouseIn != a && (this._isMouseIn = a, this.UpdateHoverStyle(a))
        };
        this.DataPropertyChangeListener = function(a) {
            this.OnPropertyChanged("Data")
        };
        this._data.PropertyChanged && this._data.PropertyChanged.subscribe();
        this.Dispose = function() {
            this.DisplayIndex(-1);
            this._data.PropertyChanged && this._data.PropertyChanged.unsubscribe(this.DataPropertyChangeListener)
        };
        return this
    };
    b.FlexyNodeData.prototype = new NotifyPropertyChanged;
    b.FlexyNodeData.prototype.UpdateHoverStyle = function(b) {
        if (!0 == b && void 0 != b) e(this.TableRow()).addClass("rq-row-hover ui-state-hover"), e(this.ChartRow()).find("td").addClass("rq-row-hover ui-state-hover");
        else if (!1 == b || void 0 == b) e(this.TableRow()).removeClass("rq-row-hover ui-state-hover"), e(this.ChartRow()).find("td").removeClass("rq-row-hover ui-state-hover")
    };
    b.FlexyNodeData.prototype.addSelectionClassToTable = function(b) {
        b.addClass("rq-row-selected ui-state-active")
    };
    b.FlexyNodeData.prototype.addHoverClassToTable = function(b) {
        b.addClass("rq-row-hover ui-state-hover")
    };
    b.FlexyNodeData.prototype.UpdateSelection = function(b) {
        if (!0 == b && void 0 != b) e(this.TableRow()).addClass("rq-row-selected ui-state-active"), e(this.ChartRow()).find("td").addClass("rq-row-selected ui-state-active");
        else if (!1 == b || void 0 == b) e(this.TableRow()).removeClass("rq-row-selected ui-state-active"), e(this.ChartRow()).find("td").removeClass("rq-row-selected ui-state-active")
    };
    b.FlexyNodeData.prototype.IsParentType =
        function() {
            var b = this.HierarchicalItem.GetChildList();
            return null != b && void 0 != b && (0 < b.length || !0 == this.HierarchicalItem._parent._fxGantt.ForceParentTemplateEvenIfChildless) ? !0 : !1
    };
    b.FlexyNodeData.prototype.IsExpandable = function() {
        return null != this.HierarchicalItem._childItems && 0 < this.HierarchicalItem._childItems.length
    };
    b.FlexyNodeData.prototype.Data = function() {
        return this._data
    };
    b.FlexyNodeData.prototype.DisplayIndex = function(b) {
        if (null == b) return this._displayIndex;
        this._displayIndex != b && (this._displayIndex =
            b, this.OnPropertyChanged("DisplayIndex", b, null, !1))
    };
    b.FlexyNodeData.prototype.Level = function() {
        return this.HierarchicalItem._level
    }
})(jQuery);
(function(e) {
    Array.prototype.indexOf || (Array.prototype.indexOf = function(b, a) {
        var d = this.length,
            g = Number(a) || 0,
            g = 0 > g ? Math.ceil(g) : Math.floor(g);
        for (0 > g && (g += d); g < d; g++)
            if (g in this && this[g] === b) return g;
        return -1
    });
    var b = RadiantQ.FlexyGantt;
    b.HierarchicalItem = function(b, a, d, g) {
        NotifyPropertyChanged.apply(this, arguments);
        this.isExpanded = !1;
        this.data = d;
        this._level = g;
        this._childListResolved = !1;
        this._resolvedChildList = null;
        this._parent = b;
        this._parentItem = a;
        this._childItems = new ObservableCollection;
        this._forceToCreateNewChildList = !1;
        this._chartRow = this._tableRow = null;
        this._forceToBindtheEvents = !0;
        var f = this;
        this.notifyChange = function(a, d, b) {
            f.OnPropertyChanged("Data." + a, b, d)
        };
        this.subscribChangeListener = function(a) {
            for (var d in a) {
                var b = a[d];
                if (!b) break;
                if (b.subscribe && void 0 != b.getSubscriptionsCount && 0 == b.getSubscriptionsCount())
                    if (e.isArray(b()) && !this.isExpandable())
                        for (var c = 0; c < b().length; c++) this.subscribChangeListener(b()[c]);
                    else b.subscribe(this.notifyChange.bind(b, d, a))
            }
        };
        this.subscribChangeListener(this.data);
        this.listenChanges &&
            this.listenChanges(this.data);
        var h = !1;
        this.CanShowCue = function(a) {
            if (void 0 == a || null == a) return !1 == h && !1 == this._parent._fxGantt.AutoExpandNodes ? this.corrFlexyNodeData.IsParentType() : h;
            h != a && (h = a, this.OnPropertyChanged("CanShowCue", a))
        };
        this.isSelected = !1;
        this.IsSelected = function(a) {
            if (!0 == a && void 0 != a) e(this.TableRow).addClass("rq-row-selected ui-state-active"), e(this.ChartRow).addClass("rq-row-selected ui-state-active"), this.isSelected = !0;
            else if (!1 == a && void 0 != a) e(this.TableRow).removeClass("rq-row-selected ui-state-active"),
            e(this.ChartRow).removeClass("rq-row-selected ui-state-active"), this.isSelected = !1;
            else if (void 0 == a) return this.isSelected
        };
        this.isExpanding = !1;
        return this
    };
    b.HierarchicalItem.prototype = new NotifyPropertyChanged;
    b.HierarchicalItem.prototype.ResourceSchedule_M = function() {
        if (null != this._resourceSchedule) return this._resourceSchedule;
        var b = this._parent._fxGantt.RowRenderingScheduleBinding;
        if (b) {
            var a = this._getNestedValue(this.data, b.Property);
            this._resourceSchedule = b.Converter ? b.Converter.Convert.call(this.data,
                a, b.Property) : "" == e.trim(a) ? null : a;
            void 0 === this._resourceSchedule && (this._resourceSchedule = this._parent._fxGantt.WorkTimeSchedule)
        } else this._resourceSchedule = this._parent._fxGantt.WorkTimeSchedule;
        return this._resourceSchedule
    };
    b.HierarchicalItem.prototype._getNestedValue = function(b, a) {
        for (var d = a.split("."), g = 0; g < d.length; g++) "undefined" != typeof b && (b = b[d[g] + "_M"] ? b[d[g] + "_M"]() : b[d[g]]);
        return !0 == e.isFunction(b) ? b() : b || ""
    };
    b.HierarchicalItem.prototype.FlatItemsSource = function() {
        return this._parent.FlatItemsSource
    };
    b.HierarchicalItem.prototype.FlatHierarchicalItemsList = function() {
        return this._parent.FlatHierarchicalItemsList
    };
    b.HierarchicalItem.prototype.isExpandable = function() {
        var b = this.GetChildList();
        return !0 == this._forceToBindtheEvents && void 0 != b && null != b ? !0 : void 0 == b || null == b || 0 == b.length ? !1 : !0
    };
    b.HierarchicalItem.prototype.GetChildList = function() {
        !1 == this._childListResolved ? (this._childListResolved = !0, this._resolvedChildList = null, null != this._parent._fnChildListResolver && (this._resolvedChildList = this._parent._fnChildListResolver(this.data,
            this))) : null != this._parent.dynamicResolver && !0 == this._forceToCreateNewChildList && (this._forceToCreateNewChildList = !1, this._resolvedChildList = this._parent.dynamicResolver(this.data));
        return this._resolvedChildList
    };
    b.HierarchicalItem.prototype.IsExpanded = function(b) {
        if (null == b) return this.isExpanded;
        if (this._parent._expansionStateHandler) {
            var a = this._parent._expansionStateHandler(this.data);
            if (!1 == a) {
                var d = this.GetChildList();
                this.CanShowCue(d && 0 < d.length)
            }
            if (void 0 == a || null == a) a = b;
            b = a
        }
        this.isExpanded !=
            b && (!0 == b ? this.PrepareChildrenHierarchicalList() : (this._parent.ClearHierarchyFromList(this, !1), this.isExpanded = !1, this.OnPropertyChanged("IsExpanded", !1)), 0 != this._parent.NodeExpansionStateChanged.fn.length && this._parent.NodeExpansionStateChanged.raise(this));
        this._parent.IsCollapsed.raise(this)
    };
    b.HierarchicalItem.prototype.PrepareChildrenHierarchicalList = function() {
        this.isExpandable() && (this.isExpanding = this.isExpanded = !0, 0 == this._childItems.length ? this.CreateChildList() : this.PrepareChildren(),
            this.isExpanding = !1, this.OnPropertyChanged("IsExpanded", !0))
    };
    b.HierarchicalItem.prototype.CreateChildList = function() {
        var b = this.GetChildList(),
            a = this;
        if (null == this.onChildCollectionChanged || void 0 == this.onChildCollectionChanged) this.onChildCollectionChanged = function(b, d) {
            if ("insert" == b.type) a.AddItemToChildList(d.index, d.items[0]);
            else if ("remove" == b.type) {
                var c = a._parent.GetFlatHierarchicalItemByData(d.items[0]);
                a._childItems.remove(c);
                a._parent.ClearHierarchyFromList(c, !0)
            }
            a.CanShowCue(0 < a._childItems.length)
        };
        e.observable(b).bind("insert remove replaceAll", this.onChildCollectionChanged);
        for (var d = 0; d < b.length; d++) null != b[d] && this.AddItemToChildList(d, b[d]);
        a._parent.hasDynamicResolver ? a.CanShowCue(0 <= a._childItems.length ? !0 : !1) : a.CanShowCue(0 < a._childItems.length)
    };
    b.HierarchicalItem.prototype.AddItemToChildList = function(c, a) {
        a = new b.HierarchicalItem(this._parent, this, a, this._level + 1);
        this._childItems.insert(c, a);
        this.isExpanded && this.PrepareNewFlexyTreeViewItem(a)
    };
    b.HierarchicalItem.prototype.PrepareChildren =
        function() {
            if (this.isExpanded) {
                this.isExpanding = !0;
                for (var b = 0; b < this._childItems.length; b++) this.PrepareNewFlexyTreeViewItem(this._childItems[b]);
                this.isExpanding = !1
            }
    };
    b.HierarchicalItem.prototype.PrepareNewFlexyTreeViewItem = function(c) {
        if (0 == this._childItems.indexOf(c)) {
            var a = this.FlatHierarchicalItemsList().indexOf(this);
            this.FlatHierarchicalItemsList().insert(a + 1, c);
            var d = new b.FlexyNodeData(c);
            this.FlatItemsSource().insert(a + 1, d)
        } else {
            d = c;
            a = -1;
            do
                if (a = -1, null != d._parentItem) {
                    var g = d._parentItem,
                        d = d._parentItem.GetNextItem(d);
                    null != d ? (a = this.FlatHierarchicalItemsList().indexOf(d), -1 == a && (d = d._parentItem)) : d = g
                } else d = this._parent.GetNextItem(d), null != d && (a = this.FlatHierarchicalItemsList().indexOf(d), -1 == a && (d = null)); while (null != d && -1 == a);
            null != d ? (this.FlatHierarchicalItemsList().insert(a, c), d = new b.FlexyNodeData(c), this.FlatItemsSource().insert(a, d)) : (this.FlatHierarchicalItemsList().add(c), d = new b.FlexyNodeData(c), this.FlatItemsSource().add(d))
        }
        c.corrFlexyNodeData = d;
        c.isExpandable() && this._parent._fxGantt.AutoExpandNodes &&
            c.IsExpanded(!0)
    };
    b.HierarchicalItem.prototype.GetNextItem = function(b) {
        b = this._childItems.indexOf(b);
        return !this.isExpanding && b + 1 < this._childItems.length ? this._childItems[b + 1] : null != this._parentItem ? this._parentItem.GetNextItem(this) : this._parent.GetNextItem(this)
    };
    b.HierarchicalItem.prototype.ExpandAll = function() {
        var c = 0;
        if (this.isExpandable()) {
            this.isExpanding = this.isExpanded = !0;
            if (0 == this._childItems.length)
                for (var a = this.GetChildList(), d = 0; d < a.length; d++) {
                    var g = new b.HierarchicalItem(this._parent,
                        this, a[d], this._level + 1);
                    this._childItems.add(g);
                    this.isExpanded && (this.PrepareNewFlexyTreeViewItem(g), g = g.ExpandAll(), c += g)
                } else this.PrepareChildren();
            this.isExpanding = !1;
            this.OnPropertyChanged("IsExpanded")
        }
        return ++c
    };
    b.HierarchicalItem.prototype.CollapseAll = function() {
        if (this.isExpandable()) {
            for (var b = 0; b < this._childItems.length; b++) this._childItems[b].CollapseAll();
            this.IsExpanded(!1)
        }
    };
    b.HierarchicalItem.prototype.GetFlexyNodeData = function() {
        return this.corrFlexyNodeData
    };
    b.HierarchyToList =
        function(c, a, d, g) {
            if (null == c) return null;
            this._fnChildListResolver = a;
            this._expansionStateHandler = d.ExpansionStateHandler;
            this.hasDynamicResolver = null != d.dynamicResolverFunction ? e.isFunction(d.dynamicResolverFunction) : !1;
            this._fxGantt = d;
            this.data = c;
            this.IsCollapsed = new ObjectEvent("IsCollapsed");
            this.NodeExpansionStateChanged = new ObjectEvent("NodeExpansionStateChanged");
            this.FlatHierarchicalItemsList = new RadiantQ.RQ_CollectionChangeNotifier;
            this.FlatItemsSource = new RadiantQ.RQ_CollectionChangeNotifier;
            this._topLevelItems = new RadiantQ.RQ_CollectionChangeNotifier;
            this.FlatItemsSource.CollectionChanged.subscribe(this.FlatItemsSourceCollectionChange, this);
            this.FlatHierarchicalItemsList.CollectionChanged.subscribe(this.FlatHierarchicalItemsListCollectionChange);
            this.init(c);
            var f = this;
            e.observable(c).bind("insert remove replaceAll", function(a, d) {
                if ("insert" == a.type) {
                    var c = new b.HierarchicalItem(f, null, d.items[0], 0);
                    f._topLevelItems.insert(d.index, c);
                    f.createList(c, d.index)
                }
                if ("remove" == a.type) {
                    var c =
                        f.GetFlatHierarchicalItemByData(d.items[0]),
                        g = c.GetChildList();
                    e.observable(g).unbind("insert remove replaceAll", c.onChildCollectionChanged);
                    f._topLevelItems.remove(c);
                    f.ClearHierarchyFromList(c, !0)
                }
            })
    };
    b.HierarchyToList.prototype.UpdateDisplayIndex = function() {
        for (var b = -1, a = 0; a < this.FlatItemsSource.length; a++) b++, this.FlatItemsSource[a].DisplayIndex(b)
    };
    b.HierarchyToList.prototype.GetItemFromDataSource = function(b) {
        if ((b = this.GetFlatHierarchicalItemByData(b)) && b.corrFlexyNodeData) return b.corrFlexyNodeData
    };
    b.HierarchyToList.prototype.GetFlatHierarchicalItemByData = function(b) {
        for (var a = this.FlatHierarchicalItemsList, d = 0; d < a.length; d++) {
            var g = a[d];
            if (g.data === b) return g
        }
    };
    b.HierarchyToList.prototype.isArray = function(b) {
        return b instanceof Array
    };
    b.HierarchyToList.prototype.init = function(c) {
        0 < this.FlatItemsSource.length && 0 < this.FlatHierarchicalItemsList.length && (this.FlatItemsSource.remove(0, this.FlatItemsSource.length), this.FlatHierarchicalItemsList.remove(0, this.FlatHierarchicalItemsList.length));
        if (this.isArray(c))
            for (var a =
                0; a < c.length; a++) {
                var d = new b.HierarchicalItem(this, null, c[a], 0);
                this._topLevelItems.add(d);
                this.createList(d, a);
                d._forceToBindtheEvents = !1
            } else c = new b.HierarchicalItem(this, null, c, 0), this._topLevelItems.add(c), this.FlatHierarchicalItemsList.add(c), c = new b.FlexyNodeData(c), this.FlatItemsSource.add(c)
    };
    b.HierarchyToList.prototype.createList = function(c, a) {
        void 0 == this._fxGantt.AutoExpandNodes && (this._fxGantt.AutoExpandNodes = !0);
        var d = null;
        if (0 == a) this.FlatHierarchicalItemsList.insert(0, c), d = new b.FlexyNodeData(c),
        this.FlatItemsSource.insert(0, d);
        else if (d = this.GetNextItem(c), null != d) {
            var g = this.FlatHierarchicalItemsList.indexOf(d),
                d = new b.FlexyNodeData(c);
            this.FlatHierarchicalItemsList.insert(g, c);
            this.FlatItemsSource.insert(g, d)
        } else this.FlatHierarchicalItemsList.add(c), d = new b.FlexyNodeData(c), this.FlatItemsSource.add(d);
        null != d && this._fxGantt.AutoExpandNodes && d.HierarchicalItem.IsExpanded(!0)
    };
    b.HierarchyToList.prototype.FlatHierarchicalItemsListCollectionChange = function(b, a) {
        for (var d = 0; d < a.items.length; d++);
    };
    b.HierarchyToList.prototype.FlatItemsSourceCollectionChange = function(b, a) {
        if ("insert" == b.type)
            for (var d = 0; d < a.items.length; d++) a.items[d].HierarchicalItem.corrFlexyNodeData = a.items[d];
        else
            for (d = 0; d < a.items.length; d++) {
                var g = a.items[d].HierarchicalItem._parentItem;
                g && 0 == g._childItems.length && (g._childListResolved = !1)
            }
        this.UpdateDisplayIndex()
    };
    b.HierarchyToList.prototype.ClearHierarchyFromList = function(b, a) {
        if (a) {
            var d = this.FlatHierarchicalItemsList,
                g = d.indexOf(b),
                g = d[g];
            d.remove(g);
            d = this.FlatItemsSource;
            g = d.indexOf(b.corrFlexyNodeData);
            g = d[g];
            d.remove(g)
        }
        if (b.isExpanded)
            for (b.isExpanded = !1, d = 0; d < b._childItems.length; d++) this.ClearHierarchyFromList(b._childItems[d], !0)
    };
    b.HierarchyToList.prototype.GetNextItem = function(b) {
        b = this._topLevelItems.indexOf(b);
        return this._topLevelItems.length > b + 1 ? this._topLevelItems[b + 1] : null
    };
    b.HierarchyToList.prototype.ExpandAll = function() {
        for (var b = 0; b < this.FlatHierarchicalItemsList.length;) {
            var a = this.FlatHierarchicalItemsList[b];
            a.isExpandable() && (a = a.ExpandAll(),
                b += a - 1);
            b++
        }
    };
    b.HierarchyToList.prototype.CollapseAll = function() {};
    b.HierarchicalItem.prototype.TableRow = function(b) {
        if (void 0 == b || null == b) return this._tableRow;
        void 0 != this._tableRow && (this.IsSelected() && newValue.addClass("rq-row-selected ui-state-active"), b = e(this._tableRow).height(), e(newValue).height(b));
        this._tableRow = newValue
    };
    b.HierarchicalItem.prototype.ChartRow = function(b) {
        if (void 0 == b || null == b) return this._chartRow;
        void 0 != this._chartRow && (this.IsSelected() && newValue.addClass("rq-row-selected ui-state-active"),
            b = e(this._chartRow).height(), e(newValue).height(b));
        this._chartRow = newValue
    }
})(jQuery);
(function(e) {
    RadiantQ.FlexyGantt.ConvertToValidTimes = function(a, b, c, f, h) {
        f.Value = b.clone();
        h.Value = b.clone().addMilliseconds(c.totalMilliseconds_M())
    };
    RadiantQ.FlexyGantt.TaskItemControl = {};
    RadiantQ.FlexyGantt.TaskItemControl.TaskBar_BorderTopWidth = 1;
    RadiantQ.FlexyGantt.TaskItemControl.TaskBar_BorderBottomWidth = 1;
    RadiantQ.FlexyGantt.TaskItemControl.ParentBar_BorderTopWidth = 0;
    RadiantQ.FlexyGantt.TaskItemControl.ParentBar_BorderBottomWidth = 0;
    "Microsoft Internet Explorer" == navigator.appName && (e = parseInt(navigator.userAgent.split(";")[1].split(" ")[2]),
        window.msie = {
            version: e
        }, 9 > e && window.console && console.error && console.log("It appears that the gantt is loaded in a IE browser version earlier than IE9. Some features are not supported in earlier than IE9. Or you might be running IE 9+ in Compatibility View mode, which is also not supported by the gantt."));
    !1 == RadiantQ.CanUseDefineProperty && (RadiantQ.FlexyGantt.TaskItemControl.MarginForBars = 2);
    var b = 2;
    RadiantQ.FlexyGantt.TaskItemControl.MarginForBars_M = function() {
        if (0 == arguments.length) return b;
        0 >
            value || 5 < value || (b = value)
    };
    if (RadiantQ.CanUseDefineProperty) try {
        Object.defineProperty(RadiantQ.FlexyGantt.TaskItemControl, "MarginForBars", {
            get: function() {
                return b
            },
            set: function(a) {
                0 > a || 5 < a || (b = a)
            }
        })
    } catch (c) {
        window.console && console.error("Gantt will load only in browsers: IE: 9+, FF: 11+, Chrome: 11+, Safari: 4.0.4(531.21.10)+. \n Or you might be running IE 9+ in Compatibility View mode, which is also not supported by the gantt.")
    }
})(jQuery);
RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization = {
    None: "None",
    ShrinkHeight: "ShrinkHeight"
};
(function(e) {
    RadiantQ.FlexyGantt.ItemsSourceListening = function(b, c, a, d) {
        ObservableCollection.apply(this, arguments);
        this._fg = b;
        this._sourceItems = c;
        this._startTimeBinding = a;
        this._endTimeBinding = d;
        c && this._sourceItems.CollectionChanged && this._sourceItems.CollectionChanged.subscribe(this.TimeRangeBasedItemsFilter_CollectionChanged, this)
    };
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype = new ObservableCollection;
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.FlexyGantt_M = function() {
        return this._fg
    };
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.SourceItems_M = function() {
        return this._sourceItems
    };
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.StartTimeBinding_M = function() {
        return this._startTimeBinding
    };
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.EndTimeBinding_M = function() {
        return this._endTimeBinding
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.FlexyGantt.ItemsSourceListening.prototype, "FlexyGantt", {
        get: function() {
            return this._fg
        }
    }), Object.defineProperty(RadiantQ.FlexyGantt.ItemsSourceListening.prototype,
        "SourceItems", {
            get: function() {
                return this._sourceItems
            }
        }), Object.defineProperty(RadiantQ.FlexyGantt.ItemsSourceListening.prototype, "StartTimeBinding", {
        get: function() {
            return this._startTimeBinding
        }
    }), Object.defineProperty(RadiantQ.FlexyGantt.ItemsSourceListening.prototype, "EndTimeBinding", {
        get: function() {
            return this._endTimeBinding
        }
    }));
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.TimeRangeBasedItemsFilter_CollectionChanged = function(b, c) {
        this.OnSourceItemsCollectionChanged(c)
    };
    RadiantQ.FlexyGantt.ItemsSourceListening.prototype.OnSourceItemsCollectionChanged =
        function(b) {};
    RadiantQ.FlexyGantt.TimeRangeFilteredItems = function(b, c, a, d) {
        RadiantQ.FlexyGantt.ItemsSourceListening.call(this, b, c, a, d);
        this._fg = b;
        this._sourceItems = c;
        this._startTime = a;
        this._endTime = d;
        var g = this;
        e(".rq-ganttChart", this._fg.element).data("GanttChart").RefreshUIEvent.subscribe(function() {
            this.Filter()
        }, this);
        this.Filter = function() {
            this.splice(0, this.length);
            var a = this._fg.RaiseFilterTasksByTimeRange(this._sourceItems);
            if (null != a && void 0 != a) this.splice.apply(this, [0, a.length].concat(a));
            else
                for (a = 0; a < this._sourceItems.length; a++) this.IsInTimeRange(this._sourceItems[a]) && this.insert(this.length, this._sourceItems[a]);
            this.OnCollectionChanged({
                type: "Reset"
            }, null)
        };
        this._fg.GanttChartIsLoaded && this.Filter();
        this.GanttChart_Loaded = function(a, b) {
            g._fg.GanttChartLoaded.unsubscribe(this.GanttChart_Loaded);
            g.Filter()
        };
        this.IsInTimeRange = function(a) {
            var b = a.StartTime;
            a = a.EndTime;
            var d = RQTimeSpan.parse(this._fg.options.TimeRangeFilteredTasksTimeBuffer),
                c = new RQTimeSpan(-d.totalMilliseconds_M());
            return b == DateTime.MinValue || a == DateTime.MinValue || b < e(this._fg.GetGanttChart()).data().radiantqGanttChart.options.ComputedStartTime.addTimeSpan(c) && a < e(this._fg.GetGanttChart()).data().radiantqGanttChart.options.ComputedStartTime.addTimeSpan(c) || b > e(this._fg.GetGanttChart()).data().radiantqGanttChart.options.ComputedEndTime.addTimeSpan(d) && a > e(this._fg.GetGanttChart()).data().radiantqGanttChart.options.ComputedEndTime.addTimeSpan(d) ? !1 : !0
        };
        this.OnSourceItemsCollectionChanged = function(a, b) {
            switch (b.Action) {
                case RadiantQ.NotifyCollectionChangedAction.Add:
                    for (var d in b.NewItems) this.IsInTimeRange(d) &&
                        this.add(d);
                    break;
                case RadiantQ.NotifyCollectionChangedAction.Remove:
                    for (d in b.OldItems) this.add(d);
                    break;
                case RadiantQ.NotifyCollectionChangedAction.Reset:
                case RadiantQ.NotifyCollectionChangedAction.Replace:
                    this.Filter()
            }
        }
    };
    RadiantQ.FlexyGantt.TimeRangeFilteredItems.prototype = new RadiantQ.FlexyGantt.ItemsSourceListening;
    RadiantQ.FlexyGantt.FilterTasksByTimeRangeEventArgs = function(b, c, a) {
        var d = b,
            g = c,
            f = a,
            h = null;
        this.SourceList_M = function(a) {
            if (0 == arguments.length) {
                if (d) return d;
                d = null
            } else d = a
        };
        this.TimeRangeStart_M =
            function(a) {
                if (0 == arguments.length) {
                    if (g) return g;
                    g = null
                } else g = a
        };
        this.TimeRangeEnd_M = function(a) {
            if (0 == arguments.length) {
                if (f) return f;
                f = null
            } else f = a
        };
        this.FilteredList_M = function(a) {
            if (0 == arguments.length) {
                if (h) return h;
                h = null
            } else h = a
        };
        RadiantQ.CanUseDefineProperty && (Object.defineProperty(this, "SourceList", {
            get: function() {
                if (d) return d;
                d = null
            },
            set: function(a) {
                d = a
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(this, "TimeRangeStart", {
            get: function() {
                if (g) return g;
                g = null
            },
            set: function(a) {
                g =
                    a
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(this, "TimeRangeEnd", {
            get: function() {
                if (f) return f;
                f = null
            },
            set: function(a) {
                f = a
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(this, "FilteredList", {
            get: function() {
                if (h) return h;
                h = null
            },
            set: function(a) {
                h = a
            },
            enumerable: !0,
            configurable: !0
        }))
    }
})(jQuery);

function RQTimeSpan(e, b, c, a, d, g) {
    this._isInit = !0;
    var f = arguments.length;
    if (1 == f) {
        f = 0 > e ? -1 : 1;
        this._totalMS = e;
        var h = Math.abs(e);
        this.days = Math.floor(h / 864E5) * f;
        h %= 864E5;
        this.milliseconds = this._seconds = this._minutes = this._hours = 0;
        if (0 == h) return this;
        this._hours = Math.floor(h / 36E5) * f;
        h %= 36E5;
        if (0 == h) return this;
        this._minutes = Math.floor(h / 6E4) * f;
        h %= 6E4;
        if (0 == h) return this;
        this._seconds = Math.floor(h / 1E3) * f;
        this.milliseconds = h % 1E3 * f
    } else 4 == f ? (this.days = e, this._hours = b, this._minutes = c, this._seconds = a, this.milliseconds =
        0, this._totalMS = 864E5 * e + 36E5 * b + 6E4 * c + 1E3 * a) : 5 <= f ? (this.days = e, this._hours = b, this._minutes = c, this._seconds = a, this.milliseconds = d, this._totalMS = 5 < f ? g : 864E5 * e + 36E5 * b + 6E4 * c + 1E3 * a + d) : this._totalMS = this.milliseconds = this._seconds = this._minutes = this._hours = 0;
    return this
}
(function() {
    var e = null,
        b = null,
        c = null;
    RQTimeSpan.MaxValue_M = function() {
        return e
    };
    RQTimeSpan.MinValue_M = function() {
        return b
    };
    RQTimeSpan.Zero_M = function() {
        return c
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RQTimeSpan, "MaxValue", {
        get: function() {
            return e
        },
        set: function() {},
        enumerable: !0,
        configurable: !1
    }), Object.defineProperty(RQTimeSpan, "MinValue", {
        get: function() {
            return b
        },
        set: function() {},
        enumerable: !0,
        configurable: !1
    }), Object.defineProperty(RQTimeSpan, "Zero", {
        get: function() {
            return c
        },
        set: function() {},
        enumerable: !0,
        configurable: !1
    }));
    RQTimeSpan.parse = function(a) {
        if (a instanceof RQTimeSpan) return a;
        if ("string" != typeof a) return RQTimeSpan.Zero;
        try {
            var b = a.split(".");
            if (2 == b.length) {
                var c = parseInt(b[0]),
                    f = b[1].split(":"),
                    h = parseInt(f[0]),
                    k = parseInt(f[1]),
                    e = parseInt(f[2]);
                return new RQTimeSpan(c, h, k, e, 0)
            }
            f = b[0].split(":");
            if (1 == f.length) {
                var l = f[0];
                a = "";
                for (var b = null, f = "", m = 0, p = 0, e = k = h = c = 0, q = !1, s = !1, r = 0; r <= l.length; r++) {
                    var t = l.charAt(r);
                    if (isInteger(t)) q = !0, a += t;
                    else {
                        if ("" != f && !0 == q) {
                            switch (f) {
                                case "PT":
                                    f =
                                        "";
                                    break;
                                case "P":
                                    f = "";
                                    break;
                                case "Y":
                                    f = "";
                                    m = b;
                                    s = !0;
                                    break;
                                case "M":
                                    f = "";
                                    s ? (p = b, s = !1) : k = b;
                                    break;
                                case "DT":
                                    f = "";
                                    c = b;
                                    break;
                                case "H":
                                    f = "";
                                    h = b;
                                    break;
                                case "S":
                                    f = "", e = b
                            }
                            b = parseInt(a);
                            a = ""
                        }
                        f += t
                    }
                }
                return new RQTimeSpan(c + 365 * m + 30 * p, h, k, e, 0)
            }
            h = parseInt(f[0], 10);
            k = parseInt(f[1], 10);
            e = parseInt(f[2], 10);
            return new RQTimeSpan(0, h, k, e, 0)
        } catch (x) {
            return RQTimeSpan.Zero
        }
    };
    isInteger = function(a) {
        return "NaN" != parseInt(a).toString() ? !0 : !1
    };
    RQTimeSpan.fromTicks = function(a) {
        return new RQTimeSpan(a / 1E4)
    };
    RQTimeSpan.FromDays =
        function(a) {
            if (!a) return RQTimeSpan.Zero;
            var b = 0 > a ? -1 : 1;
            a = Math.abs(a);
            return new RQTimeSpan(b * Math.floor(a), 24 * b * (a % 1), 0, 0)
    };
    RQTimeSpan.FromHours = function(a) {
        if (!a) return RQTimeSpan.Zero;
        var b = 0 > a ? -1 : 1;
        a = Math.abs(a);
        return new RQTimeSpan(0, b * Math.floor(a), 60 * b * (a % 1), 0)
    };
    RQTimeSpan.FromMinutes = function(a) {
        if (!a) return RQTimeSpan.Zero;
        var b = 0 > a ? -1 : 1;
        a = Math.abs(a);
        return new RQTimeSpan(0, 0, b * Math.floor(a), 60 * b * (a % 1))
    };
    RQTimeSpan.prototype.days_M = function(a) {
        if (0 == arguments.length) return this.days;
        this.days =
            a
    };
    RQTimeSpan.prototype.hours_M = function(a) {
        if (0 == arguments.length) return this._hours;
        if (-24 < a && 24 > a) this._hours = a;
        else {
            var b = a % 1;
            for (b && this.minutes_M(60 * b); 24 <= a;) this.days++, a -= 24;
            b = 0 > a ? -1 : 1;
            a = Math.abs(a);
            this._hours = b * Math.floor(a)
        }
    };
    RQTimeSpan.prototype.minutes_M = function(a) {
        if (0 == arguments.length) return this._minutes;
        if (-60 < a && 60 > a) this._minutes = a;
        else {
            var b = a % 1;
            for (b && this.seconds_M(60 * b); 60 <= a;) b = this.hours_M(), this.hours_M(++b), a -= 60;
            this._isInit && (a += this._minutes);
            b = 0 > a ? -1 : 1;
            a = Math.abs(a);
            this._minutes = b * Math.floor(a)
        }
    };
    RQTimeSpan.prototype.seconds_M = function(a) {
        if (0 == arguments.length) return this._seconds;
        if (-60 < a && 60 > a) this._seconds = a;
        else {
            for (; 60 <= a;) {
                var b = this.minutes_M();
                this.minutes_M(b++);
                a -= 60
            }
            this._isInit && (a += this._seconds);
            this._seconds = Math.round(a)
        }
    };
    RQTimeSpan.prototype.milliseconds_M = function(a) {
        if (0 == arguments.length) return this.milliseconds;
        this.milliseconds = a
    };
    RQTimeSpan.prototype.totalMilliseconds_M = function() {
        return this._totalMS
    };
    RQTimeSpan.prototype.Ticks_M = function() {
        return 1E4 *
            this.totalMilliseconds_M()
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RQTimeSpan.prototype, "hours", {
        get: function() {
            return this._hours
        },
        set: function(a) {
            var b = a % 1;
            b && (this.minutes = 60 * b);
            for (; 24 <= a;) this.days++, a -= 24;
            b = 0 > a ? -1 : 1;
            a = Math.abs(a);
            this._hours = b * Math.floor(a)
        }
    }), Object.defineProperty(RQTimeSpan.prototype, "minutes", {
        get: function() {
            return this._minutes
        },
        set: function(a) {
            var b = a % 1;
            b && (this.seconds = 60 * b);
            for (; 60 <= a;) this.hours++, a -= 60;
            this._isInit && (a += this._minutes);
            b = 0 > a ? -1 : 1;
            a = Math.abs(a);
            this._minutes = b * Math.floor(a)
        }
    }), Object.defineProperty(RQTimeSpan.prototype, "seconds", {
        get: function() {
            return this._seconds
        },
        set: function(a) {
            for (; 60 <= a;) this.minutes++, a -= 60;
            this._isInit && (a += this._seconds);
            this._seconds = Math.round(a)
        }
    }), Object.defineProperty(RQTimeSpan.prototype, "totalMilliseconds", {
        get: function() {
            return 864E5 * this.days + 36E5 * this._hours + 6E4 * this._minutes + 1E3 * this._seconds
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RQTimeSpan.prototype, "Ticks", {
        get: function() {
            return 1E4 *
                this.totalMilliseconds
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }));
    RQTimeSpan.prototype.valueOf = function() {
        return this.totalMilliseconds_M()
    };
    RQTimeSpan.prototype.getTotalDays = function() {
        return this.totalMilliseconds_M() / 864E5
    };
    RQTimeSpan.prototype.getTotalHours = function() {
        return this.totalMilliseconds_M() / 36E5
    };
    RQTimeSpan.prototype.getTotalMinutes = function() {
        return this.totalMilliseconds_M() / 6E4
    };
    RQTimeSpan.prototype.getTotalSeconds = function() {
        return this.totalMilliseconds_M() / 1E3
    };
    RQTimeSpan.prototype.equals =
        function(a) {
            return 0 === this.compareTo(a)
    };
    RQTimeSpan.prototype.add = function(a) {
        return null === a ? this : this.addSeconds(a.totalMilliseconds_M() / 1E3)
    };
    RQTimeSpan.prototype.subtract = function(a) {
        return null === a ? this : new RQTimeSpan(this._totalMS - a._totalMS)
    };
    RQTimeSpan.prototype.addDays = function(a) {
        return new RQTimeSpan(this.totalMilliseconds_M() + 864E5 * a)
    };
    RQTimeSpan.prototype.addHours = function(a) {
        return new RQTimeSpan(this.totalMilliseconds_M() + 36E5 * a)
    };
    RQTimeSpan.prototype.addMinutes = function(a) {
        return new RQTimeSpan(this.totalMilliseconds_M() +
            6E4 * a)
    };
    RQTimeSpan.prototype.addSeconds = function(a) {
        return new RQTimeSpan(this.totalMilliseconds_M() + 1E3 * a)
    };
    RQTimeSpan.prototype.addMilliseconds = function(a) {
        return new RQTimeSpan(this.totalMilliseconds_M() + a)
    };
    RQTimeSpan.prototype.get12Hour = function() {
        return 12 < this.hours ? this.hours - 12 : 0 === this.hours ? 12 : this.hours
    };
    RQTimeSpan.prototype.getDesignator = function() {
        return 12 > this.hours ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator
    };
    RQTimeSpan.prototype.isGreaterThan = function(a) {
        return this.totalMilliseconds_M() >
            a.totalMilliseconds_M() ? !0 : !1
    };
    RQTimeSpan.prototype.isGreaterThanOrEqualTo = function(a) {
        return this.totalMilliseconds_M() >= a.totalMilliseconds_M() ? !0 : !1
    };
    RQTimeSpan.prototype.isLessThan = function(a) {
        return this.totalMilliseconds_M() < a.totalMilliseconds_M() ? !0 : !1
    };
    RQTimeSpan.prototype.compareTo = function(a) {
        a || (a = RQTimeSpan.Zero_M());
        return this > a ? 1 : this < a ? -1 : 0
    };
    RQTimeSpan.prototype.toString = function() {
        var a = this.days_M(),
            b = this.hours_M(),
            c = this.minutes_M(),
            f = this.seconds_M(),
            b = 10 > b ? "0" + b : b,
            c = 10 > c ? "0" +
                c : c,
            f = 10 > f ? "0" + f : f;
        return 0 < a ? "" + a + "." + b + ":" + c + ":" + f + "" : "" + b + ":" + c + ":" + f + ""
    };
    RQTimeSpan.prototype.toJSON = function() {
        return this.toString()
    };
    window.TimeSpan || (TimeSpan = RQTimeSpan);
    RQTimeSpan.prototype.getEqualNegative = function() {
        return new RQTimeSpan(-this.days, -this._hours, -this._minutes, -this._seconds, -this.milliseconds, -this._totalMS)
    };
    e = new RQTimeSpan(10675199, 2, 48, 5, 477);
    b = new RQTimeSpan(-10675199, -2, -48, -5, -477);
    c = new RQTimeSpan(0, 0, 0, 0, 0)
})();
(function(e) {
    RadiantQ.Gantt.Utils.TimeComputingUtils = {};
    RadiantQ.Gantt.Utils.TimeComputingUtils.AddLagToStartTime = function(a, b, c) {
        return null == c ? a.addTimeSpan(b) : b.isGreaterThanOrEqualTo(RQTimeSpan.Zero_M()) ? c.GetEnd(a, b) : c.GetStart(a, new RQTimeSpan(-b.totalMilliseconds_M()))
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToUnitsOfBaseType = function(a, b, c) {
        var f = RadiantQ.Gantt;
        if (b == f.TimeScaleType.Weeks) switch (a) {
            case f.TimeScaleType.Minutes:
                return 10080 * c;
            case f.TimeScaleType.Hours:
                return 168 * c;
            case f.TimeScaleType.Days:
                return 7 * c;
            case f.TimeScaleType.Weeks:
                return c;
            case f.TimeScaleType.Months:
            case f.TimeScaleType.Years:
                return 1
        } else if (b == f.TimeScaleType.Days) switch (a) {
            case f.TimeScaleType.Minutes:
                return 1440 * c;
            case f.TimeScaleType.Hours:
                return 24 * c;
            case f.TimeScaleType.Days:
                return c;
            case f.TimeScaleType.Weeks:
                return c / 7;
            case f.TimeScaleType.Months:
            case f.TimeScaleType.Years:
                return 1
        } else if (b == f.TimeScaleType.Hours) switch (a) {
            case f.TimeScaleType.Minutes:
                return 60 * c;
            case f.TimeScaleType.Hours:
                return c;
            case f.TimeScaleType.Days:
                return c / 24;
            case f.TimeScaleType.Weeks:
                return c / 168;
            case f.TimeScaleType.Months:
            case f.TimeScaleType.Years:
                return 1
        } else if (b == f.TimeScaleType.Minutes) switch (a) {
            case f.TimeScaleType.Minutes:
                return c;
            case f.TimeScaleType.Hours:
                return c / 60;
            case f.TimeScaleType.Days:
                return c / 1440;
            case f.TimeScaleType.Weeks:
                return c / 10080;
            case f.TimeScaleType.Months:
            case f.TimeScaleType.Years:
                return 1
        }
        throw "Not yet supported 2";
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertTimeSpanToTimeUnits =
        function(a, b) {
            var c = RadiantQ.Gantt;
            switch (a) {
                case c.TimeScaleType.Minutes:
                    return b.getTotalMinutes();
                case c.TimeScaleType.Hours:
                    return b.getTotalHours();
                case c.TimeScaleType.Days:
                    return b.getTotalDays();
                case c.TimeScaleType.Months:
                    return b.getTotalDays() / 30;
                case c.TimeScaleType.Weeks:
                    return b.getTotalDays() / 7;
                case c.TimeScaleType.Years:
                    return b.getTotalDays() / 365;
                default:
                    throw "Missing case for TimeScaleType: " + a + " in ConvertTimeSpanToTimeUnits";
            }
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.IsWorkingTime =
        function(a, b, c) {
            var f = RadiantQ.Gantt;
            if (null != c) switch (c = null == c ? a : c.ConvertToNextWorkingTime(a), b) {
                case f.TimeScaleType.Minutes:
                    return !a.Date().compareTo(c.Date()) && c.getHours() == a.getHours() && c.getMinutes() == a.getMinutes();
                case f.TimeScaleType.Hours:
                    return !a.Date().compareTo(c.Date()) && c.getHours() == a.getHours();
                case f.TimeScaleType.Days:
                    return !a.Date().compareTo(c.Date());
                case f.TimeScaleType.Weeks:
                    return this.FirstDayOfWeek(c).equals(this.FirstDayOfWeek(a));
                case f.TimeScaleType.Months:
                    return c.getFullYear() ==
                        a.getFullYear() && c.getMonth() == a.getMonth();
                case f.TimeScaleType.Years:
                    return c.getFullYear() == a.getFullYear()
            }
            return !0
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.FirstDayOfWeek = function(a) {
        return a.Date().clone().addDays(-a.getDay())
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetRemainingDaysInWeek = function(a) {
        var b = a.getDay(),
            b = b - Date.CultureInfo.firstDayOfWeek;
        0 > b && (b = 7 + b);
        return 7 - b - a.getHours() / 24 - a.getMinutes() / 1440
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetRemainingDaysInMonth = function(a) {
        var b =
            (new Date(a.getFullYear(), a.getMonth(), 1)).addMonths(1).addDays(-1);
        return rqTCUtils.GetTimeSpan(a, b).getTotalDays() + 1
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetRemainingDaysInYear = function(a) {
        var b = (new Date(a.getFullYear(), 0, 1)).clone().addYears(1).addDays(-1);
        return rqTCUtils.GetTimeSpan(a, b).getTotalDays() + 1
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToFractionalWorkingDay = function(a, b, c, f) {
        if (b.equals(c)) return 0;
        if (null == f) {
            var h = c.totalMilliseconds_M(),
                k = b.totalMilliseconds_M();
            return (new RQTimeSpan(h -
                k)).getTotalHours() / 24
        }
        h = new RadiantQ.Gantt.TimePeriod(a.addTimeSpan(b), a.addTimeSpan(c));
        k = RQTimeSpan.Zero_M();
        a = f.WorkTimeScheduleProvider(a);
        if (null != a) {
            b = a._intervals;
            for (c = 0; c < b.length; c++)(f = b[c].Intersect(h)) && (k = k.add(f.Duration_M()));
            return isNaN(k.getTotalHours() / a.Duration.getTotalHours()) ? 0 : k.getTotalHours() / a.Duration.getTotalHours()
        }
        return (c.Ticks_M() - b.Ticks_M()) / RQTimeSpan.FromDays(1).Ticks_M()
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToFractionalDurationInHours = function(a,
        b, c) {
        if (null == c) return 24 * b;
        a = c.WorkTimeScheduleProvider(a);
        return null != a ? a.Duration.getTotalHours() * b : 0
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetLeadingNonWorkingHours = function(a, b) {
        if (null == b) return RQTimeSpan.Zero_M();
        var c = b.WorkTimeScheduleProvider(a.Date());
        return null != c ? new RQTimeSpan(c.Start - a.Date()) : RQTimeSpan.Zero_M()
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToApproxUnitsOfBaseType = function(a, b, c) {
        var f = RadiantQ.Gantt;
        if (b == f.TimeScaleType.Years) switch (a) {
            case f.TimeScaleType.Minutes:
                return 525600 *
                    c;
            case f.TimeScaleType.Hours:
                return 8760 * c;
            case f.TimeScaleType.Days:
                return 365 * c;
            case f.TimeScaleType.Weeks:
                return 52 * c;
            case f.TimeScaleType.Months:
                return 12 * c;
            case f.TimeScaleType.Years:
                return c
        } else if (b == f.TimeScaleType.Months) switch (a) {
            case f.TimeScaleType.Minutes:
                return 44640 * c;
            case f.TimeScaleType.Hours:
                return 744 * c;
            case f.TimeScaleType.Days:
                return 31 * c;
            case f.TimeScaleType.Weeks:
                return 4 * c;
            case f.TimeScaleType.Months:
                return c;
            case f.TimeScaleType.Years:
                return 1
        }
        return f.Utils.TimeComputingUtils.ConvertToUnitsOfBaseType(a,
            b, c)
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.CeilToNextDay = function(a) {
        var b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0);
        return 0 < a.compareTo(b) ? b.clone().addDays(1) : a
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.CeilToNextHour = function(a) {
        var b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), 0, 0);
        0 < a.compareTo(b) && b.addHours(1);
        return b
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.CeilToNextMinute = function(a) {
        var b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(),
            a.getMinutes(), 0);
        0 < a.compareTo(b) && b.addMinutes(1);
        return b
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetStartOfNextYear = function(a) {
        return (new Date(a.getFullYear(), 0, 1, 0, 0, 0)).addYears(1)
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetStartOfNextWeek = function(a) {
        a = a.addDays(RadiantQ.Gantt.Utils.TimeComputingUtils.GetRemainingDaysInWeek(a));
        return RadiantQ.Gantt.Utils.TimeComputingUtils.CeilToNextDay(a)
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetStartOfNextMonth = function(a) {
        return (new Date(a.getFullYear(),
            a.getMonth(), 1, 0, 0, 0)).addMonths(1)
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetTimeBreaks = function(a, b, c, f) {
        if (!1 != a instanceof Date && !1 != b instanceof Date) {
            f || (f = []);
            var h = new RQTimeSpan(b - a);
            if (h <= RQTimeSpan.Zero_M()) return !1;
            if (null != c) {
                var k = c.ConvertToNextWorkingTime(a).equals(a) ? !0 : !1;
                f.push(a);
                a = c.ConvertToNextWorkingTimeIntervals(a, h);
                if (0 == a.length) return !1;
                !k && a[0].Start_M().isLessThan(b) && f.push(a[0].Start_M());
                for (c = 1; c < a.length; c++)
                    if (!1 == a[c].Start_M().equals(a[c - 1].End_M())) {
                        if (0 <=
                            a[c - 1].End_M().compareTo(b)) break;
                        f.push(a[c - 1].End_M());
                        if (0 <= a[c].Start_M().compareTo(b)) break;
                        f.push(a[c].Start_M())
                    }
                c == a.length && a[c - 1].End_M().isLessThan(b) && f.push(a[c - 1].End_M());
                f.push(b);
                return k
            }
            f.push(a);
            f.push(b);
            return !0
        }
    };
    RadiantQ.Gantt.BindingMode = {
        OneWay: "OneWay",
        TwoWay: "TwoWay"
    };
    Array.prototype.filter || (Array.prototype.filter = function(a, b) {
        if (void 0 === this || null === this) throw new TypeError;
        var c = Object(this),
            f = c.length >>> 0;
        if ("function" !== typeof a) throw new TypeError;
        for (var h = [],
                k = 0; k < f; k++)
            if (k in c) {
                var e = c[k];
                a.call(b, e, k, c) && h.push(e)
            }
        return h
    });
    Date.prototype.Date = function() {
        return new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0)
    };
    Date.prototype.addTimeSpan = function(a) {
        return a ? this.clone().add({
            millisecond: a.millisecond || a.milliseconds_M(),
            seconds: a.seconds_M(),
            minutes: a.minutes_M(),
            hours: a.hours_M(),
            days: a.days_M()
        }) : this
    };
    Date.MaxValue = new Date(9999, 11, 30, 11, 59, 59);
    Date.MinValue = new Date(1E3, 0, 1, 12, 0, 0);
    var b = {};
    window.DateTime = b;
    b.MaxValue = new Date(9999,
        11, 30, 11, 59, 59);
    b.MinValue = new Date(1E3, 0, 1, 12, 0, 0);
    Date.prototype.isGreaterThan = function(a) {
        return 1 == this.compareTo(a) ? !0 : !1
    };
    Date.prototype.isLessThan = function(a) {
        return -1 == this.compareTo(a) ? !0 : !1
    };
    Date.prototype.subtract = function(a) {
        return this - a
    };
    String.prototype.trim = function() {
        if (0 == arguments.length) return this.replace(/^\s+|\s+$/, "");
        for (var a = this, b = 0; b < arguments.length; b++) a = a.replace(arguments[b], "");
        return a
    };
    String.prototype.trimEnd = function() {
        if (0 == arguments.length) return this.replace(/^\s+|\s+$/,
            "");
        var a = this.lastIndexOf(arguments[0]),
            b = this.slice(0, a),
            a = this.slice(a + 1);
        return b + a
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(String, "trim", {
        enumerable: !1
    }), Object.defineProperty(String, "trimEnd", {
        enumerable: !1
    }));
    try {
        window.JSON.toXML = function(a, b, c) {
            if (a instanceof Array) {
                for (var f = "<" + b + ">", h = 0; h < a.length; h++) {
                    var k = a[h],
                        f = f + "\n",
                        e = "<" + c + " ",
                        l;
                    for (l in k) void 0 != k[l] && (e += l + '="' + k[l] + '" ');
                    e += "/>";
                    f += e
                }
                return '<?xml version="1.0" encoding="utf-8" ?>\n' + (f + ("\n</" + b + ">"))
            }
        }
    } catch (c) {}
    RadiantQ.RQ_ObservableCollection =
        function(a) {
            Array.call(a);
            a.DataSource = a;
            a.CollectionChanged = new ObjectEvent("CollectionChanged");
            a.push = function(a) {
                Array.prototype.push.call(this, a);
                args = {
                    Action: "Add",
                    NewItems: [a]
                };
                this.CollectionChanged.raise(this, args)
            };
            a.splice = function(a, b, c) {
                var h = [],
                    h = void 0 == c ? Array.prototype.splice.call(this, a, b) : Array.prototype.splice.call(this, a, b, c);
                args = {};
                c && (args.Action = "Add", args.NewItems = c instanceof Array ? c : [c]);
                b && 0 < b && (args.Action = "Remove", args.OldItems = h);
                this.CollectionChanged.raise(this, args)
            };
            a.pop = function() {
                var a = Array.prototype.pop.call(this);
                args = {};
                a && (args.Action = "Remove", args.OldItems = [a]);
                this.CollectionChanged.raise(this, args);
                return a
            };
            a.remove = function(a) {
                return Array.prototype.remove.call(this, a)
            };
            return a
    };
    RadiantQ.RQ_ObservableCollection.prototype = [];
    window.ko && (ko.bindingHandlers.GanttControl = {
        init: function(a, b, c, f, h) {
            e(a).GanttControl(b())
        },
        update: function(a, b, c, f, h) {}
    }, ko.bindingHandlers.FlexyGantt = {
        init: function(a, b, c, f, h) {
            e(a).FlexyGantt(b())
        },
        update: function(a, b, c,
            f, h) {}
    });
    RadiantQ.Gantt.Utils.SaveCanvasAsImage = function(a, b) {
        if (a.msToBlob && window.navigator.msSaveOrOpenBlob) window.ganttBlob = a.msToBlob(), window.navigator.msSaveOrOpenBlob(ganttBlob, b);
        else if (window.Blob || window.webkitURL) {
            window.readyState = 0;
            var c = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
            c.target = "_blank";
            c.href = a.toDataURL("image/png");
            c.download = b;
            var f = document.createEvent("MouseEvents");
            f.initMouseEvent("click", !0, !1, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null);
            c.dispatchEvent(f);
            window.readyState = 2;
            setTimeout(function() {
                window.close()
            }, 1E3)
        }
    };
    RadiantQ.Gantt.Utils.getChildObject = function(a, b) {
        for (var c = b.split("."), f = a, h = 0; h < c.length - 1; h++) var k = c[h],
        f = f[k + "_M"] ? f[k + "_M"]() : f[k];
        return f
    };
    RadiantQ.Gantt.Utils.FilterOptions = function() {
        this.AlwaysShowSummaryTask = !1
    }
})(jQuery);
(function() {
    function e(a, d, c, k, e) {
        null == d ? (this._binding = d, this.IsBound = !1) : (this.model = e, this._isValueUpdating = this._isSrcUpdating = !1, c = d.Property.split("."), 1 < c.length && (d.Property = c.pop(), c = c.join(), a = RadiantQ.Template.getter(c, a)), this.property = d.Property, d.Converter && (d.Convert = d.Converter.Convert, d.ConvertBack = d.Converter.ConvertBack), this.BindingMode = k = d.Mode || RadiantQ.Gantt.BindingMode.OneWay, this.boundedObj = a, this._binding = this.OriginalBinding = d, this._isdisposed = !1, this._value = null, this.ValueChanged =
            new ObjectEvent("ValueChanged"), e && e.canInsertPropertyChangeTriggeringPropertiesInData && (this._isdisposed = !1, this.PropertyChangedTrigger = new b(a, this.property)), this._value = d.Convert && "function" == typeof d.Convert ? "function" == typeof a[this.property] ? d.Convert.call(a, a[this.property]()) : d.Convert.call(a, a[this.property], a) : "function" == typeof a[this.property] ? a[this.property]() : a[this.property], a.PropertyChanged && !1 == a.PropertyChanged.isSubscribed(this.onSourcePropertyChanged, a) && a.PropertyChanged.subscribe(this.onSourcePropertyChanged,
                a), a._boundProps || (a._boundProps = {}, RadiantQ.CanUseDefineProperty && Object.defineProperty(a, "_boundProps", {
                enumerable: !1,
                configurable: !0
            })), a._boundProps[this.property] = this)
    }

    function b(a, b, d) {
        this.originalData = a;
        this.originalProperty = b;
        var k = b.split(".");
        1 < k.length && (b = k.pop(), k = k.join(), a = RadiantQ.Template.getter(k, a));
        this.data = a;
        this.property = b;
        a.PropertyChanged || (a.PropertyChanged = new ObjectEvent("PropertyChanged"));
        var k = a,
            e = a[b];
        void 0 === d && "function" === typeof a.ID && (d = !0);
        if ("function" === typeof e) d = !0, d = function(d) {
            a.PropertyChanged.raise(a, {
                PropertyName: b,
                Value: d
            })
        }, a[b].subscribe(d);
        else {
            if (!0 == RadiantQ.CanUseDefineProperty) {
                var l = c(a, b);
                a["Bounded_" + b] = l;
                d && (k = {});
                Object.defineProperty(k, b, {
                    get: function() {
                        return l.get ? l.get.call(this) : "function" === typeof l.value ? l.value.call(this) : l.value
                    },
                    set: function(a) {
                        l.set ? l.set.call(this, a) : "function" === typeof l.value ? l.value.call(this, a) : l.value = a;
                        this.PropertyChanged.raise(this, {
                            PropertyName: b,
                            Value: a
                        })
                    },
                    enumerable: !0,
                    configurable: !0
                })
            }
            void 0 === e &&
                d && (d = ko.mapping.fromJS(k[b]), a[b] = d, d = function(d) {
                    a.PropertyChanged.raise(a, {
                        PropertyName: b,
                        Value: d
                    })
                }, a[b].subscribe(d))
        }
    }

    function c(a, b) {
        var d = a,
            c = a[b],
            e = Object.getOwnPropertyDescriptor(d, b);
        if (void 0 === c && void 0 === e) return {
            value: void 0
        };
        for (; void 0 === e && void 0 !== c;) d = Object.getPrototypeOf(d), e = Object.getOwnPropertyDescriptor(d, b), c = a[b];
        return e
    }

    function a(a, b, d) {
        var c = a,
            e = b,
            l = b.split(".");
        1 < l.length && (b = l.pop(), l = l.join(), a = RadiantQ.Template.getter(l, a));
        a.PropertyChanged || (a.PropertyChanged =
            new ObjectEvent("PropertyChanged"));
        var m = a[b];
        RadiantQ.CanUseDefineProperty && Object.defineProperty(a, b, {
            get: function() {
                return m
            },
            set: function(a) {
                if (a != m) {
                    var d = m;
                    m = a;
                    this.PropertyChanged.raise(this, {
                        PropertyName: b,
                        OldValue: d,
                        Value: a,
                        ActualData: c,
                        ActualProperty: e
                    })
                }
            },
            enumerable: !0,
            configurable: !0
        });
        d && (a[b + "_M"] = function(a) {
            if (0 == arguments.length) return m;
            if (a != m) {
                var d = m;
                this[b] = m = a;
                this.PropertyChanged.raise(this, {
                    PropertyName: b,
                    OldValue: d,
                    Value: a,
                    ActualData: c,
                    ActualProperty: e
                })
            }
        })
    }

    function d(a,
        b, d) {
        this.Property = a;
        this.Mode = b;
        this.Converter = d
    }
    e.prototype.IsBound_M = function() {
        return null != this._binding
    };
    e.prototype.Binding_M = function() {
        return this._binding
    };
    e.prototype.Value_M = function(a) {
        if (0 == arguments.length) return this._value;
        !1 != this.IsBound_M() && this._value !== a && (this._isValueUpdating = !0, this._value = this._binding.Convert ? this._binding.Convert.call(this, a, this.boundedObj) : a, this._isValueUpdating && this.ValueChanged && this.ValueChanged.raise(this, this._value), this.BindingMode == RadiantQ.Gantt.BindingMode.TwoWay && !1 == this._isSrcUpdating && this.updateSrc(), this._isValueUpdating = !1)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.prototype, "IsBound", {
        get: function() {
            return this.IsBound_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.prototype, "Binding", {
        get: function() {
            return this.Binding_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.prototype, "Value", {
        get: function() {
            return this.Value_M()
        },
        set: function(a) {
            this.Value_M(a)
        },
        enumerable: !0,
        configurable: !0
    }));
    e.prototype.updateSrc = function() {
        if (this.BindingMode == RadiantQ.Gantt.BindingMode.TwoWay) {
            this._isSrcUpdating = !0;
            var a = this.boundedObj[this.property],
                b = this._binding,
                b = b.ConvertBack ? b.ConvertBack.call(this, this._value, this.boundedObj) : this._value;
            if (null == a || void 0 == a) this.boundedObj[this.property] = b;
            else if ("function" == typeof a) this.boundedObj[this.property](b);
            else this.boundedObj[this.property] = b;
            this._isSrcUpdating = !1
        }
    };
    e.prototype.onSourcePropertyChanged = function(a, b) {
        var d = this._boundProps[b.PropertyName];
        d && (d._isSrcUpdating = !0, !1 == d._isValueUpdating && d.Value_M(b.Value), d._isSrcUpdating = !1)
    };
    e.prototype.Dispose = function() {
        this._isdisposed = !0;
        if (!1 != this.IsBound) {
            this.model && this.model.canInsertPropertyChangeTriggeringPropertiesInData && this.UnBindDataWithGantt();
            this.PropertyChanged && this.PropertyChanged.Dispose();
            this.ValueChanged && this.ValueChanged.Dispose();
            delete this.PropertyChanged;
            delete this.ValueChanged;
            delete this.Value;
            var a = this.boundedObj._boundProps,
                b = !0,
                d;
            for (d in a) {
                b = !1;
                break
            }
            b && (this.boundedObj.PropertyChanged &&
                this.boundedObj.PropertyChanged.unsubscribe(this.onSourcePropertyChanged, this.boundedObj), delete this.boundedObj._boundProps)
        }
    };
    e.prototype.UnBindDataWithGantt = function() {
        var a = this._binding.Property;
        this.PropertyChangedTrigger && this.PropertyChangedTrigger.Dispose();
        delete this[a + "_Binder"];
        delete this.boundedObj[a + "_Binder"];
        delete this.boundedObj._boundProps[a]
    };
    RadiantQ.Gantt.Utils.ValueBinder = e;
    b.prototype.Dispose = function() {
        var a = this.data,
            b = this.property,
            d = a["Bounded_" + b];
        delete a[b];
        delete a["Bounded_" +
            b];
        RadiantQ.CanUseDefineProperty && void 0 !== d ? (void 0 === d.configurable && (d.configurable = !0), Object.defineProperty(a, b, d)) : a[b] = this._value
    };
    RadiantQ.Gantt.Utils.InsertPropertyChangedTriggeringProperty = function(b, d, c) {
        if (b && d && !1 != d instanceof Array) {
            b.PropertyChanged || (b.PropertyChanged = new ObjectEvent("PropertyChanged"));
            for (var k = 0; k < d.length; k++) new a(b, d[k], c)
        }
    };
    RadiantQ.Gantt.Utils.InjectGetAndSetOnData = function(b, d, c) {
        b.PropertyChanged || (b.PropertyChanged = new ObjectEvent("PropertyChanged"));
        return new a(b, d, c)
    };
    RadiantQ.BindingOptions = function(a, b, c) {
        if (a) return b || (b = RadiantQ.Gantt.BindingMode.TwoWay), new d(a, b, c);
        window.console && console.error && console.error(a + " is not a vaild PropertyName for BindingOptions")
    };
    RadiantQ.ValueConverter = function() {};
    RadiantQ.ValueConverter.prototype.Convert = function(a, b) {
        return a
    };
    RadiantQ.ValueConverter.prototype.ConvertBack = function(a, b) {
        return a
    }
})();
var ns_gantt = RadiantQ.Gantt,
    rqTCUtils = RadiantQ.Gantt.Utils.TimeComputingUtils;
(function(e) {
    RadiantQ.Gantt.Global = {};
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToUnitsOfBaseScaleType = function(b, c, a, d) {
        var g = c > a,
            f = 0;
        if (g) {
            var h = a;
            a = c;
            c = h
        }
        var h = c.Date(),
            k = a.Date();
        switch (b) {
            case ns_gantt.TimeScaleType.Minutes:
                f = rqTCUtils.GetTimeSpan(c, a).getTotalMinutes();
                break;
            case ns_gantt.TimeScaleType.Hours:
                f = rqTCUtils.GetTimeSpan(c, a).getTotalHours();
                break;
            case ns_gantt.TimeScaleType.Days:
                k.equals(h) ? f = rqTCUtils.ConvertToFractionalWorkingDay(k, rqTCUtils.GetTimeSpan(h, c), rqTCUtils.GetTimeSpan(k,
                    a), d) : (b = rqTCUtils.ConvertToFractionalWorkingDay(h, rqTCUtils.GetTimeSpan(h, c), new RQTimeSpan(0, 24, 0, 0), d), b += rqTCUtils.GetTimeSpan(h, a).days - 1, f = b += rqTCUtils.ConvertToFractionalWorkingDay(k, RQTimeSpan.Zero_M(), rqTCUtils.GetTimeSpan(k, a), d));
                break;
            case ns_gantt.TimeScaleType.Weeks:
                f = rqTCUtils.ConvertToUnitsOfBaseScaleType(ns_gantt.TimeScaleType.Days, c, a, d) / 7;
                break;
            case ns_gantt.TimeScaleType.Years:
                f = rqTCUtils.ConvertToUnitsOfBaseScaleType(ns_gantt.TimeScaleType.Days, c, a, d) / 365
        }
        g && (f = -f);
        return f
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetTimeSpan = function(b, c) {
        c = rqTCUtils.GetAdjustEndForDSTChange(b, c);
        return new RQTimeSpan(c - b)
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.GetAdjustEndForDSTChange = function(b, c) {
        var a = b.getTimezoneOffset(),
            d = c.getTimezoneOffset();
        return a != d ? c.clone().addHours((a - d) / 60) : c
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertTimeUnitsToTimeSpan = function(b, c) {
        switch (b) {
            case ns_gantt.TimeScaleType.Minutes:
                return new RQTimeSpan(0, 0, c, 0);
            case ns_gantt.TimeScaleType.Hours:
                return new RQTimeSpan(0,
                    c, 0, 0);
            case ns_gantt.TimeScaleType.Days:
                return new RQTimeSpan(c, 0, 0, 0);
            case ns_gantt.TimeScaleType.Months:
                return new RQTimeSpan(30 * c, 0, 0, 0);
            case ns_gantt.TimeScaleType.Weeks:
                return new RQTimeSpan(7 * c, 0, 0, 0);
            case ns_gantt.TimeScaleType.Years:
                return new RQTimeSpan(365 * c, 0, 0, 0);
            default:
                throw "Missing case for TimeScaleType: {0} in ConvertTimeUnitsToTimeSpan" + b.toString();
        }
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertUnitsInBaseScaleTypeToDurationInHours = function(b, c, a, d, g) {
        var f = 0;
        if (null != c) switch (f =
            new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds()), b) {
            case ns_gantt.TimeScaleType.Minutes:
                if (null == g) return (d - a) / 60;
                d = c.clone().addTimeSpan(new RQTimeSpan(0, d - a, 0, 0));
                g = g.GetEffort(c, d);
                return g.getTotalHours();
            case ns_gantt.TimeScaleType.Hours:
                if (null == g) return d - a;
                d = c.clone().addTimeSpan(new RQTimeSpan(0, d - a, 0, 0));
                g = g.GetEffort(c, d);
                return g.getTotalHours();
            case ns_gantt.TimeScaleType.Days:
                var h = Math.floor(a);
                b = Math.floor(d);
                if (h == b) return rqTCUtils.ConvertToFractionalDurationInHours(c,
                    d - a, g);
                if (d > a) {
                    c = f;
                    var k = c.Date(),
                        f = rqTCUtils.ConvertToFractionalDurationInHours(k, 1 - (a - h), g);
                    a = parseInt(Math.floor(d - h)) - 1;
                    for (h = 1; h <= a; h++) c = c.addDays(1), k = c.Date(), f += rqTCUtils.ConvertToFractionalDurationInHours(k, 1, g);
                    c = c.addDays(1);
                    k = c.Date();
                    f += rqTCUtils.ConvertToFractionalDurationInHours(k, d - b, g)
                } else {
                    c = f;
                    k = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds());
                    f = rqTCUtils.ConvertToFractionalDurationInHours(k, a - h, g);
                    a = Math.abs(parseInt(Math.floor(d - h)) -
                        1);
                    for (h = 1; h <= a; h++) c = c.addDays(-(new RQTimeSpan(1, 0, 0, 0)).getTotalDays()), k = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds()), f += rqTCUtils.ConvertToFractionalDurationInHours(k, 1, g);
                    c = c.addDays(-(new RQTimeSpan(1, 0, 0, 0)).getTotalDays());
                    k = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds());
                    f += rqTCUtils.ConvertToFractionalDurationInHours(k, 1 - (d - b), g);
                    f = -f
                }
                break;
            default:
                throw new Exception("Not supported yet.");
        }
        return f
    };
    RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToEndTimeInBaseScaleType = function(b, c, a, d, g) {
        var f = new Date(c.getFullYear(), c.getMonth(), c.getDate(), 0, 0, 0);
        switch (b) {
            case ns_gantt.TimeScaleType.Minutes:
                if (null == g) return c.addMinutes((new RQTimeSpan(0, d - a, 0, 0)).getTotalHours());
                d = new RQTimeSpan(0, 0, d - a, 0);
                d = c.addTimeSpan(d);
                return g.ConvertToNextWorkingTime(d);
            case ns_gantt.TimeScaleType.Hours:
                if (null == g) return c.addHours((new RQTimeSpan(0, d - a, 0, 0)).getTotalHours());
                d = new RQTimeSpan(0, d - a, 0, 0);
                d = c.addTimeSpan(d);
                return g.ConvertToNextWorkingTime(d);
            case ns_gantt.TimeScaleType.Days:
                var h = Math.floor(a);
                b = Math.floor(d);
                if (h == b) return c.addHours((new RQTimeSpan(0, rqTCUtils.ConvertToFractionalDurationInHours(c, d - a, g), 0, 0)).getTotalHours());
                d > a ? (c = f, a = parseInt(Math.floor(d - h)), c.addDays(a), a = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds())) : (c = f, a = parseInt(Math.ceil(h - d)), c.addDays(-a), a = new Date(c.getFullYear(), c.getMonth(), c.getDate(), 0, 0, 0));
                f = rqTCUtils.GetLeadingNonWorkingHours(a,
                    g);
                c = c.addHours(rqTCUtils.ConvertToFractionalDurationInHours(a, d - b, g));
                return c = c.addHours(f.getTotalHours());
            default:
                throw "Not supported yet.";
        }
    };
    RadiantQ.Gantt.Print = function(b, c) {
        RadiantQ.Gantt.ConvertHTMLToCanvas(c, b, !0)
    };
    RadiantQ.Gantt.ConvertHTMLToCanvas = function(b, c, a) {
        function d(a, b, d, g) {
            b = "";
            e(".resizer-style", a).remove();
            e(".rq-gc-progressbar-resizer", a).remove();
            if (!0 == c.IsGridVisible) {
                var f = e(".ui-grid-body", a),
                    h = e(".ui-grid-head", a),
                    k = e(".timeSpanHeader", a);
                if (c.VisibleColumnIndices &&
                    c.VisibleColumnIndices instanceof Array) {
                    var n = c.VisibleColumnIndices;
                    e("col", a).css("display", "none");
                    f.find("tr").find("td").hide();
                    h.find("th").hide();
                    for (var l = 0; l < n.length; l++) {
                        var p = (parseInt(n[l]) + 1).toString();
                        b += " .ui-grid-body-table tbody td:nth-of-type(" + p + ") {display:table-cell !important;}";
                        b += ".ui-grid-head-table thead th:nth-of-type(" + p + ") {display:table-cell !important;}"
                    }
                }
                n = e(".ui-grid-head-table", a);
                e("tr", n).height(k.outerHeight());
                k = e(".rq-grid-head-parent", a);
                e(".ui-grid-head",
                    k).css("padding-right", "0px");
                e("td#gridContainer>:first-child", a);
                k = e(".ui-grid-body-table", a);
                l = k.eq(0);
                n = k.eq(1);
                p = l.width();
                l.parent().css("width", p + "px");
                e(".ui-head-frozen-div", a).css("width", p + "px");
                l = n.width();
                n.parent().css("width", l + "px");
                e(".ui-head-div", a).css("width", l + "px");
                f.css({
                    height: "100%"
                });
                h.css("width", "100%");
                f.height(d);
                f.parent().height(g);
                e(".ui-gridpanel", a).height(g);
                0 < k.length && k[1].style.setProperty("margin-top", "0px", "important")
            }
            a.height(g);
            if (void 0 === c.IsChartVisible || !1 !== c.IsChartVisible) e(".rq-gc-rowsParent-table", a).height(d), e(".rq-gc-rowsParent", a).css({
                height: d + "px"
            }), e(".rq-gc-chartArea-div", a).height(d), e(".rq-gc-chartArea", a).height(g), e(".rq-ganttChart", a)[0].style.setProperty("height", g + "px", "important"), e(".ui-GanttTimeUnitBackground-unit", a).css("height", "100%"), e(".ui-GanttChartScaleBackground", a).height(d), e(".rq-gc-dependencysParent", a).height(d), e(a).append("<style>td.rq-fg-gc-row{overflow: inherit !important;}\n" + b + "</style>")
        }
        if (!b) {
            var g = e(".rq-ganttBase");
            b = g.data("FlexyGantt") || g.data("GanttControl")
        }
        if (b && b.widgetName && !1 != ("FlexyGantt" == b.widgetName ? !0 : "GanttControl" == b.widgetName ? !0 : !1)) {
            var f = b.element;
            c = c || {};
            var g = e(".ui-gridpanel", f),
                h = e(".rq-ganttChart", f),
                k = f.data(),
                n = k.GanttControl || k.FlexyGantt,
                l = e.extend(!0, l, h.data("GanttChart").options);
            l.Parent.UseTimeRangeFilteredTasksInRows ? (_useTimeRangeFilteredTasksInRows = l.Parent.UseTimeRangeFilteredTasksInRows(), l.Parent = {
                UseTimeRangeFilteredTasksInRows: function() {
                    return _useTimeRangeFilteredTasksInRows
                }
            }) :
                l.Parent = {};
            n.ActivityViews && (l.Parent.ActivityViews = n.ActivityViews, l.Parent.DependencyViews = n.DependencyViews);
            l.Parent.getVirtualizedChartHeight = n.getVirtualizedChartHeight;
            l.ResizeToFit = !0;
            l.IsPrinting = !0;
            l.UseChartVirtualization = !1;
            l.UseVirtualization = !1;
            l.BaseTimeUnitWidthMinimum = 0.1;
            var m = e("<div id='printableGanttChart'></div>"),
                p = g.clone(),
                k = 0;
            c.IsGridVisible = void 0 == c.IsGridVisible && n.options.ShowGridTable ? !0 : !1;
            if (c.VisibleColumnIndices === [] || null === c.VisibleColumnIndices || !1 === c.VisibleColumnIndices) c.IsGridVisible = !1;
            var q = e("div.ui-grid-body", p);
            if (!1 !== c.IsGridVisible) {
                var s = e("tr.ui-widget-header", f),
                    f = e("tr.ui-widget-header>th", f),
                    r = c.VisibleColumnIndices;
                if (r && e.isArray(r) && r.length < f.length)
                    for (s = k = 0; s < r.length; s++) k += e(f[r[s]]).outerWidth(!0);
                else void 0 == r && (k = s.outerWidth(!0));
                s = e("table.ui-grid-body-table", g);
                f = s.outerWidth(!0) - s.width();
                k += f;
                s = s.find("tbody").data("VWGrid");
                q.find("tbody")[0].innerHTML = s.rowHtml(!0)
            }
            var t = e("tr", q),
                x = RadiantQ.Gantt.View.IActivityView.prototype.TableRow,
                w = RadiantQ.Gantt.View.IActivityView.prototype.ChartRow,
                u = RadiantQ.FlexyGantt.HierarchicalItem.prototype.TableRow,
                v = RadiantQ.FlexyGantt.HierarchicalItem.prototype.ChartRow;
            RadiantQ.Gantt.View.IActivityView.prototype.TableRow = function() {
                var a = this.DisplayIndex;
                return -1 == a || a >= t.length ? null : e(t[a])
            };
            RadiantQ.FlexyGantt.HierarchicalItem.prototype.TableRow = function() {
                var a = this.corrFlexyNodeData.DisplayIndex();
                return -1 == a || a >= t.length ? null : e(t[a])
            };
            var C = e(".rq-gc-rowsParent-table", m);
            RadiantQ.Gantt.View.IActivityView.prototype.ChartRow = function() {
                0 == C.length &&
                    (C = e(".rq-gc-rowsParent-table", m));
                var a = e("tr", C),
                    b = this.DisplayIndex;
                return -1 == b || b >= a.length ? null : e(a[b])
            };
            RadiantQ.FlexyGantt.HierarchicalItem.prototype.ChartRow = function() {
                0 == C.length && (C = e(".rq-gc-rowsParent-table", m));
                var a = e("tr", C),
                    b = this.corrFlexyNodeData.DisplayIndex();
                return -1 == b || b >= a.length ? null : e(a[b])
            };
            q = e("table.ui-grid-body-table", g);
            q = q.eq(0).width() + q.eq(1).width();
            k = !1 === c.IsGridVisible ? 0 : k || q;
            $tempCont = e("<div id='tempCont'></div>").append(p);
            !1 !== c.IsChartVisible && ($tempCont.append(m),
                m.css({
                    "margin-left": "6px",
                    width: h.width() - 6 + "px",
                    height: h.height() + "px",
                    position: "absolute",
                    "z-index": 0
                }), l = m.GanttChart(l).data("GanttChart"), c.ViewStartTime ? l.SetStartTime(c.ViewStartTime) : l.SetStartTime(h.data("GanttChart").VisualStartTime.clone()), c.ViewEndTime && l.TrySetEndTime(c.ViewEndTime), l.initializeGanttComponents(), n && n.options.KnockoutObjectName && setTimeout(function() {
                    m.css("display", "none");
                    e(document.body).append(m);
                    var a = eval(n.options.KnockoutObjectName);
                    ko.applyBindings(a, m[0]);
                    a = m[0].innerHTML;
                    ko.cleanNode(m[0]);
                    m.remove();
                    m[0].innerHTML = a;
                    m.css("display", "block")
                }, 0));
            b.element.width();
            p.css({
                width: k + "px",
                position: "absolute"
            });
            p.find(".ui-head-div").css({
                width: k + "px"
            }).addClass("utrst");
            m.css({
                left: k + "px"
            });
            e("script[src*=jquery]", document);
            e("script[src*=html2canvas]", document);
            if (html2canvas) {
                b = e("link", document);
                for (var h = e("style"), z = "", s = 0; s < b.length; s++) z += b[s].outerHTML + "\n";
                for (s = 0; s < h.length; s++) location.href.replace(/([^\/]*$)/, ""), z += h[s].outerHTML;
                !1 === c.IsChartVisible ?
                    e('<div id="__gantt__test" style="height:' + e("tbody", g).height() + 'px;">\n' + p[0].outerHTML + "\n</div>\n") : e('<div id="__gantt__test" style="height:' + m.height() + 'px;">\n' + (!0 == c.IsGridVisible ? p[0].outerHTML : "") + "\n" + m[0].outerHTML + "\n</div>\n");
                var y = function(a, b) {
                    var d = void 0 == c.Format ? "png" : c.Format,
                        g = !0;
                    try {
                        if (c.AfterCanvasGenerated && "function" == typeof c.AfterCanvasGenerated && (g = c.AfterCanvasGenerated(a)), !1 != g) {
                            var f = a.toDataURL("image/" + d + "");
                            $image = e("<img src=" + f + "></img>");
                            e(newWindow.document.body).html("<img id='__RQ_PrintImage' src=" +
                                f + " style='width:100%;'></img>").ready(function() {
                                var c = this.document.title;
                                if (b) {
                                    var g = function() {
                                        e("#__RQ_iframeCont").remove()
                                    };
                                    window.__RQ_iframe ? (__RQ_iframe.onafterprint = g, setTimeout(function() {
                                        "function" == typeof __RQ_iframe.print ? (__RQ_iframe.focus(), __RQ_iframe.print()) : (__RQ_iframe.contentWindow.focus(), __RQ_iframe.contentWindow.print(), g())
                                    }, 1)) : (this.onafterprint = g, this.print());
                                    this.close()
                                } else if (window.Blob) RadiantQ.Gantt.Utils.SaveCanvasAsImage(a, c + "." + d + ""), e("#__RQ_iframeCont").remove(),
                                A || alert("Please close this new window when download is complete.");
                                else {
                                    var h = window.open("", "_blank");
                                    h.document.write("<!DOCTYPE html>\n", '<html xmlns="http://www.w3.org/1999/xhtml">\n', "<head>\n", "<title>" + c + "</title>\n", "</head>\n", "<body>\n", "<img src=" + f + "/>\n", "</body>\n", "</html>");
                                    h.document.close()
                                }
                            }.bind(newWindow))
                        }
                    } catch (h) {
                        window.console && console.error(h.message + " in afterCanvasGenerated.")
                    }
                }, B = c.Title || document.title,
                    A;
                (function() {
                    window.RadiantQ.Gantt.Utils.AfterIframeContentLoad =
                        function(b) {
                            delete window.RadiantQ.Gantt.Utils.AfterIframeContentLoad;
                            var g = e("#__gantt__test", b.document),
                                f = e(".ui-grid", b.document),
                                h = 0,
                                k = 0;
                            0 == f.length ? (h = e(".rq-gc-rowsParent-table", b.document)[0].scrollHeight, k = e(".rq-tsh-div", b.document).height() + h) : (h = e(".grid-body-actualContent", b.document)[1].scrollHeight, k = e(".rq-grid-head-parent", b.document).height() + e(".ui-grid-foot", b.document).height() + h);
                            d(g, a, h, k);
                            e(b.document).ready(function() {
                                function d() {
                                    e(".ui-gridpanel", b.document).css("visibility",
                                        "hidden");
                                    var c = e("#printableGanttChart", b.document).css({
                                        left: 0
                                    });
                                    html2canvas(c, {
                                        allowTaint: !0,
                                        useCORS: !0,
                                        onrendered: function(b) {
                                            b = b.getContext("2d");
                                            h.putImageData(b.getImageData(0, 0, c.width(), k), n + 6, 0);
                                            y(g, a)
                                        }
                                    })
                                }
                                var g = document.createElement("canvas");
                                g.width = p.width() + m.width();
                                g.height = k;
                                var h = g.getContext("2d"),
                                    n = f.width();
                                0 < window.navigator.userAgent.toLowerCase().indexOf("trident") && (8192 < k || 8192 < f.width() + m.width()) ? alert(RadiantQ_PrintErrorString) : c.IsGridVisible ? html2canvas(f, {
                                    allowTaint: !0,
                                    useCORS: !0,
                                    onrendered: function(b) {
                                        b = b.getContext("2d");
                                        h.putImageData(b.getImageData(0, 0, n, k), 0, 0);
                                        !1 != c.IsChartVisible ? d() : y(g, a)
                                    }
                                }) : !1 != c.IsChartVisible && d()
                            })
                    };
                    A = document.createElement("iframe");
                    A.id = "__RQ_iframe";
                    A.width = window.innerWidth;
                    A.height = window.innerHeight;
                    e("#__RQ_iframeCont").remove();
                    var b = e("<div id='__RQ_iframeCont' style='height: 0px;overflow: hidden;'></div>").append(A);
                    e(document.body).append(b);
                    setTimeout(function() {
                        A.contentWindow.document.open();
                        newWindow = A.contentWindow;
                        A.contentWindow.document.write("<!DOCTYPE html>\n", '<html xmlns="http://www.w3.org/1999/xhtml">\n', "<head>\n", "<title>" + B + "</title>\n", "" + z + "\n", "<style>\n", "div.rq-gc-progressbar, div.progressbarStyle {border-radius: 0px !important;}", ".rq-timeUnit-div{overflow:initial !important;}\n", ".ui-grid-body {overflow-x: hidden !important; overflow-y: hidden !important;}\n", "</style>\n", '<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">\n', '<body onload="window.parent.RadiantQ.Gantt.Utils.AfterIframeContentLoad(this)">\n',
                            '<div id="__gantt__test" style="height:' + m.height() + "px; width:" + window.innerWidth + 'px;">\n', "" + (!0 == c.IsGridVisible ? p[0].outerHTML : "") + "\n", "" + m[0].outerHTML + "\n", "</div>\n", "</body>\n", "</html>");
                        A.contentWindow.document.close();
                        p.empty();
                        m.empty();
                        m.empty()
                    }, 0);
                    return A.contentWindow
                })();
                setTimeout(function() {
                    RadiantQ.Gantt.View.IActivityView.prototype.TableRow = x;
                    RadiantQ.Gantt.View.IActivityView.prototype.ChartRow = w;
                    RadiantQ.FlexyGantt.HierarchicalItem.prototype.TableRow = u;
                    RadiantQ.FlexyGantt.HierarchicalItem.prototype.ChartRow =
                        v
                }, 100)
            } else window.console ? console.error("html2canvas.js file is not found.") : alert("html2canvas.js file is not found.")
        }
    };
    RadiantQ.Gantt.ExportToImage = function(b, c) {
        RadiantQ.Gantt.ConvertHTMLToCanvas(c, b)
    }
})(jQuery);
(function() {
    Dictionary = function() {
        this._collections = [];
        this.currIndex = -1;
        this.keys = [];
        this._asArray = [];
        this.CollectionChanged = new ObjectEvent("CollectionChanged");
        this.keys.indexOf = function(e) {
            if (e && e.equals) {
                for (var b = 0; b < this.length; b++)
                    if (this[b].equals(e)) return b;
                return -1
            }
            return Array.prototype.indexOf.call(this, e)
        };
        this.length = this._collections.length;
        this.asArray = this._asArray;
        this.Keys = this.keys;
        return this
    };
    Dictionary.prototype.Add = function(e, b) {
        null == e || void 0 == e ? window.console && console.log(e +
            " is not a valid key for Dictionary.") : ("string" === typeof e || "number" === typeof e ? this[e] = b : "function" == typeof e.ID_M ? this[e.ID_M()] = b : void 0 != e.ID && (this[e.ID] = b), this.currIndex = this.keys.indexOf(e), -1 == this.currIndex ? (this.currIndex = this._asArray.length, this.keys.push(e), this._collections.push({
            key: e,
            value: b
        }), this._asArray.push(b)) : (this._collections[this.currIndex].value = b, this._asArray[this.currIndex] = b), this.length = this._collections.length, this.asArray = this._asArray, this.Keys = this.keys, this.OnCollectionChanged(null,
            b, this.currIndex))
    };
    Dictionary.prototype.Contains = function(e) {
        this.currIndex = this.keys.indexOf(e);
        return -1 == this.currIndex ? !1 : !0
    };
    Dictionary.prototype.indexOf = function(e) {
        return this._asArray.indexOf(e)
    };
    Dictionary.prototype.Remove = function(e) {
        "string" === typeof e || "number" === typeof e ? delete this[e] : e.ID_M ? delete this[e.ID_M()] : e.ID && delete this[e.ID];
        e = this.keys.indexOf(e);
        if (-1 != e) {
            var b = this._asArray[e];
            this._collections.splice(e, 1);
            this.keys.splice(e, 1);
            this._asArray.splice(e, 1)
        }
        this.length = this._collections.length;
        this.asArray = this._asArray;
        this.Keys = this.keys; - 1 != e && this.OnCollectionChanged(b, null, e);
        return !1
    };
    Dictionary.prototype.Clear = function() {
        var e = this.keys.indexOf;
        this.keys = [];
        this.keys.indexOf = e;
        this._collections = [];
        this._asArray = [];
        this.length = this._collections.length;
        this.asArray = this._asArray;
        this.Keys = this.keys;
        this.OnCollectionChanged()
    };
    Dictionary.prototype.GetItemByKey = function(e) {
        e = this.keys.indexOf(e);
        return -1 == e || e >= this.length ? null : this._collections[e].value
    };
    Dictionary.prototype.GetItemByIndex =
        function(e) {
            return this._collections.length <= e || 0 > e ? null : this._collections[e].value
    };
    Dictionary.prototype.CollectionChanged = new ObjectEvent("CollectionChanged");
    Dictionary.prototype.OnCollectionChanged = function(e, b, c) {
        var a = {};
        0 < this.CollectionChanged.fn.length && (e || b ? e ? a = new NotifyCollectionChangedEventArgs(e, null, c) : b && (a = new NotifyCollectionChangedEventArgs(null, b, c)) : a = new NotifyCollectionChangedEventArgs, this.CollectionChanged.raise(this.asArray, a))
    };
    Dictionary.prototype.subscribe = function(e) {
        this.CollectionChanged.subscribe(e)
    };
    Dictionary.prototype.Dispose = function() {
        this._collections = [];
        this.currIndex = -1;
        this.keys = [];
        this._asArray = [];
        this.CollectionChanged && this.CollectionChanged.Dispose();
        this.CollectionChanged = null;
        this.length = this._collections.length;
        this.asArray = this._asArray;
        this.Keys = this.keys
    };
    NotifyCollectionChangedEventArgs = function(e, b, c) {
        e || b || (this.NewItems = this.OldItems = null, this.type = "reset", this.Action = NotifyCollectionChangedAction.Reset);
        e && (this.type = "remove", this.OldStartingIndex = c, e instanceof Array ?
            this.OldItems = e.slice(0) : (this.OldItems = [], this.OldItems.push(e)));
        b && (this.type = "insert", this.NewStartingIndex = c, b instanceof Array ? this.NewItems = b.slice(0) : (this.NewItems = [], this.NewItems.push(b)))
    };
    NotifyCollectionChangedAction = {
        Add: 0,
        Remove: 1,
        Replace: 2,
        Reset: 4
    };
    RadiantQ.Gantt && (RadiantQ.Gantt.Dictionary = Dictionary, RadiantQ.Gantt.NotifyCollectionChangedEventArgs = NotifyCollectionChangedEventArgs);
    RadiantQ && (RadiantQ.Dictionary = Dictionary, RadiantQ.NotifyCollectionChangedEventArgs = NotifyCollectionChangedEventArgs,
        RadiantQ.NotifyCollectionChangedAction = NotifyCollectionChangedAction)
})();
var Utils = RadiantQ.Gantt.Utils;
Utils.DelayUpdateUtil = {};
Utils.DelayUpdateUtil._dirtyDic = new RadiantQ.Gantt.Dictionary;
Utils.DelayUpdateUtil._dirtyList = [];
Utils.DelayUpdateUtil._isUpdating = !1;
Utils.DelayUpdateUtil.IsUpdating = function() {
    return Utils.DelayUpdateUtil._isUpdating
};
Utils.DelayUpdateUtil.BeginUpdate = function() {
    if (Utils.DelayUpdateUtil.IsUpdating()) return !1;
    Utils.DelayUpdateUtil._dirtyDic.Clear();
    Utils.DelayUpdateUtil._dirtyList = [];
    return Utils.DelayUpdateUtil._isUpdating = !0
};
Utils.DelayUpdateUtil.TryDelayedUpdate = function(e, b, c) {
    Utils.DelayUpdateUtil.IsUpdating() ? Utils.DelayUpdateUtil.DelayUpdate(e, b, c) : e.PartialUpdate(b)
};
Utils.DelayUpdateUtil.RemoveUpdates = function(e) {
    Utils.DelayUpdateUtil._dirtyList.remove(e)
};
Utils.DelayUpdateUtil.DelayUpdate = function(e, b, c) {
    var a = Utils.DelayUpdateUtil._dirtyList;
    try {
        if (!1 == Utils.DelayUpdateUtil._dirtyList.containsValue(e)) {
            if (null != c)
                for (var d = -1, g = 0; g < a.length; g++) {
                    if (f = a[g], d++, f instanceof c) {
                        a.splice(d, 0, e);
                        break
                    }
                } else a.push(e);
            null != b && Utils.DelayUpdateUtil._dirtyDic.Add(e, b)
        } else {
            var f = Utils.DelayUpdateUtil._dirtyDic.GetItemByKey(e);
            f && f != b && Utils.DelayUpdateUtil._dirtyDic.Remove(e)
        }
    } catch (h) {
        window.console && console.error(h.message + " from Utils.DelayUpdateUtil.DelayUpdate method.")
    }
};
Utils.DelayUpdateUtil.EndUpdate = function() {
    Utils.DelayUpdateUtil._isUpdating = !1;
    var e = Utils.DelayUpdateUtil._dirtyList,
        b = Utils.DelayUpdateUtil._dirtyDic;
    Utils.DelayUpdateUtil._dirtyDic = new RadiantQ.Gantt.Dictionary;
    Utils.DelayUpdateUtil._dirtyList = [];
    for (var c = e.length - 1; 0 <= c; c--) {
        var a = e[c],
            d = b.GetItemByKey(a);
        d ? a.PartialUpdate(d) : a.TotalUpdate()
    }
};
Utils.DelayUpdateUtil.CopyDictionary = function(e, b) {
    for (var c = 0; c < e.Keys.length; c++) {
        var a = e.Keys[c];
        b[a] = e[a]
    }
};
Utils.DelayUpdates = function() {
    this.startedBeginUpdate = Utils.DelayUpdateUtil.BeginUpdate();
    this.Dispose = function() {
        this.startedBeginUpdate && Utils.DelayUpdateUtil.EndUpdate()
    }
};
Utils.IUIUpdateable = function() {
    this.PartialUpdate = function(e) {};
    this.TotalUpdate = function() {}
};
(function(e) {
    RadiantQ.FlexyGantt.TasksPositionTracker = function(b, c, a) {
        this._fg = b;
        this._sourceItems = c;
        this._startTimeBinding = a;
        this._sourceItems.CollectionChanged && this._sourceItems.CollectionChanged.subscribe(this.TimeRangeBasedItemsFilter_CollectionChanged, this);
        this._startTimesList = new RadiantQ.FlexyGantt.StartTimesList;
        this.InitOrderedList()
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.FlexyGantt_M = function() {
        return this._fg
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.SourceItems_M =
        function() {
            return this._sourceItems
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.StartTimeBinding_M = function() {
        return this._startTimeBinding
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.FlexyGantt.TasksPositionTracker.prototype, "FlexyGantt", {
        get: function() {
            return this._fg
        }
    }), Object.defineProperty(RadiantQ.FlexyGantt.TasksPositionTracker.prototype, "SourceItems", {
        get: function() {
            return this._sourceItems
        }
    }), Object.defineProperty(RadiantQ.FlexyGantt.TasksPositionTracker.prototype,
        "StartTimeBinding", {
            get: function() {
                return this._startTimeBinding
            }
        }));
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.UpdateTimes = function(b, c) {
        this._startTimesList.RemoveStartTimeFromList(c);
        this._startTimesList.AddStartTimeToList(b)
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.AreTasksAvailableBefore = function(b) {
        var c = this._startTimesList.GetMatchingEntry(b);
        return -1 == c ? !1 : b <= this._startTimesList.GetTimeAtIndex(c) && 0 < c ? !0 : b > this._startTimesList.GetTimeAtIndex(c) ? !0 : !1
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.GetNextTaskStartTimeLeft =
        function(b) {
            var c = this._startTimesList.GetMatchingEntry(b);
            return -1 == c ? Date.MinValue : b <= this._startTimesList.GetTimeAtIndex(c) && 0 < c ? this._startTimesList.GetTimeAtIndex(c - 1) : b > this._startTimesList.GetTimeAtIndex(c) ? this._startTimesList.GetTimeAtIndex(c) : Date.MinValue
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.AreTasksAvailableAfter = function(b) {
        var c = this._startTimesList.GetMatchingEntry(b);
        return -1 == c ? !1 : b <= this._startTimesList.GetTimeAtIndex(c) ? !0 : !1
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.GetNextTaskStartTimeRight =
        function(b) {
            var c = this._startTimesList.GetMatchingEntry(b);
            return -1 == c ? Date.MinValue : b <= this._startTimesList.GetTimeAtIndex(c) ? this._startTimesList.GetTimeAtIndex(c) : Date.MinValue
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.GetStartTime = function(b) {
        return null == b ? Date.MinValue : (new RadiantQ.Gantt.Utils.ValueBinder(b, this.StartTimeBinding_M(), null, RadiantQ.Gantt.BindingMode.OneWay))._value
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.TimeRangeBasedItemsFilter_CollectionChanged = function(b,
        c) {
        this.OnSourceItemsCollectionChanged(c)
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.OnSourceItemsCollectionChanged = function(b) {
        if ("Add" == b.Action)
            for (var c = 0; c < b.NewItems.length; c++) {
                var a = b.NewItems[c];
                this._startTimesList.AddStartTimeToList(this.GetStartTime(a))
            } else if ("Remove" == b.Action)
                for (c = 0; c < b.OldItems.length; c++) a = b.OldItems[c], this._startTimesList.RemoveStartTimeFromList(this.GetStartTime(a));
            else this.InitOrderedList()
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.InitOrderedList =
        function() {
            this._startTimesList.Clear();
            for (var b = this.SourceItems_M(), c = 0; c < b.length; c++) this._startTimesList.AddStartTimeToList(this.GetStartTime(b[c]))
    };
    RadiantQ.FlexyGantt.TasksPositionTracker.prototype.Dispose = function() {
        this._sourceItems.CollectionChanged && this._sourceItems.CollectionChanged.unsubscribe(this.TimeRangeBasedItemsFilter_CollectionChanged, this);
        this._startTimesList.Clear()
    };
    RadiantQ.FlexyGantt.StartTimesList = function() {
        this._orderedStartTimes = [];
        this._timeVsEntries = new RadiantQ.Gantt.Dictionary
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.GetTimeAtIndex = function(b) {
        return this._orderedStartTimes.length <= b ? Date.MinValue : this._orderedStartTimes[b]
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.AddStartTimeToList = function(b) {
        if (0 == this._orderedStartTimes.length) this._orderedStartTimes.push(b), this._timeVsEntries.Add(b, 1);
        else {
            var c = this.GetMatchingEntryRecursively(0, this._orderedStartTimes.length - 1, b);
            this._orderedStartTimes[c].equals(b) ? (b = this._timeVsEntries.keys.indexOf(b), b = this._timeVsEntries._collections[b],
                this._timeVsEntries.Add(b.key, ++b.value)) : this._orderedStartTimes[c] < b ? (this._orderedStartTimes.splice(c + 1, 0, b), this._timeVsEntries.Add(b, 1)) : this._orderedStartTimes[c] > b && (this._orderedStartTimes.splice(c, 0, b), this._timeVsEntries.Add(b, 1))
        }
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.RemoveStartTimeFromList = function(b) {
        if (0 != this._orderedStartTimes.length) {
            var c = this.GetMatchingEntryRecursively(0, this._orderedStartTimes.length - 1, b);
            if (this._orderedStartTimes[c].equals(b)) {
                var a = this._timeVsEntries.GetItemByKey(b);
                a--;
                0 == a ? (this._orderedStartTimes.splice(c, 1), this._timeVsEntries.Remove(b)) : this._timeVsEntries.Add(b, a)
            }
        }
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.Clear = function() {
        this._timeVsEntries.Clear();
        this._orderedStartTimes = []
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.GetMatchingEntry = function(b) {
        return 0 == this._orderedStartTimes.length ? -1 : this.GetMatchingEntryRecursively(0, this._orderedStartTimes.length - 1, b)
    };
    RadiantQ.FlexyGantt.StartTimesList.prototype.GetMatchingEntryRecursively = function(b,
        c, a) {
        if (a < this._orderedStartTimes[b]) return b;
        if (this._orderedStartTimes[c] < a) return c;
        if (a.equals(this._orderedStartTimes[b])) return b;
        if (a.equals(this._orderedStartTimes[c])) return c;
        var d = Math.floor((c + b) / 2);
        return this._orderedStartTimes[d].equals(a) ? d : this._orderedStartTimes[d] < a ? this.GetMatchingEntryRecursively(d + 1, c, a) : this.GetMatchingEntryRecursively(b, d, a)
    }
})(jQuery);
(function() {
    var e = RadiantQ.Gantt;
    e.TimePeriod = {};
    e.TimePeriod = function(b, c, a, d) {
        if (2 > arguments.length) throw Error("Please pass the start and finish date or start and duration as args");
        this._start = b;
        c && !a && (a = new RadiantQ.Gantt.Utils.TimeComputingUtils.GetTimeSpan(b, c));
        a && !c && (c = b.addTimeSpan(a));
        this._end = c;
        this._duration = a;
        this.IsReadOnly = d;
        return this
    };
    e.TimePeriod.prototype.notifyChange = function(b, c) {
        "Start" == b ? this.UpdateEnd() : "End" == b ? this.UpdateDuration() : "Duration" == b && this.UpdateEnd()
    };
    e.TimePeriod.prototype.Start_M = function(b) {
        if (0 == arguments.length) return this._start;
        if (!this._start || !this._start.equals(b)) {
            if (this.IsReadOnly) throw Error("Cannot set Start on a ReadOnly TimePeriod.");
            this._start = b;
            this.notifyChange("Start", b)
        }
    };
    e.TimePeriod.prototype.End_M = function(b) {
        if (0 == arguments.length) return this._end;
        if (!this._end || !this._end.equals(b)) {
            if (this.IsReadOnly) throw Error("Cannot set Duration on a ReadOnly TimePeriod.");
            this._end = b;
            this.notifyChange("End", b)
        }
    };
    e.TimePeriod.prototype.Duration_M =
        function(b) {
            if (0 == arguments.length) return this._duration;
            if (!this._duration || !this._duration.equals(b)) {
                if (this.IsReadOnly) throw Error("Cannot set End on a ReadOnly TimePeriod.");
                this._duration = b;
                this.notifyChange("Duration", b)
            }
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.TimePeriod.prototype, "Start", {
        get: function() {
            return this._start
        },
        set: function(b) {
            if (!this._start || !Start.equals(b)) {
                if (this.IsReadOnly) throw Error("Cannot set Start on a ReadOnly TimePeriod.");
                this._start = b;
                this.notifyChange("Start",
                    b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.TimePeriod.prototype, "End", {
        get: function() {
            return this._end
        },
        set: function(b) {
            if (!this._end || !this._end.equals(b)) {
                if (this.IsReadOnly) throw Error("Cannot set Duration on a ReadOnly TimePeriod.");
                this._end = b;
                this.notifyChange("End", b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.TimePeriod.prototype, "Duration", {
        get: function() {
            return this._duration
        },
        set: function(b) {
            if (!this._duration || !this._duration.equals(b)) {
                if (this.IsReadOnly) throw Error("Cannot set End on a ReadOnly TimePeriod.");
                this._duration = b;
                this.notifyChange("Duration", b)
            }
        },
        enumerable: !0,
        configurable: !0
    }));
    e.TimePeriod.prototype.UpdateEnd = function() {
        this._end = this._start.clone().addTimeSpan(this._duration)
    };
    e.TimePeriod.prototype.UpdateDuration = function() {
        this._duration = new RadiantQ.Gantt.Utils.TimeComputingUtils.GetTimeSpan(this._start, this._end)
    };
    e.TimePeriod.prototype.Equals = function(b) {
        return this.Start_M().equals(b.Start_M()) && this._duration.equals(b._duration)
    };
    e.TimePeriod.prototype.CompareTo = function(b) {
        return this.Start.compareTo(b.Start)
    };
    e.TimePeriod.prototype.clone = function(b) {
        return new TimePeriod(b.Start, b.End, null, b.IsReadOnly)
    };
    e.TimePeriod.prototype.Intersect = function(b) {
        if (!b) return null;
        var c, a, d, g = 0 <= this._duration._totalMS,
            f = 0 <= b._duration._totalMS;
        g ? (a = this._start, d = this._end) : (a = this._end, d = this._start);
        f ? (c = b._start, b = b._end) : (c = b._end, b = b._start);
        if (a >= b || d <= c) return null;
        c = a > c ? a : c;
        d = d < b ? d : b;
        return g == f ? new RadiantQ.Gantt.TimePeriod(c, d) : new RadiantQ.Gantt.TimePeriod(d, c)
    };
    e.TimePeriod.IsPositiveDuration = function(b) {
        return 0 <=
            b._duration.totalMilliseconds_M()
    };
    e.TimePeriod.prototype.Union = function(b) {
        if (!b) return this;
        var c = RQTimeSpan.Zero_M(),
            a, d, g, f;
        this._duration >= c ? (g = this.Start_M(), f = this.End_M()) : (g = this.End_M(), f = this.Start_M());
        b._duration >= c ? (a = b.Start_M(), d = b.End_M()) : (a = b.End_M(), d = b.Start_M());
        a = g < a ? g : a;
        d = f > d ? f : d;
        return this._duration >= c == b._duration >= c ? new e.TimePeriod(a, d) : new e.TimePeriod(d, a)
    }
})();
(function(e) {
    var b = RadiantQ.Gantt;
    b.TimePeriodCollection = {};
    b.TimePeriodCollection = function(b) {
        b && !e.isArray(b) ? (this._intervals = [], this._intervals.push(b), this.Start = b._start, this.Duration = b._duration, this.Finish = b._end, this.length = 1) : (this._intervals = [], this.Start = Date.MaxValue, this.Duration = new RQTimeSpan(0, 0, 0, 0, 0, 0), this.Finish = Date.MinValue, this.length = this._intervals.length, b && this.AddRange(b));
        return this
    };
    b.TimePeriodCollection.prototype.Add = function(c) {
        c.IsReadOnly = !0;
        c._duration < RQTimeSpan.Zero_M() &&
            (c = new b.TimePeriod(c._end, c._start, null, !0));
        this.length = this._intervals.length;
        if (c._start < this.Finish)
            for (var a = 0; a < this.length; a++) {
                var d = this._intervals[a];
                if (c._end < d.Start) {
                    this._intervals.splice(a, 0, c);
                    this.length = this._intervals.length;
                    c._start < this.Start && (this.Start = c._start);
                    this.Duration = this.Duration.add(c._duration);
                    return
                }
                if (c._start < d.Start) {
                    var g = 0 < a ? this._intervals[a - 1] : null;
                    if (!g || c._start > g.Value.End) {
                        c = d.Union(c);
                        this._intervals[a] = c;
                        c.Start < this.Start && (this.Start = c.Start);
                        this.Duration = this.Duration.add(c.Duration_M().subtract(d.Duration_M()));
                        c.End > this.Finish && (this.Finish = c.End);
                        return
                    }
                    c = d.Union(g.Value);
                    this._intervals.splice(a, 1);
                    this.length = this._intervals.length;
                    this._intervals[a - 1] = c;
                    this.Duration = this.Duration.add(c.Duration.subtract(d.Duration));
                    c.End > this.Finish && (this.Finish = c.End);
                    return
                }
                if (c._start < d.End) {
                    if ((g = a < this.length - 1 ? this._intervals[a + 1] : null) && c._end < g.Start) {
                        c = d.Union(c);
                        this._intervals[a] = c;
                        this.Duration = this.Duration.add(c.Duration.subtract(d.Duration));
                        c.End > this.Finish && (this.Finish = c.End);
                        return
                    }
                    c = d.Union(g);
                    this._intervals.splice(a, 1);
                    this.length = this._intervals.length;
                    this._intervals[a] = c;
                    this.Duration = this.Duration.add(c.Duration.subtract(d.Duration));
                    c.End > this.Finish && (this.Finish = c.End);
                    return
                }
            }
        this._intervals.push(c);
        c._start < this.Start && (this.Start = c._start);
        this.Finish = c._end;
        this.Duration = this.Duration.add(c._duration)
    };
    b.TimePeriodCollection.prototype.AddRange = function(b) {
        for (var a = 0; a < b.length; a++) this.Add(b[a])
    };
    b.TimePeriodCollection.prototype.Ascending =
        function() {
            return this._intervals.sort
    };
    b.TimePeriodCollection.prototype.Descending = function() {
        this._intervals.sort();
        return this._intervals.sort()
    };
    b.TimePeriodCollection.prototype.getItemByIndex = function(b) {
        return this._intervals[b]
    };
    b.TimePeriodCollection.prototype.Count = function() {
        return this._intervals.length
    }
})(jQuery);
(function() {
    function e() {
        RadiantQ.ValueConverter.call(this)
    }
    var b = RadiantQ.Gantt;
    b.WorkTimeSchedule = {};
    b.WorkTimeSchedule.TaskResolutionInfo = {};
    RadiantQ.Gantt.guidGenerator = function() {
        var b = function() {
            return (65536 * (1 + Math.random()) | 0).toString(16).substring(1)
        };
        return b() + b() + "-" + b() + "-" + b() + "-" + b() + "-" + b() + b() + b()
    };
    b.WorkTimeSchedule = function(b, a) {
        this.IsCachingEnabled = !0;
        this._guid = RadiantQ.Gantt.guidGenerator();
        this._cachedResolvedIntervals = {};
        if (null == a) throw Error("dayCalendarProvider", "The specified CalendarProvider delegate cannot be null.");
        this.Name = b;
        this.scheduleProvider = a;
        this.WorkTimeScheduleProvider = function(a) {
            return this.scheduleProvider(a)
        };
        return this
    };
    b.WorkTimeSchedule.prototype.ClearCache = function() {
        this._cachedResolvedIntervals = {}
    };
    b.WorkTimeSchedule.CachedResolvedIntervals = function() {
        this._cachedResolvedIntervals = {}
    };
    b.WorkTimeSchedule.CachedResolvedIntervals.prototype.Add = function(b, a, d) {
        this._cachedResolvedIntervals[b._testName] || (this._cachedResolvedIntervals[b._testName] = a)
    };
    b.WorkTimeSchedule.CachedResolvedIntervals.prototype.ContainsKey =
        function(b, a) {
            return this._cachedResolvedIntervals[b._testName] ? !0 : !1
    };
    b.WorkTimeSchedule.CachedResolvedIntervals.prototype.GetIntervalsFromCache = function(b, a) {
        var d = this._cachedResolvedIntervals[b._testName];
        return d ? d : null
    };
    b.WorkTimeSchedule.CachedContWorkingTimes = function() {
        this._cachedContWorkingTimes = {}
    };
    b.WorkTimeSchedule.CachedContWorkingTimes.prototype.Add = function(b, a) {
        this._cachedContWorkingTimes[b] || (this._cachedContWorkingTimes[b] = a)
    };
    b.WorkTimeSchedule.CachedContWorkingTimes.prototype.ContainsKey =
        function(b) {
            return this._cachedContWorkingTimes[b] ? !0 : !1
    };
    b.WorkTimeSchedule.CachedContWorkingTimes.prototype.GetIntervalsFromCache = function(b) {
        return (b = this._cachedContWorkingTimes[b]) ? b : null
    };
    b.WorkTimeSchedule._cachedStdWorkingTimes = new b.WorkTimeSchedule.CachedContWorkingTimes;
    b.WorkTimeSchedule._continuousSchedule = null;
    b.WorkTimeSchedule.cachedContWorkingTimes = {};
    b.WorkTimeSchedule.prototype.GetResolvedIntervals = function(c, a, d, g, f) {
        c = c.clone();
        var h = RQTimeSpan.Zero_M();
        0 > a._totalMS && window.console &&
            console.error("requiredWorkEffort: Required work effort must be a positive TimeSpan.");
        0 > g._totalMS && window.console && console.error("maxSearchEffort: Maximum search effort must be a positive TimeSpan.");
        var k = this.IsCachingEnabled ? new b.WorkTimeSchedule.TaskResolutionInfo(c, a, d, g, f) : null;
        if (k) {
            var e = this._cachedResolvedIntervals[k._testName];
            if (e) return e
        }
        var e = [],
            l = new RadiantQ.Gantt.TimePeriod(c, null, f ? g : h.subtract(g)),
            m = !1,
            p = Date.MaxValue;
        if (f && c < p || !f && c > Date.MinValue)
            for (p = c.Date(); 0 <= a._totalMS && !m && !(f && p - c > g._totalMS || !f && c - p.clone().addDays(1) > g._totalMS); p = p.addDays(f ? 1 : -1)) {
                var q = this.WorkTimeScheduleProvider(p);
                if (null != q) {
                    if (q.Start < p || 864E5 < q.Duration._ticks) throw Error("CalendarProvider must provide time intervals that start and finish on the specified date.");
                    for (var q = q._intervals, s = 0; s < q.length && !m; s++)
                        if (workingTime = q[s], (!f || workingTime._end > l._start) && (f || workingTime._start < l._start)) {
                            var r = workingTime.Intersect(l);
                            if (!r) {
                                m = !0;
                                break
                            }
                            var t = [];
                            t.push(r);
                            if (null != d)
                                for (var x =
                                    0; x < d.length && !m; x++)
                                    if (schedule = d[x], null != schedule) {
                                        for (var w = [], r = 0; r < t.length; r++)
                                            for (var u = t[r], u = schedule.GetResolvedIntervals(u.Start, RQTimeSpan.MaxValue_M(), null, u._duration >= h ? u.Duration : new RQTimeSpan(-u.Duration.totalMilliseconds_M()), f), v = 0; v < u.length; v++) w.push(u[v]);
                                        t = w
                                    }
                            for (r = 0; r < t.length && !m; r++)
                                if (x = t[r], w = x._duration, 0 != w._totalMS || 0 >= a._totalMS) {
                                    u = a.getEqualNegative();
                                    if (f && w._totalMS > a._totalMS || !f && w._totalMS < u._totalMS) x.Duration_M(0 <= w._totalMS ? a : u), w = x._duration;
                                    0 == w._totalMS &&
                                        0 != a._totalMS || e.push(x);
                                    a = f ? a.subtract(w) : a.add(w);
                                    if (0 == a._totalMS) {
                                        m = !0;
                                        break
                                    }
                                }
                        }
                }
            }
        void 0 != k && (this._cachedResolvedIntervals[k._testName] = e);
        return e
    };
    b.WorkTimeSchedule.TwentyFourByFiveScheduleProvider = function(c) {
        c || (c = new Date);
        _cachedContWorkingTimes = b.WorkTimeSchedule.cachedContWorkingTimes;
        c = c.Date();
        var a = c.toDateString(),
            d = _cachedContWorkingTimes[a];
        return void 0 === d ? (d = c.getDay(), 0 < d && 5 >= d ? (c = new b.TimePeriodCollection(new b.TimePeriod(c, c.clone().addDays(1), new RQTimeSpan(1, 0, 0, 0, 0, 864E5))),
            _cachedContWorkingTimes[a] = c) : _cachedContWorkingTimes[a] = null) : d
    };
    b.WorkTimeSchedule.EightHoursByFiveDaysScheduleProvider = function(c) {
        c = c.Date();
        if (!b.WorkTimeSchedule._cachedStdWorkingTimes.ContainsKey(c)) {
            var a = c.getDay();
            if (0 < a && 5 >= a) return a = new b.TimePeriodCollection, a.Add(new b.TimePeriod(c.clone().addHours(8), null, new RQTimeSpan(0, 8, 0, 0, 0))), b.WorkTimeSchedule._cachedStdWorkingTimes.Add(c, a), a;
            b.WorkTimeSchedule._cachedStdWorkingTimes.Add(c, null);
            return null
        }
        return b.WorkTimeSchedule._cachedStdWorkingTimes.GetIntervalsFromCache(c)
    };
    b.WorkTimeSchedule.SearchBreakTimeSpan = new RQTimeSpan(3650, 0, 0, 0, 0);
    b.WorkTimeSchedule.prototype.GetEffort = function(c, a, d) {
        a = b.Utils.TimeComputingUtils.GetTimeSpan(c, a);
        return (new b.TimePeriodCollection(this.ConvertToNextWorkingTimeIntervals(c, RQTimeSpan.MaxValue_M(), d, a))).Duration
    };
    b.WorkTimeSchedule.prototype.GetStart = function(c, a, d) {
        return (new b.TimePeriodCollection(this.ConvertToPreviousWorkingTimeIntervals(c, a, d))).Start
    };
    b.WorkTimeSchedule.prototype.GetEnd = function(c, a, d) {
        return (new b.TimePeriodCollection(this.ConvertToNextWorkingTimeIntervals(c,
            a, d))).Finish
    };
    b.WorkTimeSchedule.prototype.ConvertToNextWorkingTime = function(b, a) {
        var d = this.ConvertToNextWorkingTimeIntervals(b, RQTimeSpan.Zero_M(), a);
        return 0 < d.length ? d[0]._start : Date.MaxValue
    };
    b.WorkTimeSchedule.prototype.ConvertToNextWorkingTimeIntervals = function(c, a, d, g) {
        return g ? this.GetResolvedIntervals(c, a, d, g, !0) : this.GetResolvedIntervals(c, a, d, b.WorkTimeSchedule.SearchBreakTimeSpan, !0)
    };
    b.WorkTimeSchedule.prototype.ConvertToPreviousWorkingTime = function(b, a) {
        var d = this.ConvertToPreviousWorkingTimeIntervals(b,
            RQTimeSpan.Zero_M(), a);
        return 0 < d.length ? d[0].Start_M() : Date.MinValue
    };
    b.WorkTimeSchedule.prototype.ConvertToPreviousWorkingTimeIntervals = function(c, a, d, g) {
        return g ? this.GetResolvedIntervals(c, a, d, g, !1) : this.GetResolvedIntervals(c, a, d, b.WorkTimeSchedule.SearchBreakTimeSpan, !1)
    };
    b.WorkTimeSchedule.prototype.ConverToPreviousWorkingTime = function(b, a) {
        var d = this.ConvertToPreviousWorkingTimeIntervals(b, RQTimeSpan.Zero_M(), a);
        return 0 < d.length ? d[0]._start : Date.MinValue
    };
    b.WorkTimeSchedule.prototype.toString =
        function() {
            return null == this.Name ? "" : this.Name
    };
    b.WorkTimeSchedule._continuousSchedule || (b.WorkTimeSchedule._continuousSchedule = new b.WorkTimeSchedule("24X5 Schedule", b.WorkTimeSchedule.TwentyFourByFiveScheduleProvider));
    b.WorkTimeSchedule.Schedule24X5 = b.WorkTimeSchedule._continuousSchedule;
    null == b.WorkTimeSchedule._cached8X5ScheduleTimes && (b.WorkTimeSchedule._cached8X5ScheduleTimes = new b.WorkTimeSchedule("8X5 Schedule", b.WorkTimeSchedule.EightHoursByFiveDaysScheduleProvider));
    b.WorkTimeSchedule.Schedule8X5 =
        b.WorkTimeSchedule._cached8X5ScheduleTimes;
    b.WorkTimeSchedule.TaskResolutionInfo = function(b, a, d, g, f) {
        this._start = b;
        b || (this._start = Date.MinValue);
        this._duration = a;
        a || (this._duration = RQTimeSpan.Zero_M());
        this._calenders = d;
        this._searchDuration = g;
        this.isForward = f;
        this._testName = "start=" + b.toString() + ", duration=" + a.toString() + ", searchDuration=" + g.toString() + ", isForward=" + f
    };
    b.WorkTimeSchedule.TaskResolutionInfo.prototype.CompareTo = function(b) {
        var a = 0;
        0 == a && (a = this._start.compareTo(b._start));
        0 == a &&
            (a = this._duration.compareTo(b._duration));
        if (0 == a && null != this._calenders && null != b._calenders && (a = this._calenders.length - b._calenders.length, a = 0 < a ? 1 : 0 > a ? -1 : 0, 0 == a))
            for (var d = 0; d < this._calenders.length; d++) {
                var g = this._calenders[d],
                    f = b._calenders[d];
                if (g != f && (null != g && null != f ? (a = g._guid - f._guid, a = 0 < a ? 1 : 0 > a ? -1 : 0) : a = null == g ? -1 : 1, 0 != a)) break
            }
        0 == a && (a = this._searchDuration.compareTo(b._searchDuration));
        0 == a && this.isForward == b.isForward && (a = 0);
        return a
    };
    b.WorkTimeSchedule.TaskResolutionInfo.prototype.equals =
        function(b) {
            if (this._testName != b._testName || this.isForward != b.isForward) return !1;
            var a = 0;
            if (0 == a && null != this._calenders && null != b._calenders && (a = this._calenders.length - b._calenders.length, a = 0 < a ? 1 : 0 > a ? -1 : 0, 0 == a))
                for (var d = 0; d < this._calenders.length; d++) {
                    var g = this._calenders[d],
                        f = b._calenders[d];
                    if (g != f && (null != g && null != f ? (a = g._guid - f._guid, a = 0 < a ? 1 : 0 > a ? -1 : 0) : a = null == g ? -1 : 1, 0 != a)) break
                }
            return 0 == a ? !0 : !1
    };
    RadiantQ.Gantt.Calendar = {};
    RadiantQ.Gantt.Calendar = function(b, a, d) {
        this.id = b;
        this.Name = this.WeekDays =
            null;
        this.HolidayList = new RadiantQ.Gantt.Dictionary;
        this._schedule = null;
        3 == arguments.length ? (this.WeekDays = a, this.id = b, this.Name = d) : 1 == arguments.length ? (this.WeekDays = this.CreateWeekDayList(arguments[0]), this.CreateCalendarFromScheduleString(arguments[0]), this.id = -1, this.Name = "") : 2 == arguments.length && (this.WeekDays = this.CreateWeekDayList(arguments[1]), this.CreateCalendarFromScheduleString(arguments[1]), this.id = -1, this.Name = arguments[0])
    };
    RadiantQ.Gantt.Calendar.prototype.Schedule_M = function() {
        null ==
            this._schedule && (this._schedule = RadiantQ.Gantt.Calendar.CreateSchedule(this));
        return this._schedule
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(RadiantQ.Gantt.Calendar.prototype, "Schedule", {
        get: function() {
            null == this._schedule && (this._schedule = RadiantQ.Gantt.Calendar.CreateSchedule(this));
            return this._schedule
        }
    });
    b.Calendar.prototype.CreateCalendarFromScheduleString = function(c) {
        var a = c.split("HOL"),
            d = null;
        a[0].replace(/[ ,;]+$/, "").split(";"); - 1 != c.indexOf("HOL") && (d = a[1].trim().replace(/[ ,;]+$/,
            "").split(";"));
        if (null != d) try {
            for (a = 0; a < d.length; a++) {
                var g = b.ExceptionDay.ParseExceptionDay(d[a]),
                    f = g.Date.getTime();
                !1 == this.HolidayList.Contains(f) && this.HolidayList.Add(f, g)
            }
        } catch (h) {
            throw Error("Invalid  Date value encountered in this Calendar definition string: " + c);
        }
    };
    b.Calendar.prototype.CreateWeekDayList = function(c) {
        c = c.toLowerCase().split("hol");
        return b.Calendar.ParseWeekDays(c[0])
    };
    b.Calendar.CreateSchedule = function(c) {
        if (c instanceof b.Calendar) return this.scheduleProvider = function(a) {
            return c.GetWorkingTimes(a)
        },
        new b.WorkTimeSchedule(c.Name, this.scheduleProvider);
        if ("string" === typeof c) {
            var a = new b.Calendar(c);
            return b.Calendar.CreateSchedule(a)
        }
    };
    b.Calendar.prototype.GetWorkingTimes = function(c) {
        var a = this.WeekDays[parseInt(Date.getDayNumberFromName(c.getDayName()))];
        if (this.IsHoliday(c)) return null;
        for (var d = new b.TimePeriodCollection, g = 0; g < a.WorkingTimes.length; g++) {
            var f = a.WorkingTimes[g],
                h = c.clone().Date();
            d.Add(new b.TimePeriod(h.addTimeSpan(f.From), h.addTimeSpan(f.To)))
        }
        return d
    };
    b.Calendar.prototype.IsHoliday =
        function(b) {
            return !1 == this.WeekDays[parseInt(Date.getDayNumberFromName(b.getDayName()))].IsWorkingDay || !0 == this.HolidayList.Contains(b.getTime())
    };
    b.Calendar.prototype.GetWorkDayWorkingTimes = function(c) {
        c = this.WeekDays[c];
        return 0 < c.WorkingTimes.length ? c.WorkingTimes : [new b.WorkDayWorkingTime(RQTimeSpan.Zero_M(), new RQTimeSpan(0, 24, 0, 0))]
    };
    b.Calendar.ParseWeekDays = function(c) {
        for (var a = c.replace(/[ ,;]+$/, "").split(";"), d = [], g = 0; 7 > g; g++) 0 == c.length ? d.push(new b.WeekDay(!0, b.Calendar.GetWorkingTimes())) :
            d.push(new b.WeekDay(!1));
        if (0 == c.length) return d;
        for (g = 0; g < a.length; g++)
            if (c = a[g], 0 != c.length) {
                c = c.trim();
                if (3 > c.length) throw Error("Encoutered a day value string: '" + c.toString() + "' that is smaller than 3 days.");
                var f = c.substring(0, 3);
                switch (f.toLowerCase()) {
                    case "sun":
                        d[0] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "mon":
                        d[1] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "tue":
                        d[2] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "wed":
                        d[3] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "thu":
                        d[4] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "fri":
                        d[5] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    case "sat":
                        d[6] = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(c.substring(3)));
                        break;
                    default:
                        throw Error("Invalid day name encountered: '" + f + "'. Expected a day name of the form 'SUN', 'MON', etc.");
                }
            }
        return d
    };
    b.Calendar.GetWorkingTimes = function(c) {
        var a = [];
        if (c) {
            c = c.trim();
            for (var d = c.split(","), g = 0; g < d.length; g++) {
                var f = d[g].trim(),
                    h = f.split(" ");
                if (2 > h.length) throw Error("Expected 2 time span strings of the form '09:00:00 17:00:00'. Encountered string '" + f + "'");
                try {
                    var k = h[0].split(":");
                    if (3 > k.length) throw Error();
                    var e = new RQTimeSpan(0, k[0], k[1], k[2])
                } catch (l) {
                    throw Error("Cannot parse working time string '" + h[0] + "'. Should be of the format 09:00:00.");
                }
                try {
                    k = h[1].split(":");
                    if (3 > k.length) throw Error();
                    var m = new RQTimeSpan(0, k[0], k[1], k[2])
                } catch (p) {
                    throw Error("Cannot parse working time string '" +
                        h[1] + "'. Should be of the format 09:00:00.");
                }
                if (m.isLessThan(e)) throw Error(string.Format("Error in '{0}' syntax. The end time for a day is earlier than the start time.", c));
                a.push(new b.WorkDayWorkingTime(e, m))
            }
        } else a.push(new b.WorkDayWorkingTime(new RQTimeSpan(0, 0, 0, 0), new RQTimeSpan(0, 24, 0, 0)));
        return a
    };
    b.Calendar.prototype.getWorkingTimesString = function(b) {
        for (var a = "", d = 0; d < b.length; d++) a += b[d].toString() + ",";
        return a.replace(/[ ,]+$/, "")
    };
    b.Calendar.prototype.toString = function() {
        for (var b =
            "", a = 0; a < this.WeekDays.length; a++) {
            var d = this.WeekDays[a];
            if (!0 == d.IsWorkingDay) switch (a) {
                case 0:
                    b += "SUN " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 1:
                    b += "MON " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 2:
                    b += "TUE " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 3:
                    b += "WED " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 4:
                    b += "THU " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 5:
                    b += "FRI " + this.getWorkingTimesString(d.WorkingTimes) + ";";
                    break;
                case 6:
                    b += "SAT " + this.getWorkingTimesString(d.WorkingTimes) + ";"
            }
        }
        if (0 < this.HolidayList.length) {
            b += "HOL ";
            for (a = 0; a < this.HolidayList.asArray.length; a++) b += this.HolidayList.asArray[a].toString("yyyy-M-d") + ";";
            b = b.replace(/[;]+$/, "").trim()
        }
        return b.trim()
    };
    e.prototype = new RadiantQ.ValueConverter;
    e.prototype.Convert = function(c, a, d, g) {
        return c ? b.Calendar.CreateSchedule(c) : null
    };
    b.StringToWorkTimeScheduleConverter = new e;
    b.WeekDay = function(b, a) {
        this.IsWorkingDay = b;
        this.WorkingTimes = a ? a : [];
        this.IsUndefined = !1
    };
    b.WeekDay.Undefined = new b.WeekDay(!0);
    b.WeekDay.Undefined.IsUndefined = !0;
    b.WeekDay.prototype.clone = function() {
        for (var b = new WeekDay(this.IsWorkingDay), a = 0; a < this.WorkingTimes.length; a++) workingTime = this.WorkingTimes[a], b.WorkingTimes.Add(workingTime.clone());
        return b
    };
    b.WorkDayWorkingTime = function(b, a) {
        this.From = b;
        this.To = a
    };
    b.WorkDayWorkingTime.clone = function() {
        return new b.WorkDayWorkingTime(this.From, this.To)
    };
    b.WorkDayWorkingTime.prototype.toString = function() {
        return this.From.toString() + " " +
            this.To.toString()
    };
    b.ExceptionDay = function(b, a, d) {
        this.Name = b;
        this.Date = a.Date();
        this.TimePeriods = d ? d : []
    };
    b.ExceptionDay.ParseExceptionDay = function(c) {
        var a = null,
            d = "",
            g = Date.MinValue;
        c = c.split("TimePeriod");
        var f = c[0].split(":");
        2 == f.length ? (a = f[1].split("-"), g = new Date(a[0], a[1] - 1, a[2]), d = f[0], a = new b.ExceptionDay(d, g)) : 1 == f.length && (a = f[0].split("-"), g = new Date(a[0], a[1] - 1, a[2]), a = new b.ExceptionDay("", g));
        2 == c.length && (a = new b.ExceptionDay(d, g, b.Calendar.GetWorkingTimes(c[1])));
        return a
    };
    b.ExceptionDay.prototype.toString =
        function() {
            var b = "",
                b = "";
            if (null != this.TimePeriods && 0 < this.TimePeriods.length) {
                for (var a = 0; a < this.TimePeriods.length; a++) b += this.TimePeriods[a].toString() + ",";
                b = " TimePeriod " + b.replace(/[,]+$/, "").trim()
            }
            a = this.Date.toString("yyyy-M-d");
            return b = "" === this.Name ? a + " " + b : this.Name + ":" + a + " " + b
    };
    RadiantQ.Gantt.addMethod(RadiantQ.Gantt, "CalendarWithExceptions", function(c, a) {
        this.WorkingDayExceptions = new RadiantQ.Gantt.Dictionary;
        this.NonWorkingdayExceptions = new b.Dictionary;
        this.ExceptionWeekDays = [];
        this.BaseCalendar =
            c;
        this.Tag = null;
        var d = this.IsBaseCalendarUndefined = !1;
        "string" === typeof c && (a = c, d = !0);
        var g = b.CalendarWithExceptions.ParseExceptionsList(a, this.WorkingDayExceptions, this.NonWorkingdayExceptions, this.ExceptionWeekDays, d);
        d && (this.IsBaseCalendarUndefined = !0, d = a.replace(g, ""), this.BaseCalendar = new RadiantQ.Gantt.Calendar(d))
    });
    RadiantQ.Gantt.addMethod(RadiantQ.Gantt, "CalendarWithExceptions", function(b, a, d, g) {
        if (7 != a.length) throw new Exception("weekDayExceptions should be a list of exactly 7 in the call to CalendarWithExceptions constructor.");
        this.BaseCalendar = b;
        this.WorkingDayExceptions = d;
        this.NonWorkingdayExceptions = g;
        this.ExceptionWeekDays = a
    });
    b.CalendarWithExceptions.ParseExceptionDays = function(c, a) {
        for (var d = 0; d < c.length; d++) {
            var g = b.ExceptionDay.ParseExceptionDay(c[d]);
            if (null != g) {
                var f = g.Date.getTime();
                !1 == a.Contains(f) && a.Add(f, g)
            }
        }
        return a
    };
    b.CalendarWithExceptions.ParseExceptionsList = function(c, a, d, g) {
        c || (c = "");
        var f = [],
            h = b.CalendarWithExceptions.splitString(c, f);
        try {
            null != f.WorkDaySpecific && b.CalendarWithExceptions.ParseExceptionDays(f.WorkDaySpecific,
                a), null != f.NonWorkDaySpecific && b.CalendarWithExceptions.ParseExceptionDays(f.NonWorkDaySpecific, d)
        } catch (k) {
            throw Error("Invalid Date format encountered in this CalendarWithException definition string: " + c);
        }
        for (c = 0; c < d.asArray.length; c++) {
            var e = d.asArray[c].Date.getTime();
            null != a.Contains(e) && a.Remove(e)
        }
        if (null != f.WeekDaySpecific) b.CalendarWithExceptions.ParseWeekDays(f.WeekDaySpecific, g);
        else
            for (c = 0; 7 > c; c++) g.push(b.WeekDay.Undefined);
        return h
    };
    b.CalendarWithExceptions.splitString = function(b,
        a) {
        var d = [],
            g = b.indexOf("WeekDaySpecific"),
            f = b.indexOf("NonWorkDaySpecific");
        b = b.replace("NonWorkDaySpecific", "__NoNWorkDay__");
        var h = b.indexOf("WorkDaySpecific");
        b = b.replace("__NoNWorkDay__", "NonWorkDaySpecific"); - 1 != g && d.push(g); - 1 != f && d.push(f); - 1 != h && d.push(h);
        g = "";
        d.sort(function(a, b) {
            return a - b
        });
        for (f = 0; f < d.length; f++) f + 1 <= d.length && (h = b.substring(d[f], d[f + 1]), -1 != h.indexOf("WeekDaySpecific") ? a.WeekDaySpecific = h.replace("WeekDaySpecific", "").replace(/[ ; ]+$/, "").trim() : -1 != h.indexOf("NonWorkDaySpecific") ?
            a.NonWorkDaySpecific = h.replace("NonWorkDaySpecific", "").replace(/[ ; ]+$/, "").trim().split(";") : -1 != h.indexOf("WorkDaySpecific") && -1 == h.indexOf("NonWorkDaySpecific") && (a.WorkDaySpecific = h.replace("WorkDaySpecific", "").replace(/[ ; ]+$/, "").trim().split(";")), g += h);
        return g
    };
    b.CalendarWithExceptions.prototype.IsHoliday = function(b) {
        if (this.WorkingDayExceptions.Contains(b.getTime())) return !1;
        if (this.NonWorkingdayExceptions.Contains(b.getTime())) return !0;
        var a = this.ExceptionWeekDays[parseInt(Date.getDayNumberFromName(b.getDayName()))];
        return !1 == a.IsUndefined ? !1 == a.IsWorkingDay ? !0 : !1 : this.BaseCalendar.IsHoliday(b)
    };
    b.CalendarWithExceptions.prototype.GetWorkingTimes = function(b) {
        var a = this.WorkingDayExceptions.GetItemByKey(b.getTime());
        if (null != a && a.TimePeriods && 0 < a.TimePeriods.length) return a.TimePeriods;
        b = parseInt(Date.getDayNumberFromName(b.getDayName()));
        return !1 == this.ExceptionWeekDays[b].IsUndefined && (a = this.ExceptionWeekDays[b].WorkingTimes, 0 < a.Count) ? a : this.BaseCalendar.GetWorkDayWorkingTimes(b)
    };
    b.CalendarWithExceptions.ParseWeekDays =
        function(c, a) {
            for (var d = c.replace(/[ ,;]+$/, "").split(";"), g = 0; 7 > g; g++) a.push(b.WeekDay.Undefined);
            if (0 == c.length) return a;
            for (g = 0; g < d.length; g++) {
                var f = d[g];
                if (0 != f.length) {
                    var h = f.trim();
                    if (3 > h.length) throw Error("Encoutered a day value string: '" + h.toString() + "' that is smaller than 3 days.");
                    f = h.substring(0, 3);
                    h = h.substring(3);
                    "nwork" == h.trim().toLowerCase() ? h = new b.WeekDay(!1) : ("" === h && (h = "00:00:00 1.00:00:00"), h = new b.WeekDay(!0, b.Calendar.GetWorkingTimes(h)));
                    switch (f.toLowerCase()) {
                        case "sun":
                            a[0] =
                                h;
                            break;
                        case "mon":
                            a[1] = h;
                            break;
                        case "tue":
                            a[2] = h;
                            break;
                        case "wed":
                            a[3] = h;
                            break;
                        case "thu":
                            a[4] = h;
                            break;
                        case "fri":
                            a[5] = h;
                            break;
                        case "sat":
                            a[6] = h;
                            break;
                        default:
                            throw Error("Invalid day name encountered: '" + f + "'. Expected a day name of the form 'SUN', 'MON', etc.");
                    }
                }
            }
            return a
    };
    b.CalendarWithExceptions.CreateWorkTimeSchedule = function(c) {
        this.scheduleProvider = function(a) {
            if (!0 == c.IsHoliday(a.Date())) return null;
            for (var d = new b.TimePeriodCollection, g = c.GetWorkingTimes(a.Date()), f = 0; f < g.length; f++) {
                var h =
                    g[f];
                d.Add(new b.TimePeriod(a.Date().addTimeSpan(h.From), a.Date().addTimeSpan(h.To), !1))
            }
            return d
        };
        return new b.WorkTimeSchedule(c.BaseCalendar.Name, this.scheduleProvider)
    };
    b.CalendarWithExceptions.Merge = function(b, a) {
        for (var d = new RadiantQ.Gantt.CalendarWithExceptions(a), g = d.WorkingDayExceptions, f = d.NonWorkingdayExceptions, d = d.ExceptionWeekDays, h = new RadiantQ.Gantt.CalendarWithExceptions(b.BaseCalendar, b.toString()), k = 0; k < g.keys.length; k++) {
            var e = g.keys[k],
                l = g.GetItemByKey(e),
                m = l.Date.getTime();
            !0 == h.NonWorkingdayExceptions.Contains(m) && h.NonWorkingdayExceptions.Remove(m);
            !1 == h.WorkingDayExceptions.Contains(e) && h.WorkingDayExceptions.Add(e, l)
        }
        for (k = 0; k < f.keys.length; k++) e = f.keys[k], l = f.GetItemByKey(e), l.Date.getTime(), !0 == h.WorkingDayExceptions.Contains(e) && h.WorkingDayExceptions.Remove(e), !1 == h.NonWorkingdayExceptions.Contains(e) && h.NonWorkingdayExceptions.Add(e, l);
        for (k = 0; k < d.length; k++) g = d[k], !1 == g.IsUndefined && h.ExceptionWeekDays.splice(k, 1, g);
        return h
    };
    b.CalendarWithExceptions.prototype.toString =
        function() {
            for (var b = "", a = "", d = "", g = "", f = 0; f < this.WorkingDayExceptions.asArray.length; f++) b += this.WorkingDayExceptions.asArray[f].toString() + ";";
            b.trim();
            for (f = 0; f < this.NonWorkingdayExceptions.asArray.length; f++) a += this.NonWorkingdayExceptions.asArray[f].toString() + ";";
            a.trim();
            for (var h = !0, f = 0; f < this.ExceptionWeekDays.length && (h = this.ExceptionWeekDays[f].IsUndefined, h); f++);
            if (!1 == h)
                for (d += " WeekDaySpecific ", f = 0; f < this.ExceptionWeekDays.length; f++) {
                    var h = this.ExceptionWeekDays[f],
                        k = Date.CultureInfo.dayNames[f].substring(0,
                            3);
                    if (!1 == h.IsUndefined)
                        if (!0 == h.IsWorkingDay) {
                            for (var e = "", l = 0; l < h.WorkingTimes.length; l++) e += h.WorkingTimes[l].toString() + ",";
                            e = e.replace(/[,]+$/, "").trim();
                            d += k + " " + e + ";"
                        } else d += k + " NWork;"
                }
            "" != b && (g += "WorkDaySpecific " + b);
            "" != a && (g += " NonWorkDaySpecific " + a);
            "" != d && (g += d);
            return g.trim()
    };
    b.SubCalendar = function(b, a) {
        this.Calendar = b;
        this.CalendarValidUntil = a;
        this.IsValidDateUndefined = !1;
        void 0 == a && (this.CalendarValidUntil = Date.MaxValue, this.IsValidDateUndefined = !0)
    };
    b.SubCalendarList = function() {
        b.Dictionary.call(this);
        this.OnCollectionChanged = function() {
            this._keys = this.Keys.slice(0).sort();
            b.Dictionary.prototype.OnCollectionChanged.apply(this, arguments)
        };
        this.IsHoliday = function(b) {
            return this.getSubCalendar(b).Calendar.IsHoliday(b)
        };
        this.getSubCalendar = function(b) {
            for (var a = Date.MinValue, d = 0; d < this._keys.length; d++) {
                var g = this._keys[d];
                if (g.equals(b) || g.isGreaterThan(b)) {
                    a = g;
                    break
                }
            }
            return this.GetItemByKey(a)
        };
        this.GetWorkDayWorkingTimes = function(b) {
            var a = this.getSubCalendar(b);
            b = parseInt(Date.getDayNumberFromName(b.getDayName()));
            return a.Calendar.GetWorkDayWorkingTimes(b)
        }
    };
    b.SubCalendarList.prototype = new b.Dictionary;
    b.CombinedCalendarWithExceptions = function(c, a) {
        this.SubCalendars = c;
        this.WorkingDayExceptions = new b.Dictionary;
        this.NonWorkingdayExceptions = new b.Dictionary;
        this.ExceptionWeekDays = [];
        this.Tag = null;
        b.CalendarWithExceptions.ParseExceptionsList(a, this.WorkingDayExceptions, this.NonWorkingdayExceptions, this.ExceptionWeekDays)
    };
    b.CombinedCalendarWithExceptions.prototype.IsHoliday = function(b) {
        if (this.WorkingDayExceptions.Contains(b.getTime())) return !1;
        if (this.NonWorkingdayExceptions.Contains(b.getTime())) return !0;
        var a = this.ExceptionWeekDays[parseInt(Date.getDayNumberFromName(b.getDayName()))];
        return !1 == a.IsUndefined ? !1 == a.IsWorkingDay ? !0 : !1 : this.SubCalendars.IsHoliday(b)
    };
    b.CombinedCalendarWithExceptions.prototype.GetWorkingTimes = function(b) {
        var a = this.WorkingDayExceptions.GetItemByKey(b.getTime());
        if (null != a && a.TimePeriods && 0 < a.TimePeriods.length) return a.TimePeriods;
        a = parseInt(Date.getDayNumberFromName(b.getDayName()));
        return !1 == this.ExceptionWeekDays[a].IsUndefined &&
            (a = this.ExceptionWeekDays[a].WorkingTimes, 0 < a.Count) ? a : this.SubCalendars.GetWorkDayWorkingTimes(b)
    };
    b.CombinedCalendarWithExceptions.prototype.GetCalendarName = function(b) {
        b = this.SubCalendars.getSubCalendar(b);
        return null != b ? b.Calendar.Name : ""
    };
    b.CombinedCalendarWithExceptions.CreateWorkTimeSchedule = function(c) {
        this.scheduleProvider = function(a) {
            if (!0 == c.IsHoliday(a.Date())) return null;
            for (var d = new b.TimePeriodCollection, g = c.GetWorkingTimes(a.Date()), f = 0; f < g.length; f++) {
                var h = g[f];
                d.Add(new b.TimePeriod(a.Date().addTimeSpan(h.From),
                    a.Date().addTimeSpan(h.To), !1))
            }
            return d
        };
        return new b.WorkTimeSchedule(c.GetCalendarName(new Date), this.scheduleProvider)
    }
})();
(function() {
    var e = RadiantQ.Gantt.DependencyType;
    RadiantQ.Gantt.ValueConverters = {};
    RadiantQ.Gantt.ValueConverters.ConverterUtils = {};
    RadiantQ.Gantt.ValueConverters.ConverterUtils.GetResourcesText = function(b, c, a) {
        for (var d = "", g = 0; g < b.length; g++) var f = b[g],
        h = f.Resource_M(), h = c ? h.ResourceID_M() : h.ResourceName_M(), d = d + (h + " " + RadiantQ.Gantt.ValueConverters.ConverterUtils.AllocationUnitText(f, a)), d = d.trim(), d = d + ",";
        return d.trimEnd(",")
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.GetAssignedResourceInstances =
        function(b) {
            for (var c = [], a = 0; a < b.length; a++) {
                var d = d[a];
                c.push(d.Resource_M())
            }
            return c
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.AllocationUnitText = function(b, c) {
        var a = b.AllocationUnits_M();
        if (100 == a) return "";
        a = 100 * (a / 100);
        return "[" + (c ? Math.round(a).toString() : a.toString()) + "%]"
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.GetMissingResourceKeys = function(b, c) {
        var a = [];
        if (void 0 != b && null != b && "" != b)
            for (var d = b.split(","), g = d.length, f = 0; f < g; f++) {
                var h = d[f],
                    k = h; - 1 != k.indexOf("[") && (this.ParseAllocUnitsString(k.substring(h.indexOf("["))),
                        k = h.substring(0, k.indexOf("[")));
                k = k.trim();
                h = c[k];
                null == h && (h = c.GetResourceByName(k.trim()));
                null == h && 0 < k.length && a.push(k)
            }
        return a
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.ConvertResourceTextToAssignments = function(b, c, a) {
        var d = new RadiantQ.Gantt.Model.ResourceAssignmentCollection(null);
        if (b) {
            var g = b.split(",");
            for (b = 0; b < g.length; b++) {
                var f = g[b],
                    h = f,
                    k = 100; - 1 != h.indexOf("[") && (k = this.ParseAllocUnitsString(h.substring(f.indexOf("["))), h = f.substring(0, h.indexOf("[")));
                f = c._resByID[h.trim()];
                null == f && (f = c.GetResourceByName(h.trim()));
                f && !1 == d.ContainsResource(f) && d.add(new RadiantQ.Gantt.Model.ResourceAssignment(f, k))
            }
        }
        if (!1 == this.IsContentEqual(d, a)) {
            c = new RadiantQ.Gantt.Utils.DelayUpdates;
            a.clear();
            for (b = 0; b < d.length; b++) a.add(d[b]);
            c.Dispose()
        }
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.ConvertSelectedResourcesToAssignments = function(b, c) {
        for (var a = new RadiantQ.Gantt.Model.ResourceAssignmentCollection(null), d = 0; d < b.length; d++) {
            var g = b[d];
            !1 == a.ContainsResource(g) && a.add(new RadiantQ.Gantt.Model.ResourceAssignment(g))
        }
        if (!1 ==
            this.IsContentEqual(a, c)) {
            g = new RadiantQ.Gantt.Utils.DelayUpdates;
            c.clear();
            for (d = 0; d < a.length; d++) c.add(a[d]);
            g.Dispose()
        }
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.IsContentEqual = function(b, c) {
        if (b.length != c.length) return !1;
        for (var a = 0; a < b.length; a++)
            if (b[a] != c[a] || b[a].AllocationUnits_M() != c[a].AllocationUnits_M()) return !1;
        return !0
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.ParseAllocUnitsString = function(b) {
        b = b.trim(" ", "[", "]", "%");
        var c = 100;
        return c = parseFloat(b)
    };
    RadiantQ.Gantt.ValueConverters.ConverterUtils.AddAssignmentToActivity =
        function(b, c) {
            var a = b.Assignments_M(),
                d = b.Model.GanttResources_M().getResourceByID(c);
            d && !1 == a.ContainsResource(d) && a.add(new RadiantQ.Gantt.Model.ResourceAssignment(d))
    };
    RadiantQ.Gantt.ValueConverters.ParentViewToIndentConverter = {
        Convert: function(b, c, a) {
            return null == b ? 0 : b + 1
        },
        ConvertBack: function() {
            throw Error("Not Implemented");
        }
    };
    RadiantQ.Gantt.ValueConverters.SortIDAsPredIDConverter = {
        GC: null,
        Convert: function(b, c, a) {
            if (null == b) return b;
            c = [];
            a = [];
            var d = [],
                g = this.GC.options.LagStringUnitsInHours;
            RadiantQ.Gantt.Model.DataBoundGanttModel.ProcessPredecessorString(b, g, c, a, d, []);
            b = "";
            if (0 < c.length)
                for (var f = 0; f < c.length; f++) {
                    var h = this.GC.Model.GetActivityById(c[f]);
                    null != h && (h = this.CreateDepStringFor(h.SortOrder_M(), a[f], d[f], g), b += h, b += ",")
                }
            return b.trimEnd(",")
        },
        ConvertBack: function(b, c, a) {
            c = [];
            a = [];
            var d = [],
                g = this.GC.options.LagStringUnitsInHours;
            RadiantQ.Gantt.Model.DataBoundGanttModel.ProcessPredecessorString(b.toString(), g, c, a, d, "");
            b = "";
            if (0 < c.length)
                for (var f = 0; f < c.length; f++) {
                    var h =
                        this.GetActivityFromSortID(c[f]);
                    null != h && (h = this.CreateDepStringFor(h.ID_M(), a[f], d[f], g), b += h, b += ",")
                }
            return b.trimEnd(",")
        },
        CreateDepStringFor: function(b, c, a, d) {
            var g = RQTimeSpan.Zero_M();
            b = b.toString();
            switch (c) {
                case e.FinishToFinish:
                    b += "FF";
                    break;
                case e.StartToFinish:
                    b += "SF";
                    break;
                case e.StartToStart:
                    b += "SS"
            }
            a.isGreaterThan(g) ? b += "+" + (a.getTotalHours() / d).toString() : a.isLessThan(g) && (b += "-" + (-(a.getTotalHours() / d)).toString());
            return b
        },
        GetActivityFromSortID: function(b) {
            return this.RecursivelyFindSortID(this.GC.Model.Activities_M(),
                b)
        },
        RecursivelyFindSortID: function(b, c) {
            for (var a = 0; a < b.length; a++) {
                var d = b[a];
                if (d.SortOrder_M() == c) return d;
                d = d.ChildActivities_M();
                if (null != d && 0 < d.length && (d = this.RecursivelyFindSortID(d, c), null != d)) return d
            }
            return null
        }
    }
})();
(function() {
    var e = RadiantQ.Gantt.Model = {};
    RadiantQ.Gantt.Model.IGanttModel = function() {
        this.OnPropertyChanged = function(b, c) {
            "Start" == b && UpdateEnd()
        };
        this.GetNewID || (this.GetNewID = function() {});
        this._lagStringUnitsInHours = null;
        this.canShiftInProgressTasks = this.autoCalculateSummaryTaskTimes = !1;
        return this
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.LagStringUnitsInHours_M = function(b) {
        if (0 == arguments.length) return this._lagStringUnitsInHours;
        this._lagStringUnitsInHours != b && (this._lagStringUnitsInHours =
            b)
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.AllActivities_M = function() {
        return this._dictActivityById
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.Activities_M = function() {
        return this._activities
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.Dependencies_M = function() {
        return this._dependencies
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.GanttResources_M = function() {
        return this._resources
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.WorkTimeSchedule_M = function(b) {
        if (0 == arguments.length) return this._schedule;
        this._schedule != b && (this._schedule = b, this.OnPropertyChanged("WorkTimeSchedule"))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.EnforceDependencyConstraints_M = function(b) {
        if (0 == arguments.length) return this.enforceDependencyConstraints;
        b != this.enforceDependencyConstraints && (this.enforceDependencyConstraints = b, this.OnPropertyChanged("EnforceDependencyConstraints", b))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.ValidateDependencySetting_M = function(b) {
        if (0 == arguments.length) return this.validateDependencySetting;
        b != this.validateDependencySetting && (this.validateDependencySetting = b, this.OnPropertyChanged("ValidateDependencySetting", b))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.AutoCalculateSummaryTaskTimes_M = function(b) {
        if (0 == arguments.length) return this.autoCalculateSummaryTaskTimes;
        b != this.autoCalculateSummaryTaskTimes && (this.autoCalculateSummaryTaskTimes = b, this.OnPropertyChanged("AutoCalculateSummaryTaskTimes", b))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.CanShiftInProgressTasks_M = function(b) {
        if (0 ==
            arguments.length) return this.canShiftInProgressTasks;
        b != this.canShiftInProgressTasks && (this.canShiftInProgressTasks = b, this.OnPropertyChanged("CanShiftInProgressTasks", b))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.AdjustDurationOnAssignment_M = function(b) {
        if (0 == arguments.length) return this.adjustDurationOnAssignment;
        b != this.adjustDurationOnAssignment && (this.adjustDurationOnAssignment = b, this.OnPropertyChanged("AdjustDurationOnAssignment", b))
    };
    RadiantQ.Gantt.Model.IGanttModel.prototype.CustomProgressCalculation_M =
        function() {
            return this._customProgressCalculation
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "LagStringUnitsInHours", {
        get: function() {
            return this.LagStringUnitsInHours_M()
        },
        set: function(b) {
            this.LagStringUnitsInHours_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "AllActivities", {
        get: function() {
            return this.AllActivities_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype,
        "Activities", {
            get: function() {
                return this.Activities_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "Dependencies", {
        get: function() {
            return this.Dependencies_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "GanttResources", {
        get: function() {
            return this.GanttResources_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype,
        "WorkTimeSchedule", {
            get: function() {
                return this.WorkTimeSchedule_M()
            },
            set: function(b) {
                this.WorkTimeSchedule_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "EnforceDependencyConstraints", {
        get: function() {
            return this.EnforceDependencyConstraints_M()
        },
        set: function(b) {
            this.EnforceDependencyConstraints_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "ValidateDependencySetting", {
        get: function() {
            return this.ValidateDependencySetting_M()
        },
        set: function(b) {
            this.ValidateDependencySetting_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "AutoCalculateSummaryTaskTimes", {
        get: function() {
            return this.AutoCalculateSummaryTaskTimes_M()
        },
        set: function(b) {
            this.AutoCalculateSummaryTaskTimes_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "CanShiftInProgressTasks", {
        get: function() {
            return this.CanShiftInProgressTasks_M()
        },
        set: function(b) {
            this.CanShiftInProgressTasks_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "AdjustDurationOnAssignment", {
        get: function() {
            return this.AdjustDurationOnAssignment_M()
        },
        set: function(b) {
            this.AdjustDurationOnAssignment_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "CustomProgressCalculation", {
        get: function() {
            return this.CustomProgressCalculation_M()
        },
        enumerable: !0,
        configurable: !0
    }));
    RadiantQ.Gantt.Model.IGanttModel.prototype.GetNewSortOrder =
        function() {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.CreateNewActivity = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.CreateNewDependency = function(b, c, a, d) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.RemoveActivity = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.CanAddNewDependency = function(b, c, a) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.PrepareParenting = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ConvertToValidTimes = function(b, c, a, d, g) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ConvertToValidStartTime =
        function(b, c, a) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.GetStart = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ApplyPreferredStartTimeOnActivity = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.AdjustStartTimeWithEffort = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.AdjustStartTime = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.AdjustEffort = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ComputeEndTime = function(b) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ComputeDuration =
        function(b) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ComputeEffort = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.ConvertDurationToEffort = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.UpdateSortOrderFrom = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.UpdateSortOrders = function() {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.GetCriticalActivities = function(b) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.LevelResources = function(b, c) {};
    RadiantQ.Gantt.Model.IGanttModel.prototype.Filter =
        function(b, c) {};
    RadiantQ.Gantt.Model.IActivity = function() {
        NotifyPropertyChanged.call(this);
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this.VerticalPositionChanged = new ObjectEvent("VerticalPositionChanged");
        this._assignments = [];
        this.propertiesDict = [];
        this.ChildCollectionChanged = new ObjectEvent("ChildCollectionChanged");
        this.AdjustStartTimeForConstraints = new ObjectEvent("AdjustStartTimeForConstraints");
        this.isIActivity = !0;
        this.id = 0;
        this._sortOrder = -1;
        this._prefStartTime = this._startTime =
            Date.MinValue;
        this._effort = RQTimeSpan.Zero_M();
        this._cumEffort = RQTimeSpan.Zero_M();
        this._progressPercent = 0;
        this._isMilestone = !1;
        this._isVisible = this._isExpanded = !0;
        this._isFilteredOut = !1;
        this._displayIndex = -1;
        return this
    };
    RadiantQ.Gantt.Model.IActivity.prototype = new NotifyPropertyChanged;
    RadiantQ.Gantt.Model.IActivity.prototype.OnPropertyChanged = function(b, c) {
        this.PropertyChanged.raise(this, {
            PropertyName: b,
            Value: c
        })
    };
    RadiantQ.Gantt.Model.IActivity.prototype.OnVerticalPositionChanged = function() {
        this.VerticalPositionChanged.raise(this, {})
    };
    RadiantQ.Gantt.Model.IActivity.prototype.ID_M = function(b) {
        if (0 == arguments.length) return this.id;
        if (this.id != b) {
            var c = this.id;
            this.id = b;
            this.OnPropertyChanged("ID", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.ActivityName_M = function(b) {
        if (0 == arguments.length) return this._name;
        var c = this._name;
        this._name = b;
        this.OnPropertyChanged("ActivityName", c, b)
    };
    RadiantQ.Gantt.Model.IActivity.prototype.SortOrder_M = function(b) {
        if (0 == arguments.length) return this._sortOrder;
        if (b && this._sortOrder != b) {
            var c =
                this._sortOrder;
            this._sortOrder = b;
            this.OnPropertyChanged("SortOrder", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.StartTime_M = function(b) {
        if (0 == arguments.length) return this._startTime;
        this._startTime.equals(b) || (this._startTime = b)
    };
    RadiantQ.Gantt.Model.IActivity.prototype.PreferredStartTime_M = function(b) {
        if (0 == arguments.length) return null == this._prefStartTime || void 0 == this._prefStartTime ? this.Model.ProjectStartDate : this._prefStartTime;
        if (!(this._prefStartTime && b && this._prefStartTime.equals(b))) {
            var c =
                this._prefStartTime;
            this._prefStartTime = b;
            this.OnPropertyChanged("PreferredStartTime", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.Effort_M = function(b) {
        if (0 == arguments.length) return this._effort;
        this._effort != b && (this._effort = b)
    };
    RadiantQ.Gantt.Model.IActivity.prototype.Times_M = function() {
        var b = this.Parent_M();
        return null == b ? !0 : b.IsExpanded_M()
    };
    RadiantQ.Gantt.Model.IActivity.prototype.PredecessorIndexString_M = function(b) {
        if (0 == arguments.length) return this._predecssorIndexString;
        if (this._predecssorIndexString !=
            b) {
            var c = this._predecssorIndexString;
            this._predecssorIndexString = b;
            this.OnPropertyChanged("PredecessorIndexString", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.CumulativeEffort_M = function(b) {
        if (0 == arguments.length) {
            var c = this.ChildActivities_M();
            return c && 0 != c.length ? this._cumEffort : this._effort
        }
        this._cumEffort != b && (c = this._cumEffort, this._cumEffort = b, this.OnPropertyChanged("CumulativeEffort", c, b))
    };
    RadiantQ.Gantt.Model.IActivity.prototype.ProgressPercent_M = function(b) {
        if (0 == arguments.length) return this._progressPercent ||
            (this._progressPercent = 0), this._progressPercent;
        if (this._progressPercent != b) {
            0 > b && (b = 0);
            100 < b && (b = 100);
            var c = parseInt(b),
                a = this._progressPercent;
            this._progressPercent = isNaN(c) ? 0 : c;
            this.OnPropertyChanged("ProgressPercent", a, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.ProgressEndTime_M = function() {
        var b = this.StartTime_M();
        if (b == Date.MaxValue || b == Date.MinValue) return b;
        var c = this.ProgressPercent_M();
        if (0 >= c) return b;
        var a = this.GetWorkingHoursTimeSpan(),
            c = new RQTimeSpan(0, 0, c / 100 * a.getTotalMinutes(),
                0),
            a = this.Schedule_M();
        return e.BaseGanttModel.ComputeEndTime(b, c, null != a ? a : this.Model.WorkTimeSchedule_M())
    };
    RadiantQ.Gantt.Model.IActivity.prototype.Description_M = function(b) {
        if (0 == arguments.length) return this._description;
        b != this._description && (this._description = b, this.OnPropertyChanged("Description", b))
    };
    RadiantQ.Gantt.Model.IActivity.prototype.Parent_M = function(b) {
        if (0 == arguments.length) return this._parent;
        if (this._parent != b) {
            var c = this._parent;
            this._parent = b;
            this.IsVisible_M(this.IsParentExpanded_M() &&
                this.IsParentVisible_M());
            this.OnPropertyChanged("Parent", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.IsMilestone_M = function(b) {
        if (0 == arguments.length) return this._isMilestone;
        if (this._isMilestone != b) {
            var c = this._isMilestone;
            this._isMilestone = b;
            this.OnPropertyChanged("IsMilestone", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.IsExpanded_M = function(b) {
        if (0 == arguments.length) return this._isExpanded;
        if (this._isExpanded != b) {
            var c = this._isExpanded;
            this._isExpanded = b;
            for (var a = this.ChildActivities_M(),
                    d = this.IsVisible_M(), g = 0; g < a.length; g++) a[g].IsVisible_M(this._isExpanded && d);
            this.OnPropertyChanged("IsExpanded", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.IsVisible_M = function(b) {
        if (0 == arguments.length) return this._isVisible & !this._isFilteredOut;
        if (this._isVisible != b) {
            var c = this._isVisible;
            this._isVisible = b;
            for (var a = this.ChildActivities_M(), d = this.IsVisible_M(), g = 0; g < a.length; g++) a[g].IsVisible_M(this._isExpanded && d);
            this.OnPropertyChanged("IsVisible", c, d)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.IsFilteredOut_M =
        function(b) {
            if (0 == arguments.length) return this._isFilteredOut;
            if (this._isFilteredOut != b) {
                var c = this._isFilteredOut;
                this._isFilteredOut = b;
                this.OnPropertyChanged("IsFilteredOut", c, b);
                this.OnPropertyChanged("IsVisible", c, b)
            }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.DisplayIndex_M = function(b) {
        if (0 == arguments.length) return this._displayIndex;
        if (this._displayIndex != b) {
            var c = this._displayIndex;
            this._displayIndex = b;
            this.OnVerticalPositionChanged();
            this.OnPropertyChanged("DisplayIndex", c, b)
        }
    };
    RadiantQ.Gantt.Model.IActivity.prototype.Schedule_M =
        function(b) {
            if (0 == arguments.length) return this._schedule;
            if (this._schedule != b) {
                var c = this._schedule;
                this._schedule = b;
                this.OnPropertyChanged("Schedule", c, b)
            }
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "ID", {
            get: function() {
                return this.ID_M()
            },
            set: function(b) {
                this.ID_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "ActivityName", {
            get: function() {
                return this.ActivityName_M()
            },
            set: function(b) {
                this.ActivityName_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "SortOrder", {
            get: function() {
                return this.SortOrder_M()
            },
            set: function(b) {
                this.SortOrder_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "StartTime", {
            get: function() {
                return this.StartTime_M()
            },
            set: function(b) {
                this.StartTime_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "PreferredStartTime", {
            get: function() {
                return this.PreferredStartTime_M()
            },
            set: function(b) {
                this.PreferredStartTime_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "Effort", {
            get: function() {
                return this.Effort_M()
            },
            set: function(b) {
                this.Effort_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "Times", {
            get: function() {
                return this.Times_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "PredecessorIndexString", {
            get: function() {
                return this.PredecessorIndexString_M()
            },
            set: function(b) {
                this.PredecessorIndexString_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "CumulativeEffort", {
            get: function() {
                return this.CumulativeEffort_M()
            },
            set: function(b) {
                this.CumulativeEffort_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "ProgressPercent", {
            get: function() {
                return this.ProgressPercent_M()
            },
            set: function(b) {
                this.ProgressPercent_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "Schedule", {
            get: function() {
                return this.Schedule_M()
            },
            set: function(b) {
                this.Schedule_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "ProgressEndTime", {
            get: function() {
                return this.ProgressEndTime_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "Description", {
            get: function() {
                return this.Description_M()
            },
            set: function(b) {
                this.Description_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "Parent", {
            get: function() {
                return this.Parent_M()
            },
            set: function(b) {
                this.Parent_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "IsMilestone", {
            get: function() {
                return this.IsMilestone_M()
            },
            set: function(b) {
                this.IsMilestone_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype,
            "IsExpanded", {
                get: function() {
                    return this.IsExpanded_M()
                },
                set: function(b) {
                    this.IsExpanded_M(b)
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "IsVisible", {
            get: function() {
                return this.IsVisible_M()
            },
            set: function(b) {
                this.IsVisible_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "IsFilteredOut", {
            get: function() {
                return this.IsFilteredOut_M()
            },
            set: function(b) {
                this.IsFilteredOut_M(b)
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(RadiantQ.Gantt.Model.IActivity.prototype, "DisplayIndex", {
            get: function() {
                return this.DisplayIndex_M()
            },
            set: function(b) {
                this.DisplayIndex_M(b)
            },
            enumerable: !0,
            configurable: !0
        }));
    RadiantQ.Gantt.Model.IActivity.prototype.GetWorkingHoursTimeSpan = function() {};
    RadiantQ.Gantt.Model.IActivity.prototype.ShiftForwardTo = function(b) {};
    RadiantQ.Gantt.Model.IActivity.prototype.CreateNewChildActivity = function(b) {};
    RadiantQ.Gantt.Model.IActivity.prototype.OnAddedPredecessorDependency = function(b) {};
    RadiantQ.Gantt.Model.IActivity.prototype.OnRemovedPredecessorDependency = function(b) {};
    RadiantQ.Gantt.Model.IActivity.prototype.IsCritical = function(b, c, a) {};
    RadiantQ.Gantt.Model.IActivity.prototype.GetScheduleToPlotWith = function(b) {};
    RadiantQ.Gantt.Model.IActivity.prototype.Dispose = function() {
        this.PropertyChanged && this.PropertyChanged.Dispose();
        this.VerticalPositionChanged && this.VerticalPositionChanged.Dispose();
        this.ChildCollectionChanged && this.ChildCollectionChanged.Dispose();
        this.AdjustStartTimeForConstraints &&
            this.AdjustStartTimeForConstraints.Dispose();
        this.AdjustStartTimeForConstraints = this.ChildCollectionChanged = this.VerticalPositionChanged = this.PropertyChanged = null
    };
    RadiantQ.Gantt.Model.IActivityDependency = function() {
        this.OnPropertyChanged = function(b, c) {
            this.PropertyChanged.raise(this, {
                PropertyName: b,
                Value: c
            })
        };
        return this
    };
    RadiantQ.Gantt.Model.IActivityDependency.prototype.FromActivity_M = function() {
        return this._fromActivity
    };
    RadiantQ.Gantt.Model.IActivityDependency.prototype.ToActivity_M = function() {
        return this._toActivity
    };
    RadiantQ.Gantt.Model.IActivityDependency.prototype.Type_M = function(b) {
        if (0 == arguments.length) return this._type;
        this._type = b;
        this.OnPropertyChanged("Type", b)
    };
    RadiantQ.Gantt.Model.IActivityDependency.prototype.Lag_M = function(b) {
        if (0 == arguments.length) return this._lag;
        this._lag = b;
        this.OnPropertyChanged("Lag", b)
    };
    RadiantQ.Gantt.Model.IActivityDependency.prototype.Tag_M = function(b) {
        if (0 == arguments.length) return this._tag;
        this._tag = b;
        this.OnPropertyChanged("Tag", b)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.Model.IActivityDependency.prototype,
        "FromActivity", {
            get: function() {
                return this.FromActivity_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivityDependency.prototype, "ToActivity", {
        get: function() {
            return this.ToActivity_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IActivityDependency.prototype, "Type", {
        get: function() {
            return this.Type_M()
        },
        set: function(b) {
            this.Type_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IActivityDependency.prototype,
        "Lag", {
            get: function() {
                return this.Lag_M()
            },
            set: function(b) {
                this.Lag_M(b)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.Model.IActivityDependency.prototype, "Tag", {
        get: function() {
            return this.Tag_M()
        },
        set: function(b) {
            this.Tag_M(b)
        },
        enumerable: !0,
        configurable: !0
    }));
    RadiantQ.Gantt.Model.IActivityDependency.prototype.ComputeLatestToActivityStartTime = function() {};
    RadiantQ.Gantt.Model.IActivityDependency.prototype.EnsureActivityOrder = function() {};
    RadiantQ.Gantt.Model.IGanttResource =
        function() {
            this.PropertyChanged = new ObjectEvent("PropertyChanged");
            return this
    };
    RadiantQ.Gantt.Model.IGanttResource.prototype.ResourceName_M = function(b) {
        if (0 == arguments.length) return this._resNamebinder ? this._resNamebinder.Value_M() : this._resIDbinder ? this._resIDbinder.Value_M() : this._boundObj ? this._boundObj.toString() : "";
        this.ResourceName_M() != b && null != this._resNamebinder && this._resNamebinder.Value_M(b)
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(RadiantQ.Gantt.Model.IGanttResource.prototype,
        "ResourceName", {
            get: function() {
                return this.ResourceName_M()
            },
            set: function(b) {
                this.ResourceName_M(b)
            },
            enumerable: !0,
            configurable: !0
        });
    RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs = function(b, c, a, d) {
        this._activity = b || null;
        this.NewWBSID_M(c || "");
        this._collection = d || [];
        this.childIndex = a || -1
    };
    RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs.prototype.Activity_M = function() {
        return this._activity
    };
    RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs.prototype.NewWBSID_M = function(b) {
        if (0 == arguments.length) return this.newWbs;
        this.newWbs = b
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs.prototype, "Activity", {
        get: function() {
            return this.Activity_M()
        }
    }), Object.defineProperty(RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs.prototype, "NewWBSID", {
        get: function() {
            return this.NewWBSID_M()
        },
        set: function(b) {
            this.NewWBSID_M(b)
        }
    }));
    RadiantQ.Gantt.Model.ProvideDefaultWBSIDEventArgs.prototype.GetActivityChildIndex = function() {
        return -1 != this.childIndex ? this.childIndex : this._collection.indexOf(this._activity)
    };
    RadiantQ.Gantt.Model.EnforceDependencyConstraintsEventArgs = function(b) {
        this._enforce = !0;
        this._activity = b
    };
    RadiantQ.Gantt.Model.EnforceDependencyConstraintsEventArgs.prototype.Activity_M = function() {
        return this._activity
    };
    RadiantQ.Gantt.Model.EnforceDependencyConstraintsEventArgs.prototype.Enforce_M = function(b) {
        if (0 == arguments.length) return this._enforce;
        this._enforce = b
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.Model.EnforceDependencyConstraintsEventArgs.prototype, "Activity", {
        get: function() {
            return this.Activity_M()
        }
    }), Object.defineProperty(RadiantQ.Gantt.Model.EnforceDependencyConstraintsEventArgs.prototype, "Enforce", {
        get: function() {
            return this.Enforce_M()
        },
        set: function(b) {
            this.Enforce_M(b)
        }
    }))
})();
(function(e) {
    var b = RadiantQ.Gantt.Model;
    b.ResourceLoadTracker = function(c, a) {
        this._resourceLoadLists = this._model = null;
        this._enableRoundingToDays = !0;
        this._enableRoundingToDays = a;
        null == c && alert("model cannot be null in ResourceLoadTracker constructor.");
        this._model = c;
        this._resourceLoadLists = new RadiantQ.Gantt.Dictionary;
        for (var d = this._model.GanttResources_M(), g = 0; g < d.length; g++) {
            var f = d[g],
                h = new b.ResourceLoadList(f, this._model, this._dispatcher, this._enableRoundingToDays);
            this._resourceLoadLists.Add(f,
                h)
        }
    };
    b.ResourceLoadTracker.prototype.ResourceLoadLists_M = function() {
        return this._resourceLoadLists
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(b.ResourceLoadTracker.prototype, "ResourceLoadLists", {
        get: function() {
            return this._resourceLoadLists
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    });
    b.LoadInfo = function(b, a, d) {
        this.TimePeriod = new RadiantQ.Gantt.TimePeriod(b, null, new RQTimeSpan(a - b));
        this.LoadPerc = d
    };
    b.LoadInfo.prototype.ToString = function() {
        return "Start: " + this.TimePeriod.Start_M() +
            ", End: " + this.TimePeriod.End_M() + ", Load: " + this.LoadPerc
    };
    b.ResourceLoadList = function(b, a, d, g) {
        this._enableRoundToDays = g;
        this._model = a;
        this._resource = b;
        this._orderedLoadInfos = new RadiantQ.RQ_ObservableCollection([]);
        this._temLoadLists = new RadiantQ.RQ_ObservableCollection([]);
        this.refreshTimer = null;
        this._dispatcher = d;
        this._activities = a.GetResourceActivityList(b.DataSource);
        e.observable(this._activities).bind("insert remove replaceAll", this._activities_CollectionChanged.bind(this));
        for (b = 0; b < this._activities.length; b++) this._activities[b].PropertyChanged.subscribe(this.activity_PropertyChanged,
            this);
        this.LoadInfos = this._orderedLoadInfos;
        this.AssignedActivities = this._activities;
        this.Resource = this._resource;
        this.initLoadInfo()
    };
    b.ResourceLoadList.prototype.activity_PropertyChanged = function(b, a) {
        "Times" == a.PropertyName && this.delayedRefresh()
    };
    b.ResourceLoadList.prototype._activities_CollectionChanged = function(b, a) {
        if ("insert" == b.type)
            for (var d = 0; d < a.items.length; d++) a.items[d].PropertyChanged.subscribe(this.activity_PropertyChanged, this);
        if ("remove" == b.type)
            for (d = 0; d < a.items.length; d++) a.items[d].PropertyChanged.unsubscribe(this.activity_PropertyChanged,
                this);
        this.delayedRefresh()
    };
    b.ResourceLoadList.prototype.delayedRefresh = function() {
        var b = this;
        null != this.refreshTimer && clearTimeout(this.refreshTimer);
        this.refreshTimer = setTimeout(function() {
            b.refresh()
        }, 200)
    };
    b.ResourceLoadList.prototype.refresh = function() {
        this._orderedLoadInfos.splice(0, this._orderedLoadInfos.length);
        this.initLoadInfo()
    };
    b.ResourceLoadList.prototype.initLoadInfo = function() {
        for (var c = [], a = 0; a < this.AssignedActivities.length; a++) {
            var d = this.AssignedActivities[a],
                g = d.Assignments_M(),
                f = g.GetAssignmentForResource(this.Resource),
                h = f.AllocationUnits_M(),
                k = d.StartTime_M(),
                d = d.Effort_M();
            this._model.AdjustDurationOnAssignment && d != RQTimeSpan.Zero_M() && (g = d.Ticks_M() / g.length, g *= 100 / f.AllocationUnits, d = TimeSpan.fromTicks(g));
            f = null != this.Resource.Schedule ? this.Resource.Schedule : this._model.WorkTimeSchedule;
            if (null != f)
                for (k = f.ConvertToNextWorkingTimeIntervals(k, d), g = 0; g < k.length; g++) {
                    var d = k[g],
                        e = f.ConverToPreviousWorkingTime(d.Start_M().clone().addMinutes(-1));
                    e.equals(d.Start_M().clone().addMinutes(-1)) ?
                        e = d.Start_M() : e.Date().equals(d.Start_M().Date()) || (e = d.Start_M().Date());
                    var l = f.ConvertToNextWorkingTime(d.End_M().clone().addMinutes(1));
                    l.equals(d.End_M().clone().addMinutes(1)) ? l = d.End_M() : l.Date().equals(d.End_M().Date()) || (l = d.End_M().Date().clone().addDays(1));
                    c.push(new b.LoadInfo(e, l, h))
                } else c.push(new b.LoadInfo(k, k + d, h))
        }
        this.addLoadInfos(c)
    };
    b.ResourceLoadList.prototype.addLoadInfos = function(b) {
        for (var a = 0; a < b.length; a++) this.addLoadInfo(b[a]);
        for (b = 0; b < this._temLoadLists.length; b++) this._orderedLoadInfos.push(this._temLoadLists[b]);
        this._temLoadLists = new RadiantQ.RQ_ObservableCollection([])
    };
    b.ResourceLoadList.prototype.addLoadInfo = function(c) {
        var a = this._temLoadLists.length;
        if (0 != a)
            for (var d = 0; d <= a - 1; d++) {
                var g = this._temLoadLists[d];
                if (c.TimePeriod.End_M() <= g.TimePeriod.Start_M()) {
                    this.combineOrInsert(d, c);
                    return
                }
                if (d == a - 1 && g.TimePeriod.End_M() <= c.TimePeriod.Start_M()) {
                    this.combineWithPrevOrInsert(d + 1, c);
                    return
                }
                var f = g.TimePeriod.Intersect(c.TimePeriod);
                if (null != f && f.Duration_M() > RQTimeSpan.Zero_M())
                    if (g.TimePeriod.Equals(f)) {
                        g.LoadPerc +=
                            c.LoadPerc;
                        if (c.TimePeriod.Start_M().isLessThan(f.Start_M())) var h = this.combineWithPrevOrInsert(d, new b.LoadInfo(c.TimePeriod.Start_M(), f.Start_M(), c.LoadPerc)),
                        d = d + 1 - h;
                        if (f.End_M().isLessThan(c.TimePeriod.End_M())) c = new b.LoadInfo(f.End_M(), c.TimePeriod.End_M(), c.LoadPerc);
                        else return
                    } else if (c.TimePeriod.Equals(f)) {
                    if (g.TimePeriod.Start_M().isLessThan(c.TimePeriod.Start_M())) {
                        this._temLoadLists.splice(d, 0, new b.LoadInfo(g.TimePeriod.Start_M(), c.TimePeriod.Start_M(), g.LoadPerc));
                        a = new b.LoadInfo(f.Start_M(),
                            f.End_M(), g.LoadPerc + c.LoadPerc);
                        this._temLoadLists.splice(d + 1, 1);
                        this._temLoadLists.splice(d + 1, 0, a);
                        g.TimePeriod.End_M().isGreaterThan(c.TimePeriod.End_M()) && this._temLoadLists.splice(d + 2, 0, new b.LoadInfo(f.End_M(), g.TimePeriod.End_M(), g.LoadPerc));
                        return
                    }
                    if (g.TimePeriod.End_M().isGreaterThan(c.TimePeriod.End_M())) h = new b.LoadInfo(f.End_M(), g.TimePeriod.End_M(), g.LoadPerc), g = new b.LoadInfo(f.Start_M(), f.End_M(), g.LoadPerc + c.LoadPerc), this._temLoadLists.splice(d, 1), this._temLoadLists.splice(d, 0, g),
                    c = h;
                    else {
                        g.LoadPerc += c.LoadPerc;
                        return
                    }
                } else {
                    if (c.TimePeriod.Start_M().isLessThan(f.Start_M())) {
                        h = this.combineWithPrevOrInsert(d, new b.LoadInfo(c.TimePeriod.Start_M(), f.Start_M(), c.LoadPerc));
                        d = d + 1 - h;
                        this._temLoadLists.splice(d, 0, new b.LoadInfo(f.Start_M(), f.End_M(), g.LoadPerc + c.LoadPerc));
                        d++;
                        this._temLoadLists.splice(d, 1);
                        this._temLoadLists.splice(d, 0, new b.LoadInfo(f.End_M(), g.TimePeriod.End_M(), g.LoadPerc));
                        return
                    }
                    this._temLoadLists.splice(d, 1);
                    h = this.combineWithPrevOrInsert(d, new b.LoadInfo(g.TimePeriod.Start_M(),
                        f.Start_M(), g.LoadPerc));
                    d = d + 1 - h;
                    this._temLoadLists.splice(d, 0, new b.LoadInfo(f.Start_M(), f.End_M(), g.LoadPerc + c.LoadPerc));
                    c = new b.LoadInfo(f.End_M(), c.TimePeriod.End_M(), c.LoadPerc)
                }
            }
        this._temLoadLists.push(c)
    };
    b.ResourceLoadList.prototype.combineWithPrevOrInsert = function(c, a) {
        var d = 0;
        if (0 < c) {
            var g = this._temLoadLists[c - 1];
            g.TimePeriod.End_M().equals(a.TimePeriod.Start_M()) && g.LoadPerc == a.LoadPerc && (this._temLoadLists.splice(c - 1, 1), c--, a = new b.LoadInfo(g.TimePeriod.Start_M(), a.TimePeriod.End_M(),
                a.LoadPerc), d++)
        }
        this._temLoadLists.splice(c, 0, a);
        return d
    };
    b.ResourceLoadList.prototype.combineOrInsert = function(c, a) {
        var d = 0;
        if (0 < c) {
            var g = this._temLoadLists[c - 1];
            g.TimePeriod.End_M().equals(a.TimePeriod.Start_M()) && g.LoadPerc == a.LoadPerc && (this._temLoadLists.splice(c - 1, 1), c--, a = new b.LoadInfo(g.TimePeriod.Start_M(), a.TimePeriod.End_M(), a.LoadPerc), d++)
        }
        c < this._temLoadLists.Count - 1 && (g = this._temLoadLists[c], a.TimePeriod.End_M().equals(g.TimePeriod.Start_M()) && a.LoadPerc == g.LoadPerc && (this._temLoadLists.splice(c,
            1), a = new b.LoadInfo(a.TimePeriod.Start_M(), g.TimePeriod.End_M(), a.LoadPerc), d++));
        this._temLoadLists.splice(c, 0, a);
        return d
    }
})(jQuery);
(function() {
    var e = RadiantQ.Gantt.Model;
    RadiantQ.Gantt.Model.Dependency = function(b, c, a, d) {
        RadiantQ.Gantt.Model.IActivityDependency.call(this);
        RadiantQ.Gantt.Utils.IUIUpdateable.call(this);
        d || (d = RadiantQ.Gantt.DependencyType.FinishToStart);
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this.OnPropertyChanged = function(a) {
            null != this.PropertyChanged && this.PropertyChanged.raise(this, a);
            this.MonitorThisChanges(a)
        };
        this.PartialUpdate = function(a) {
            this.TotalUpdate()
        };
        this.TotalUpdate = function() {
            this.EnsureActivityOrder()
        };
        this.ensuringActivityOrder = !1;
        this.Model = null;
        b && c && a && d && (this.Model = b, this._fromActivity = c, this._toActivity = a, this.Type_M(d), this.Lag_M(RQTimeSpan.Zero_M()), this.FromActivity_M().PropertyChanged.subscribe(this.Activity_PropertyChanged, this), this.ToActivity_M().PropertyChanged.subscribe(this.Activity_PropertyChanged, this), this.TryUpdate());
        return this
    };
    RadiantQ.Gantt.Model.Dependency.prototype = new RadiantQ.Gantt.Utils.IUIUpdateable;
    RadiantQ.Gantt.Model.Dependency.prototype = new RadiantQ.Gantt.Model.IActivityDependency;
    RadiantQ.Gantt.Model.Dependency.prototype.ComputeErrorTimeSpan = function(b, c, a, d) {
        var g = RQTimeSpan.Zero_M();
        switch (this.Type_M()) {
            case RadiantQ.Gantt.DependencyType.FinishToFinish:
                g = d - c;
                break;
            case RadiantQ.Gantt.DependencyType.StartToFinish:
                g = d - b;
                break;
            case RadiantQ.Gantt.DependencyType.StartToStart:
                g = a - b;
                break;
            default:
                a.equals(c) || (g = a - c)
        }
        return g
    };
    RadiantQ.Gantt.Model.Dependency.prototype.TryUpdate = function() {
        !1 == RadiantQ.Gantt.Model.DataBoundGanttModel.IsBuildingModel && RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this,
            null)
    };
    RadiantQ.Gantt.Model.Dependency.prototype.MonitorThisChanges = function(b) {
        "Type" != b && "Lag" != b || this.TryUpdate()
    };
    RadiantQ.Gantt.Model.Dependency.prototype.Activity_PropertyChanged = function(b, c) {
        if ("StartTime" == c.PropertyName || "EndTime" == c.PropertyName) this.TryUpdate();
        else if (b == this.FromActivity_M() && "SortOrder" == c.PropertyName) {
            var a = this.ToActivity_M();
            (a instanceof e.BaseActivity || !0 == this.isBaseActivity) && a.OnPropertyChanged("PredecessorIndexString")
        }
    };
    RadiantQ.Gantt.Model.Dependency.prototype.toString =
        function() {
            return this.FromActivity_M().ActivityName_M() + " / " + this.ToActivity_M().ActivityName_M() + "; " + this.Type_M()
    };
    RadiantQ.Gantt.Model.Dependency.prototype.Dispose = function() {
        var b = this.ToActivity_M();
        this.FromActivity_M().PropertyChanged.unsubscribe(this.Activity_PropertyChanged, this);
        b.PropertyChanged.unsubscribe(this.Activity_PropertyChanged, this);
        RadiantQ.Gantt.Utils.DelayUpdateUtil.RemoveUpdates(this);
        b instanceof RadiantQ.Gantt.Model.BaseActivity && b.IsDisposed || this.Model.ApplyPreferredStartTimeOnActivity(b,
            b.PreferredStartTime_M())
    };
    RadiantQ.Gantt.Model.Dependency.prototype.CanMoveActivityTo = function(b, c) {
        if (b == this.ToActivity_M()) {
            var a = Date.MinValue,
                a = this.Model.ConvertToValidTimes(c, b.Effort_M(), c, a);
            c = a.adjustedStart;
            var a = a.adjustedEnd,
                d = this.FromActivity_M(),
                a = this.ComputeErrorTimeSpan(d.StartTime_M(), d.EndTime_M(), c, a);
            if (a < RQTimeSpan.Zero_M()) return !1;
            a = this.Model.ConvertToValidStartTime(c - a, this.Lag_M(), b.Effort_M());
            if (c < a) return !1
        }
        return !0
    };
    RadiantQ.Gantt.Model.Dependency.prototype.ComputeLatestToActivityStartTime =
        function() {
            var b = Date.MinValue,
                b = this.FromActivity_M(),
                c = this.ToActivity_M(),
                a = this.Lag_M();
            switch (this.Type_M()) {
                default:
                case RadiantQ.Gantt.DependencyType.None:
                case RadiantQ.Gantt.DependencyType.FinishToStart:
                    return this.Model.ConvertToValidStartTime(b.EndTime_M(), a, c.Effort_M());
                case RadiantQ.Gantt.DependencyType.StartToStart:
                    return this.Model.ConvertToValidStartTime(b.StartTime_M(), a, c.Effort_M());
                case RadiantQ.Gantt.DependencyType.FinishToFinish:
                    return b = this.Model.GetStart(b.EndTime_M(), c.Effort_M()),
                    this.Model.ConvertToValidStartTime(b, a, c.Effort_M());
                case RadiantQ.Gantt.DependencyType.StartToFinish:
                    return b = this.Model.GetStart(b.StartTime_M(), c.Effort_M()), this.Model.ConvertToValidStartTime(b, a, c.Effort_M())
            }
    };
    RadiantQ.Gantt.Model.Dependency.prototype.EnsureActivityOrder = function() {
        if (!1 != this.Model.EnforceDependencyConstraints_M() && !this.ensuringActivityOrder) try {
            this.ensuringActivityOrder = !0;
            var b = this.ToActivity_M();
            if (!1 != e.BaseGanttModel.ShouldEnforceDependency(b, this.Model)) {
                var c = this.FromActivity_M(),
                    a = new RQTimeSpan(this.ComputeErrorTimeSpan(c.StartTime_M(), c.EndTime_M(), b.StartTime_M(), b.EndTime_M())),
                    d = this.ComputeLatestToActivityStartTime();
                b.StartTime_M() < d ? (a = a.getEqualNegative(), a.isLessThan(RQTimeSpan.Zero_M()) && RQTimeSpan.Zero_M(), b.ShiftForwardTo(d)) : b.StartTime_M() > d && !1 == RadiantQ.Gantt.Model.DataBoundGanttModel.IsBuildingModel && this.Model.ApplyPreferredStartTimeOnActivity(b, d)
            }
        } finally {
            this.ensuringActivityOrder = !1
        }
    };
    RadiantQ.Gantt.Model.DependenciesCollection = function() {
        this._depByActivities =
            new RadiantQ.Gantt.Dictionary;
        this._predsByActivity = new RadiantQ.Gantt.Dictionary;
        this._succsByActivity = new RadiantQ.Gantt.Dictionary;
        this._fromActs = {};
        this._toActs = {};
        this._directPredActsByAct = {};
        Array.call(this);
        this.CollectionChanged = new ObjectEvent("CollectionChanged");
        this._inCollectionChanged = !1
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype = [];
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.add = function(b) {
        this.push(b);
        this.updatePredsAndSuccessors(b);
        this.updateBaseActsAndDepActsCollection(b);
        this.OnCollectionChanged(new RadiantQ.Gantt.NotifyCollectionChangedEventArgs(null, b, this.length - 1))
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.updatePredsAndSuccessors = function(b, c) {
        var a = b.FromActivity_M(),
            d = b.ToActivity_M(),
            g = this._predsByActivity[d.ID_M()],
            f = this._succsByActivity[a.ID_M()];
        c ? (g && 1 < g.length ? (d = g.indexOf(b), -1 != d && g.splice(d, 1)) : this._predsByActivity.Remove(d), f && 1 < f.length ? (d = f.indexOf(b), -1 != d && f.splice(d, 1)) : this._succsByActivity.Remove(a)) : (g || (g = [], this._predsByActivity.Add(d,
            g)), g.push(b), f || (f = [], this._succsByActivity.Add(a, f)), f.push(b))
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.updateFromAndToActs = function(b, c) {
        var a = b.ID_M(),
            d = c.ID_M(),
            g = this._fromActs[a];
        g ? void 0 != g._repeatingCnt[d] ? g._repeatingCnt[d]++ : (g.push(c), g._repeatingCnt[d] = 0) : (this._fromActs[a] = [c], this._fromActs[a]._repeatingCnt = {}, this._fromActs[a]._repeatingCnt[d] = 0);
        (g = this._toActs[d]) ? void 0 != g._repeatingCnt[a] ? g._repeatingCnt[a]++ : (g.push(b), g._repeatingCnt[a] = 0) : (this._toActs[d] = [b],
            this._toActs[d]._repeatingCnt = {}, this._toActs[d]._repeatingCnt[a] = 0)
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.updateBaseActsAndDepActsCollection = function(b) {
        var c = b.FromActivity_M();
        b = b.ToActivity_M();
        var a = c.ID_M(),
            d = b.ID_M(),
            g = this._directPredActsByAct[a];
        g ? g.push(b) : this._directPredActsByAct[a] = [b];
        this.updateFromAndToActs(c, b);
        a = this._toActs[a];
        d = this._fromActs[d];
        if (a)
            for (g = 0; g < a.length; g++) {
                if (a[g].ID_M(), this.updateFromAndToActs(a[g], b), d)
                    for (var f = 0; f < d.length; f++) d[f].ID_M(),
                this.updateFromAndToActs(c, d[f]), this.updateFromAndToActs(a[g], d[f])
            } else if (d)
                for (f = 0; f < d.length; f++) d[f].ID_M(), this.updateFromAndToActs(c, d[f])
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.remove = function(b) {
        if (b instanceof e.IActivity) return this.removeDependenciesOf(b);
        this.OnCollectionChanged(new RadiantQ.Gantt.NotifyCollectionChangedEventArgs(b, null))
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.removeDependenciesOf = function(b) {
        b && b instanceof e.IActivity && (b = this._depByActivities[b.ID_M()],
            this.OnCollectionChanged(new RadiantQ.Gantt.NotifyCollectionChangedEventArgs(b, null)))
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.removeBaseActsAndDepActsCollection = function(b) {
        var c = b.FromActivity_M();
        b = b.ToActivity_M();
        var a = c.ID_M(),
            d = b.ID_M(),
            g = this._directPredActsByAct[c.ID_M()];
        if (1 < g.length) {
            var f = g.indexOf(b);
            g.splice(f, 1)
        } else delete this._directPredActsByAct[c.ID_M()];
        var g = this._toActs[a],
            h = this._fromActs[d];
        if (g)
            for (var k = 0; k < g.length; k++) {
                var e = g[k].ID_M();
                0 == this._fromActs[e]._repeatingCnt[d] ?
                    1 < this._fromActs[e].length ? (delete this._fromActs[e]._repeatingCnt[d], f = this._fromActs[e].indexOf(b), this._fromActs[e].splice(f, 1)) : delete this._fromActs[e] : 0 < this._fromActs[e]._repeatingCnt[d] && this._fromActs[e]._repeatingCnt[d]--;
                0 == this._toActs[d]._repeatingCnt[e] ? 1 < this._toActs[d].length ? (delete this._toActs[d]._repeatingCnt[e], f = this._toActs[d].indexOf(g[k]), this._toActs[d].splice(f, 1)) : delete this._toActs[d] : 0 < this._toActs[d]._repeatingCnt[e] && this._toActs[d]._repeatingCnt[e]--;
                if (h)
                    for (var l =
                        0; l < h.length; l++) {
                        var m = h[l].ID_M();
                        0 == this._fromActs[a]._repeatingCnt[m] ? 1 < this._fromActs[a].length ? (delete this._fromActs[a]._repeatingCnt[m], f = this._fromActs[a].indexOf(h[l]), this._fromActs[a].splice(f, 1)) : delete this._fromActs[a] : 0 < this._fromActs[a]._repeatingCnt[m] && this._fromActs[a]._repeatingCnt[m]--;
                        0 == this._toActs[m]._repeatingCnt[a] ? 1 < this._toActs[m].length ? (delete this._toActs[m]._repeatingCnt[a], f = this._toActs[m].indexOf(c), this._toActs[m].splice(f, 1)) : delete this._toActs[m] : 0 < this._toActs[m]._repeatingCnt[a] &&
                            this._toActs[m]._repeatingCnt[a]--;
                        0 == this._fromActs[e]._repeatingCnt[m] ? 1 < this._fromActs[e].length ? (delete this._fromActs[e]._repeatingCnt[m], f = this._fromActs[e].indexOf(h[l]), this._fromActs[e].splice(f, 1)) : delete this._fromActs[e] : 0 < this._fromActs[e]._repeatingCnt[m] && this._fromActs[e]._repeatingCnt[m]--;
                        0 == this._toActs[m]._repeatingCnt[e] ? 1 < this._toActs[m].length ? (delete this._toActs[m]._repeatingCnt[e], f = this._toActs[m].indexOf(g[k]), this._toActs[m].splice(f, 1)) : delete this._toActs[m] : 0 < this._toActs[m]._repeatingCnt[e] &&
                            this._toActs[m]._repeatingCnt[e]--
                    }
            } else if (h)
                for (l = 0; l < h.length; l++) m = h[l].ID_M(), 0 == this._fromActs[a]._repeatingCnt[m] ? 1 < this._fromActs[a].length ? (delete this._fromActs[a]._repeatingCnt[m], f = this._fromActs[a].indexOf(h[l]), this._fromActs[a].splice(f, 1)) : delete this._fromActs[a] : 0 < this._fromActs[a]._repeatingCnt[m] && this._fromActs[a]._repeatingCnt[m]--, 0 == this._toActs[m]._repeatingCnt[a] ? 1 < this._toActs[m].length ? (delete this._toActs[m]._repeatingCnt[a], f = this._toActs[m].indexOf(c), this._toActs[m].splice(f,
                    1)) : delete this._toActs[m] : 0 < this._toActs[m]._repeatingCnt[a] && this._toActs[m]._repeatingCnt[a]--;
        g = this._fromActs[a];
        h = this._toActs[d];
        g && (0 == g._repeatingCnt[d] ? (delete g._repeatingCnt[d], f = g.indexOf(b), g.splice(f, 1)) : 0 < g._repeatingCnt[d] && g._repeatingCnt[d]--, 0 == g.length && delete this._fromActs[a]);
        h && (0 == h._repeatingCnt[a] ? (delete h._repeatingCnt[a], f = h.indexOf(c), h.splice(f, 1)) : 0 < h._repeatingCnt[a] && h._repeatingCnt[a]--, 0 == h.length && delete this._toActs[d])
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.contains =
        function(b) {
            return this._depByActivities.Contains(b)
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.ClearItems = function() {
        for (var b = 0; b < this.length; b++) this[b].Dispose();
        this.splice(0, this.length);
        this._depByActivities = new RadiantQ.Gantt.Dictionary
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.GetDependenciesByActivity = function(b) {
        return this._depByActivities[b.ID_M()]
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.GetDepenedenciesByIndex = function(b) {
        return b < this.length ?
            this._depByActivities.GetItemByIndex(b) : null
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.OnCollectionChanged = function(b) {
        if (null != b.OldItems)
            for (var c = 0; c < b.OldItems.length; c++) {
                var a = b.OldItems[c];
                this.UnsubscribeToChildEvents(a);
                this.ClearDependencyCacheInfo(a);
                this.removeBaseActsAndDepActsCollection(a);
                this.updatePredsAndSuccessors(a, !0);
                a.Dispose()
            }
        if (null != b.NewItems)
            for (c = 0; c < b.NewItems.length; c++) a = b.NewItems[c], this.CacheDependencyInfo(a), this.SubscribeToChildEvents(a);
        try {
            this._inCollectionChanged = !0, this.CollectionChanged && this.CollectionChanged.raise(this, b)
        } finally {
            this._inCollectionChanged = !1
        }
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.SubscribeToChildEvents = function(b) {};
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.UnsubscribeToChildEvents = function(b) {};
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.SetItem = function(b, c) {
        this.ClearDependencyCacheInfo(this[b]);
        this[b].Dispose();
        this.CacheDependencyInfo(this[b])
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.CacheDependencyInfo =
        function(b) {
            var c = b.FromActivity_M(),
                a = b.ToActivity_M(),
                d = this._depByActivities[c.ID_M()];
            if (d) {
                if (d.containsValue(b)) return;
                d.push(b)
            } else this._depByActivities.Add(c, Array(b));
            (d = this._depByActivities[a.ID_M()]) ? d.containsValue(b) || d.push(b) : this._depByActivities.Add(a, Array(b))
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.ClearDependencyCacheInfo = function(b) {
        var c = b.FromActivity_M(),
            a = b.ToActivity_M(),
            d = this._depByActivities[c.ID_M()];
        if (d) {
            var g = d.indexOf(b);
            d.splice(g, 1)
        }
        0 == d.length &&
            this._depByActivities.Remove(c);
        if (d = this._depByActivities[a.ID_M()]) g = d.indexOf(b), d.splice(g, 1);
        0 == d.length && this._depByActivities.Remove(a);
        g = this.indexOf(b);
        this.splice(g, 1)
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.IsActivityFinishDependentOnAnother = function(b) {
        var c = this._depByActivities[b.ID_M()];
        if (c)
            for (var a = 0; a < c.length; a++) {
                var d = c[a];
                if (d.ToActivity_M() == b && (d.Type_M() == RadiantQ.Gantt.DependencyType.FinishToFinish || d.Type_M() == RadiantQ.Gantt.DependencyType.StartToFinish)) return !0
            }
        return !1
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.DoesDependencyExist = function(b, c, a) {
        return this.DoesConstraintExist(b, c, a) || this.DoesConstraintExist(c, b, a) ? !0 : !1
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.DoesConstraintExist = function(b, c, a) {
        if (0 == this.length) return !1;
        var d = this._predsByActivity[c.ID_M()];
        if (a) {
            if (d) {
                if ((a = this._directPredActsByAct[b.ID_M()]) && -1 != a.indexOf(c)) return !0;
                for (c = 0; c < d.length; c++)
                    if (d[c].FromActivity_M() == b) return !0
            }
        } else {
            if ((d = this._fromActs[b.ID_M()]) && -1 != d.indexOf(c) || (d = this._toActs[c.ID_M()]) && -1 != d.indexOf(b)) return !0;
            if (b.Parent_M()) {
                if (c.Parent_M()) {
                    if ((d = this.DoesConstraintExist(b.Parent_M(), c, a)) || (d = this.DoesConstraintExist(b, c.Parent_M(), a))) return !0;
                    d = this.DoesConstraintExist(b.Parent_M(), c.Parent_M(), a)
                } else d = this.DoesConstraintExist(b.Parent_M(), c, a); if (d) return !0
            } else if (c.Parent_M() && (d = this.DoesConstraintExist(b, c.Parent_M(), a))) return !0
        }
        return !1
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.ClearDependencies = function(b) {
        b =
            (this._predsByActivity[b.ID_M()] || []).slice();
        for (var c = 0; c < b.length; c++) this.remove(b[c])
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.GetPredecessors = function(b) {
        return (b = this._predsByActivity[b.ID_M()]) ? b : []
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.GetSuccessors = function(b) {
        return (b = this._succsByActivity[b.ID_M()]) ? b : []
    };
    RadiantQ.Gantt.Model.DependenciesCollection.prototype.Dispose = function() {
        this._depByActivities && this._depByActivities.Dispose();
        this._depByActivities = null;
        this._predsByActivity && this._predsByActivity.Dispose();
        this._predsByActivity = null;
        this._succsByActivity && this._succsByActivity.Dispose();
        this._succsByActivity = null;
        this._fromActs = {};
        this._toActs = {};
        this._directPredActsByAct = {};
        Array.call(this);
        this.CollectionChanged && this.CollectionChanged.Dispose();
        this.CollectionChanged = null;
        this._inCollectionChanged = !1
    }
})();
(function(e) {
    var b = RadiantQ.Gantt.Model,
        c = RadiantQ.Gantt.DependencyType;
    b.BaseGanttModel = function(a, d, c) {
        this.isBaseGanttModel = !0;
        b.IGanttModel.call(this);
        b.BaseGanttModel.IdCounter = 1;
        this.topID = -1;
        this.AdjustDurationOnAssignment_M(null);
        this.EnforceDependencyConstraints_M(null);
        this.ResourceCapacityProvider = null;
        this.GetActivityById = function(a) {
            return this._dictActivityById.GetItemByKey(a)
        };
        this._topSortOrder = 0;
        this.BeforeEffortChanging = new ObjectEvent("BeforeEffortChanging");
        this.PropertyChanged =
            new ObjectEvent("PropertyChanged");
        this.NewActivityAdded = new ObjectEvent("NewActivityAdded");
        this.ActivityEventHandler = new ObjectEvent("ActivityEventHandler");
        this.ActivityRemoved = new ObjectEvent("ActivityRemoved");
        this.BeforeStartTimeChanging = new ObjectEvent("BeforeStartTimeChanging");
        this._dictActivityById = new RadiantQ.Gantt.Dictionary;
        this.ShouldEnforceDependencyConstraintsOnActivity = new ObjectEvent("ShouldEnforceDependencyConstraintsOnActivity");
        this.ProvideDefaultWBSID = new ObjectEvent("ProvideDefaultWBSID");
        if (this && 0 != arguments.length) return this.ValidateDependencySetting_M(!0), this.EnforceDependencyConstraints_M(!0), this.AutoCalculateSummaryTaskTimes_M(!0), this.CanShiftInProgressTasks_M(!0), this.AdjustDurationOnAssignment_M(!0), this.LagStringUnitsInHours_M(1), this._dictActivityById = new RadiantQ.Gantt.Dictionary, this._activities = this.CreateActivitiesCollection(), this._dependencies = new RadiantQ.Gantt.Model.DependenciesCollection, this._resources = new b.GanttResourcesCollection, this._childCollectionChangedHandler =
            this._activities.ChildCollectionChanged.subscribe(this.actitivites_ChildCollectionChanged, this), this._actsCollectionChangedHandler = this._activities.CollectionChanged.subscribe(this.actitivites_ChildCollectionChanged, this), this._depsCollectionChangedHandler = this._dependencies.CollectionChanged.subscribe(this._dependencies_CollectionChanged, this), this.WorkTimeSchedule_M(a), d && ("function" == typeof d ? this.ShouldEnforceDependencyConstraintsOnActivity.subscribe(d, this) : "function" == typeof d.Handler && this.ShouldEnforceDependencyConstraintsOnActivity.subscribe(d.Handler,
                d.Context || this)), c && ("function" == typeof c ? this.ProvideDefaultWBSID.subscribe(c, this) : "function" == typeof c.Handler && this.ProvideDefaultWBSID.subscribe(c.Handler, c.Context || this)), this
    };
    b.BaseGanttModel.prototype = new b.IGanttModel;
    RadiantQ.Gantt.addMethod(b.BaseGanttModel.prototype, "UpdateSortOrderFrom", function(a) {
        a = this.Activities_M();
        0 < a.length && this.UpdateSortOrderFrom(a[0], 1)
    });
    RadiantQ.Gantt.addMethod(b.BaseGanttModel.prototype, "UpdateSortOrderFrom", function(a, b) {
        for (var d = a.Parent_M(), d = null !=
                d ? d.ChildActivities_M() : this.Activities_M(), c = d.indexOf(a); c < d.length; c++) {
            0 > c && (c = 0);
            d[c].SortOrder_M(b);
            b++;
            var g = d[c].ChildActivities_M();
            0 < g.length && (b = this.UpdateSortOrderFrom(g[0], b))
        }
        return b
    });
    b.BaseGanttModel.prototype._depTestResults = new RadiantQ.Gantt.Dictionary;
    b.BaseGanttModel.prototype._depInParents = new RadiantQ.Gantt.Dictionary;
    b.BaseGanttModel.prototype.ActivitiesCount_M = function() {
        return this._dictActivityById.length
    };
    b.BaseGanttModel.prototype.ActivityById_M = function() {
        return this._dictActivityById
    };
    b.BaseGanttModel.prototype.ResourceAssignmentTracker_M = function() {
        this._resourceAssignmentTracker || (this._resourceAssignmentTracker = this.CreateResourceAssignmentTracker(this));
        return this._resourceAssignmentTracker
    };
    b.BaseGanttModel.prototype.CustomProgressCalculation_M = function() {
        return this._customProgressCalculation
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.BaseGanttModel.prototype, "ActivitiesCount", {
        get: function() {
            return this.ActivitiesCount_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseGanttModel.prototype, "ActivityById", {
        get: function() {
            return this.ActivityById_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseGanttModel.prototype, "ResourceAssignmentTracker", {
        get: function() {
            return this.ResourceAssignmentTracker_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.Model.IGanttModel.prototype, "CustomProgressCalculation", {
        get: function() {
            return this.CustomProgressCalculation_M()
        },
        enumerable: !0,
        configurable: !0
    }));
    b.BaseGanttModel.prototype.OnShouldEnforceDependencyConstraints = function(a) {
        0 < this.ShouldEnforceDependencyConstraintsOnActivity.fn.length && this.ShouldEnforceDependencyConstraintsOnActivity.raise(this, a)
    };
    b.BaseGanttModel.ShouldEnforceDependency = function(a, d) {
        if (!1 == d.CanShiftInProgressTasks_M() && 0 < a.ProgressPercent_M()) return !1;
        var c = new b.EnforceDependencyConstraintsEventArgs(a);
        return d ? (d.OnShouldEnforceDependencyConstraints(c), c.Enforce_M()) : !0
    };
    b.BaseGanttModel.prototype.CanProvideWBSID =
        function(a, b) {
            0 < this.ProvideDefaultWBSID.fn.length
    };
    b.BaseGanttModel.prototype.RaiseProvideWBSID = function(a) {
        0 < this.ProvideDefaultWBSID.fn.length && this.ProvideDefaultWBSID.raise(this, a)
    };
    b.BaseGanttModel.prototype._dependencies_CollectionChanged = function(a, b) {
        if (null != b.OldItems)
            for (var d = 0; d < b.OldItems.length; d++) {
                var c = b.OldItems[d];
                c.ToActivity_M().OnRemovedPredecessorDependency(c)
            }
        if (null != b.NewItems)
            for (d = 0; d < b.NewItems.length; d++) c = b.NewItems[d], c.ToActivity_M().OnAddedPredecessorDependency(c)
    };
    b.BaseGanttModel.prototype.GetPredecessorsHierarchy = function(a) {
        var b = [];
        a = this.Dependencies_M().GetPredecessors(a);
        for (var d = 0; d < a.length; d++) dep = a[d], this.AddActivityHierarchyToList(b, dep.FromActivity_M());
        return b
    };
    b.BaseGanttModel.prototype.AddActivityHierarchyToList = function(a, b) {
        var d = b.ChildActivities_M();
        if (0 == d.length) a.containsValue(b) || a.push(b);
        else
            for (var c = 0; c < d.length; c++) this.AddActivityHierarchyToList(a, d[c])
    };
    b.BaseGanttModel.prototype.GetResourcesDictionary = function(a) {
        var b = new RadiantQ.Gantt.Dictionary;
        a = a.Assignments_M();
        for (var d = 0; d < a.length; d++) {
            var c = a[d];
            b.Add(c.Resource_M(), c.AllocationUnits_M())
        }
        return b
    };
    b.BaseGanttModel.prototype.GetActivitiesWithConflictingAssignments = function() {
        var a = [],
            b = this.AllActivities_M();
        if (0 < b.length) {
            for (var d = new RadiantQ.Gantt.Dictionary, c = 0; c < b.length; c++) {
                var g = b[c],
                    f = g.Assignments_M();
                if (0 == g.ChildActivities_M().length && null != f && 0 != f.length)
                    for (var e = 0; e < f.length; e++) {
                        var s = f[e].Resource_M(),
                            r = d.GetItemByKey(s);
                        r || (r = [], d.Add(s, r));
                        r.push(g)
                    }
            }
            for (b = 0; b <
                d.Keys.length; b++)
                for (g = d.GetItemByKey(d.Keys[c]), c = 0; c < g.length - 1;) {
                    f = !1;
                    s = g[c];
                    r = new TimePeriod(s.StartTime_M(), s.EndTime_M());
                    for (e = c + 1; e < g.length;) {
                        var t = g[e],
                            x = new TimePeriod(t.StartTime_M(), t.EndTime_M()),
                            x = r.Intersect(x);
                        null != x && x.Value.Duration_M() > RQTimeSpan.Zero_M() ? (f = !0, a.push(t), g.RemoveAt(e)) : e++
                    }
                    f ? (a.push(s), g.RemoveAt(c)) : c++
                }
        }
        return a
    };
    b.BaseGanttModel.GetEndTimeForAssignmentInActivity = function(a, b, d, c) {
        if (b.equals(RQTimeSpan.Zero_M())) return a.StartTime_M();
        b = b.Ticks_M() / a.Assignments_M().length;
        b *= 100 / d.AllocationUnits_M();
        d = d.Resource_M().Schedule_M();
        d = null == d ? c : d;
        return null != d ? d.GetEnd(a.StartTime_M(), RQTimeSpan.fromTicks(b)) : a.StartTime_M().addTimeSpan(RQTimeSpan.fromTicks(b))
    };
    b.BaseGanttModel.prototype.OnBeforeEffortChanging = function(a, d) {
        if (this.BeforeEffortChanging && 0 < this.BeforeEffortChanging.fn.length) {
            var c = new b.BeforeEffortChangingEventArgs(a, d);
            this.BeforeEffortChanging.raise(this, c);
            return c.NewEffort
        }
        return d
    };
    b.BaseGanttModel.ConvertEffortToDuration = function(a, b, d, c) {
        a =
            a.Assignments_M();
        if (!1 == d || 0 == a.length) return b;
        for (c = d = 0; c < a.length; c++) {
            var g = a[c];
            d += g.AllocationUnits_M();
            g.Resource_M().Schedule_M()
        }
        b = b.Ticks_M();
        b = Math.ceil(b / (d / 100));
        return RQTimeSpan.fromTicks(b)
    };
    b.BaseGanttModel.prototype.OnBeforeStartTimeChanging = function(a, d) {
        if (this.BeforeStartTimeChanging && 0 < this.BeforeStartTimeChanging.fn.length) {
            var c = new b.BeforeStartTimeChangingEventArgs(a, d);
            this.BeforeStartTimeChanging.raise(this, c);
            return c.NewStartTime
        }
        return d
    };
    b.BaseGanttModel.prototype.actitivites_ChildCollectionChanged =
        function(a, b) {
            if (null != b.NewItems)
                for (var d = 0; d < b.NewItems.length; d++) {
                    var c = b.NewItems[d];
                    (a instanceof RadiantQ.Gantt.Model.IActivity || a.isIActivity) && this.RemoveAnyParentChildDependencies(a, c);
                    this.RecursivelyRegisterActivities(c)
                } else if (null != b.OldItems)
                    for (d = 0; d < b.OldItems.length; d++) c = b.OldItems[d], this.RecursivelyUnRegisterActivities(c)
    };
    b.BaseGanttModel.prototype.RemoveActivity = function(a, d) {
        this.RecursivelyClearDependencies(d);
        null != a ? a.ChildActivities_M().remove(d) : this.Activities_M().remove(d);
        this.OnActivityRemoved(new b.ActivityEventArgs(d))
    };
    b.BaseGanttModel.prototype.RecursivelyClearDependencies = function(a) {
        var b = this._dependencies.GetDependenciesByActivity(a);
        if (null != b)
            for (var d = b.length - 1; 0 <= d; d--) {
                var c = b[d];
                this.Dependencies_M().remove(c)
            }
        a = a.ChildActivities_M();
        for (d = 0; d < a.length; d++) this.RecursivelyClearDependencies(a[d])
    };
    b.BaseGanttModel.prototype.RecursivelyRegisterActivities = function(a) {
        var b = a.ID_M(),
            d = this._dictActivityById.GetItemByKey(b);
        if (null != d && d != a) throw Error("A new activity () with the ID (" +
            b + ") same as another activity (" + d.ActivityName_M() + ") was added. This is not supported.");
        this._dictActivityById.Add(b, a);
        this.topID < b && (this.topID = b);
        a = a.ChildActivities_M();
        for (b = 0; b < a.length; b++) this.RecursivelyRegisterActivities(a[b])
    };
    b.BaseGanttModel.prototype.RecursivelyUnRegisterActivities = function(a) {
        var b = null,
            d = a.ID_M();
        this._dictActivityById.Contains(d) && (b = this.GetActivityById(d));
        null != b && b == a && this._dictActivityById.Remove(d);
        a = a.ChildActivities_M();
        for (b = 0; b < a.length; b++) this.RecursivelyUnRegisterActivities(a[b])
    };
    b.BaseGanttModel.prototype.RemoveAnyParentChildDependencies = function(a, b) {
        var d = this._dependencies.GetDependenciesByActivity(b);
        if (null != d)
            for (var c = d.length - 1; 0 <= c; c--) {
                var g = d[c];
                g.FromActivity_M() != a && g.ToActivity_M() != a || this.Dependencies_M().remove(g)
            }
        d = b.ChildActivities_M();
        for (c = 0; c < d.length; c++) this.RemoveAnyParentChildDependencies(a, d[c])
    };
    b.BaseGanttModel.prototype.CreateNewDependencyInternal = function(a, d, c, g, f) {
        !1 == f && !1 == this.CanAddNewDependency(a, d, b.NewDependencyAddScenarioType.None) &&
            (f = "Cannot add a dependency between activities " + a.ActivityName_M() + " and " + d.ActivityName_M() + ". They are either already directly or indirectly dependent or one of them is, directly or indirectly, a summary task of another. Use the Model.CanAddNewDependency method to determine if dependencies can be added between two tasks, before adding a new dependency.", window.console && console.log(f));
        try {
            var e = new RadiantQ.Gantt.Utils.DelayUpdates,
                q = new RadiantQ.Gantt.Model.Dependency(this, a, d, c);
            q.Lag_M(g);
            this.Dependencies_M().add(q);
            return q
        } finally {
            e.Dispose()
        }
    };
    b.BaseGanttModel.prototype.RemoveDependenciesLeadingTo = function(a, b) {
        var d = this.Dependencies_M(),
            c = a.ToActivity_M();
        if (c == b) d.remove(a);
        else {
            for (var g = d.GetSuccessors(c), f = 0; f < g.length; f++) this.RemoveDependenciesLeadingTo(g[f], b);
            c = c.ChildActivities_M();
            for (f = 0; f < c.length; f++) {
                g = c[f];
                if (this.IsAncestor(g, b)) {
                    d.Remove(a);
                    break
                }
                for (var g = d.GetSuccessors(g), e = 0; e < g.length; e++) this.RemoveDependenciesLeadingTo(g[e], b)
            }
        }
    };
    b.BaseGanttModel.prototype.InitDepResultsCache =
        function() {
            this._depTestResults = new RadiantQ.Gantt.Dictionary
    };
    b.BaseGanttModel.prototype.ClearDepResultsCache = function() {
        this._depTestResults.Clear();
        this._depTestResults = new RadiantQ.Gantt.Dictionary
    };
    b.BaseGanttModel.prototype.AddToDepResultsCache = function(a, b) {
        this._depTestResults.Add(a.ID_M() + "+" + b.ID_M(), !0)
    };
    b.BaseGanttModel.prototype.IsInDepResultsCache = function(a, b) {
        return this._depTestResults.Contains(a.ID_M() + "+" + b.ID_M()) ? !0 : !1
    };
    b.BaseGanttModel.prototype.InitDepInParentsResultsCache =
        function() {
            this._depInParents = new RadiantQ.Gantt.Dictionary
    };
    b.BaseGanttModel.prototype.ClearDepInParentsResultsCache = function() {
        this._depInParents.Clear();
        this._depInParents = null
    };
    b.BaseGanttModel.prototype.AddToDepInParentsResultsCache = function(a, b) {
        this._depInParents.Add(a.ID_M() + "+" + b.ID_M(), !0)
    };
    b.BaseGanttModel.prototype.IsInDepInParentsResultsCache = function(a, b) {
        return this._depInParents.Contains(a.ID_M() + "+" + b.ID_M()) ? !0 : !1
    };
    b.BaseGanttModel.prototype.CanAddNewDependencyRecursive = function(a,
        b, d) {
        function c(a, b) {
            var d = b.ID_M();
            if (e[d] && e.Dependencies == a) return e[d];
            for (var g = [], f = a._fromActs[d] || [], h = 0; h < f.length; h++) {
                var k = f[h],
                    n = k.ChildActivities_M();
                if (n.length)
                    for (var p = 0; p < n.length; p++) var m = c(a, n[p]),
                g = g.concat(m);
                g.push(k)
            }
            return e[d] = g
        }

        function g(a) {
            var b = [];
            for (a = a.Parent_M(); a;) b.push(a), a = a.Parent_M();
            return b.reverse()
        }

        function f(a) {
            var b = a.ID_M();
            if (s[b]) return s[b];
            var d = [];
            a = a.ChildActivities_M();
            for (var c = 0; c < a.length; c++) {
                var g = a[c];
                d.push(g);
                g = f(g);
                d = d.concat(g)
            }
            return s[b] =
                d
        }
        if (!1 == this.ValidateDependencySetting_M()) return !0;
        if (0 == d) this.InitDepResultsCache();
        else if (this.IsInDepResultsCache(a, b)) return !0;
        if (this.IsAncestor(a, b) || this.IsAncestor(b, a)) return !1;
        var e = {
            Dependencies: this._dependencies
        }, s = {};
        if (function(a, b) {
            var d = this._fromActs[a.ID_M()];
            return d && -1 != d.indexOf(b) ? !0 : (d = this._toActs[b.ID_M()]) && -1 != d.indexOf(a) ? !0 : !1
        }.call(this._dependencies, b, a)) return !1;
        var r = a.Parent_M(),
            t = b.Parent_M();
        r && t && r == t ? (r = a, t = b) : (r = a.Parent_M() ? g(a)[0] : a, t = b.Parent_M() && b.Parent_M() !=
            a.Parent_M() ? g(b)[0] : b);
        fromChilds = f(r);
        toChilds = f(t);
        var x = c(this._dependencies, b);
        if (-1 != x.indexOf(a) || -1 != x.indexOf(r)) return !1;
        t = c(this._dependencies, t);
        if (-1 != t.indexOf(a) || -1 != t.indexOf(r)) return !1;
        if (fromChilds.length && fromChilds != toChilds)
            for (var w = 0; w < fromChilds.length; w++) {
                var u = fromChilds[w];
                if (-1 != x.indexOf(u) || -1 != t.indexOf(u)) return !1;
                for (var v = 0; v < toChilds.length; v++) {
                    var C = toChilds[v];
                    if (u != C && (C = c(this._dependencies, C), -1 != C.indexOf(a) || -1 != C.indexOf(r) || -1 != C.indexOf(u))) return !1
                }
            } else
                for (toChilds =
                    f(b), w = 0; w < toChilds.length; w++)
                    if (C = toChilds[w], C = c(this._dependencies, C), -1 != C.indexOf(a) || -1 != C.indexOf(r)) return !1;
        this.AddToDepResultsCache(a, b);
        0 == d && this.ClearDepResultsCache();
        return !0
    };
    b.BaseGanttModel.prototype.HasDependencyInParentsRecursive = function(a, b, d, c) {
        if (0 == c) this.InitDepInParentsResultsCache();
        else if (this.IsInDepInParentsResultsCache(a, b)) return !1;
        var g = this.Dependencies_M();
        if (0 == g.length) return !1;
        if (d && g.DoesDependencyExist(a, b, !0)) return !0;
        d = a.Parent_M();
        g = b.Parent_M();
        if (null !=
            d && void 0 != d && this.HasDependencyInParentsRecursive(d, b, !0, c + 1) || null != g && void 0 != g && this.HasDependencyInParentsRecursive(a, g, !0, c + 1)) return !0;
        this.AddToDepInParentsResultsCache(a, b);
        return !1
    };
    b.BaseGanttModel.prototype.OnNewActivityAdded = function(a) {
        null != this.NewActivityAdded && this.NewActivityAdded.raise(this, a)
    };
    b.BaseGanttModel.prototype.OnActivityRemoved = function(a) {
        null != this.ActivityRemoved && this.ActivityRemoved.raise(this, a);
        a.Dispose()
    };
    b.BaseGanttModel.prototype.OnPropertyChanged = function(a,
        b) {
        null != this.PropertyChanged && this.PropertyChanged.raise(this, {
            propertyName: a,
            value: b
        })
    };
    b.BaseGanttModel.prototype.CreateResourceAssignmentTracker = function(a) {
        return new b.ResourceAssignmentTracker(a)
    };
    b.BaseGanttModel.prototype.CreateActivitiesCollection = function() {
        return new b.ActivitiesCollection(null, this)
    };
    b.BaseGanttModel.prototype.GetActivityById = function(a) {
        return this._dictActivityById.ContainsKey(a) ? this._dictActivityById[a] : null
    };
    b.BaseGanttModel.prototype.Dispose = function() {
        for (var a =
            this.AllActivities_M(), b = 0; b < a.length; b++) a.asArray[b].Dispose();
        this._dictActivityById = null;
        this._childCollectionChangedHandler && (this._childCollectionChangedHandler.Dispose(), this._childCollectionChangedHandler = null);
        this._actsCollectionChangedHandler && (this._actsCollectionChangedHandler.Dispose(), this._actsCollectionChangedHandler = null);
        this._depsCollectionChangedHandler && (this._depsCollectionChangedHandler.Dispose(), this._depsCollectionChangedHandler = null);
        this._activities && this._activities.Dispose();
        this._activities = null;
        this._dependencies && this._dependencies.Dispose();
        this._dependencies = null;
        this._resources && this._resources.Dispose();
        this._resources = null;
        this.BeforeEffortChanging && this.BeforeEffortChanging.Dispose();
        this.BeforeEffortChanging = null;
        this.PropertyChanged && this.PropertyChanged.Dispose();
        this.PropertyChanged = null;
        this.NewActivityAdded && this.NewActivityAdded.Dispose();
        this.NewActivityAdded = null;
        this.ActivityEventHandler && this.ActivityEventHandler.Dispose();
        this.ActivityEventHandler =
            null;
        this.ActivityRemoved && this.ActivityRemoved.Dispose();
        this.ActivityRemoved = null;
        this.BeforeStartTimeChanging && this.BeforeStartTimeChanging.Dispose();
        this.BeforeStartTimeChanging = null;
        this._dictActivityById && this._dictActivityById.Dispose();
        this._dictActivityById = null;
        this.ShouldEnforceDependencyConstraintsOnActivity && this.ShouldEnforceDependencyConstraintsOnActivity.Dispose();
        this.ShouldEnforceDependencyConstraintsOnActivity = null;
        this.ProvideDefaultWBSID && this.ProvideDefaultWBSID.Dispose();
        this.base =
            this.ProvideDefaultWBSID = null
    };
    b.BaseGanttModel.prototype.GetCriticalActivities = function(a) {
        for (var b = Date.MinValue, d = this.AllActivities_M()._collections, c = 0; c < d.length; c++) {
            var g = d[c].value,
                g = g.EndTime_M();
            g > b && (b = g)
        }
        for (var f = [], c = 0; c < d.length; c++) g = d[c].value, g.IsCritical(b, a, null) && f.push(g);
        return f
    };
    b.BaseGanttModel.prototype.LevelResources = function(a, d) {
        var c = this.AllActivities_M();
        if (0 < c.length) {
            for (var g = new RadiantQ.Gantt.Dictionary, f = new RadiantQ.Gantt.Dictionary, e = 0; e < c.length; e++) {
                var q =
                    c.GetItemByIndex(e),
                    s = q.Assignments_M();
                0 == q.ChildActivities_M().length && null != s && 0 != s.length && (g.Add(q, this.GetPredecessorsHierarchy(q)), f.Add(q, this.GetResourcesDictionary(q)))
            }
            c = new RadiantQ.Gantt.Dictionary;
            for (e = g.length; 0 < e; e = g.length) {
                for (var s = [], r = 0; r < g.length; r++) {
                    for (var q = g._collections[r].key, t = !0, x = g.GetItemByKey(q), w = 0; w < x.length; w++) {
                        var u = x[w];
                        if (g.Contains(u) && !s.containsValue(u)) {
                            t = !1;
                            break
                        }
                    }
                    if (t) {
                        t = d;
                        x = f.GetItemByKey(q);
                        for (w = 0; w < x.length; w++) {
                            var u = x._collections[w],
                                v = u.key,
                                C =
                                    u.value,
                                z = c.GetItemByKey(v);
                            if (z)
                                for (u = 0; u < z.length; u++) {
                                    var y = z._collections[u],
                                        B = y.key,
                                        y = this.GetResourceCapacity(v);
                                    B + C > y && (B = z.GetItemByKey(B), B.isGreaterThan(t) && (t = B))
                                }
                        }!a && 0 != q.ProgressPercent_M() || t == q.StartTime_M() || (q.PreferredStartTime_M(t), q.StartTime_M(t));
                        C = this.AdjustDurationOnAssignment_M();
                        for (w = 0; w < x.length; w++) {
                            u = x._collections[w];
                            v = u.key;
                            y = u.value;
                            c.Contains(v) || c.Add(v, new RadiantQ.Gantt.Dictionary);
                            var z = c.GetItemByKey(v),
                                B = new RadiantQ.Gantt.Dictionary,
                                A = C ? b.BaseGanttModel.GetEndTimeForAssignmentInActivity(q,
                                    q.Effort_M(), q.Assignments_M().GetAssignmentForResource(v), this.WorkTimeSchedule_M()) : q.EndTime_M();
                            B.Add(y, A);
                            for (u = 0; u < z.length; u++) {
                                var v = z._collections[u].key,
                                    D = z.GetItemByKey(v);
                                D.isGreaterThan(t) && (D.isLessThan(A) ? B.Add(v + y, D) : B.Add(v + y, A))
                            }
                            for (u = 0; u < B.length; u++) y = B._collections[u], v = y.key, y = y.value, A = z.indexOf(v), -1 == A ? z.Add(v, y) : y > z._collections[A].value && (z._collections[A].value = y)
                        }
                        s.push(q)
                    }
                }
                for (u = 0; u < s.length; u++) g.Remove(s[u]);
                if (g.length == e) break
            }
        }
    };
    b.BaseGanttModel.prototype.GetResourceCapacity =
        function(a) {
            return this.ResourceCapacityProvider ? this.ResourceCapacityProvider(a) : 100
    };
    b.BaseGanttModel.prototype.ConvertToValidTimes = function(a, b, c, g, f) {
        b || (b = RQTimeSpan.Zero_M());
        g = a;
        g.addTimeSpan(b);
        g = this.AdjustStartTimeWithEffort(g, b);
        f = d(g, b, null != c ? c : this.WorkTimeSchedule_M());
        return {
            adjustedStart: g,
            adjustedEnd: f
        }
    };
    b.BaseGanttModel.prototype.ConvertToValidStartTime = function(b, d, c) {
        return d.equals(RQTimeSpan.Zero_M()) && a(b, c, this.WorkTimeSchedule_M()) ? b : RadiantQ.Gantt.Utils.TimeComputingUtils.AddLagToStartTime(b,
            d, this.WorkTimeSchedule_M())
    };
    var a = b.BaseGanttModel.ApplyMilestoneExceptionToStartTime = function(a, b, d) {
        b || (b = RQTimeSpan.Zero_M());
        return b.equals(RQTimeSpan.Zero_M()) && (null == d ? a : d.GetStart(a, RQTimeSpan.Zero_M())).equals(a) ? !0 : !1
    };
    b.BaseGanttModel.ComputeStartTime = function(a, b, d) {
        return null == d ? (b = b.getEqualNegative(), a.addTimeSpan(b)) : d.GetStart(a, b)
    };
    var d = b.BaseGanttModel.ComputeEndTime = function(a, d, c, f, e) {
        if (!(a.isBaseActivity || a instanceof b.IActivity)) return g(a, d, c, f);
        var p = a.ChildActivities_M();
        if (0 < p.length && e) return p.EndTime_M();
        e = a.Assignments_M();
        p = a.Schedule_M();
        if (!1 == f || 0 == e.length) return g(a.StartTime_M(), d, null == p ? c : p);
        f = Date.MinValue;
        for (var q = 0; q < e.length; q++) {
            var s = b.BaseGanttModel.GetEndTimeForAssignmentInActivity(a, d, e[q], null == p ? c : p);
            s > f && (f = s)
        }
        return f
    }, g = function(b, d, c) {
            var g = RQTimeSpan.Zero_M();
            d || (d = g);
            return d.equals(g) && a(b, g, c) ? b : null == c ? b.addTimeSpan(d) : c.GetEnd(b, d)
        };
    b.BaseGanttModel.prototype.ComputeEndTime = function(a) {
        return d(a, a.Effort_M(), this.WorkTimeSchedule_M(),
            this.AdjustDurationOnAssignment_M(), this.AutoCalculateSummaryTaskTimes_M())
    };
    b.BaseGanttModel.prototype.ComputeEffort = function(a, b) {
        var d = a.StartTime_M();
        if (d == Date.MinValue || d == Date.MaxValue) return RQTimeSpan.Zero_M();
        var c = a.Assignments_M(),
            g = a.Schedule_M(),
            g = null != g ? g : this.WorkTimeSchedule_M();
        if (!1 == this.AdjustDurationOnAssignment_M() || 0 == c.length || 0 < a.ChildActivities_M().length) return null == g ? new RadiantQ.Gantt.Utils.TimeComputingUtils.GetTimeSpan(d, b) : g.GetEffort(d, b);
        for (var f = RQTimeSpan.MaxValue_M(),
                e = 0; e < c.length; e++) {
            var s = c[e],
                r = s.Resource_M().Schedule_M(),
                r = null == r ? g : r,
                t = RQTimeSpan.MinValue_M();
            r ? (t = r.GetEffort(d, b), t = RQTimeSpan.fromTicks(t.Ticks_M() * (s.AllocationUnits_M() / 100))) : t = new RQTimeSpan(b - d);
            t.isLessThan(f) && (f = t)
        }
        return RQTimeSpan.fromTicks(f.Ticks_M() * c.length)
    };
    b.BaseGanttModel.prototype.AdjustEffort = function(a, b) {
        return this.OnBeforeEffortChanging(a, b)
    };
    b.BaseGanttModel.prototype.ConvertDurationToEffort = function(a, b) {
        var d = b.Assignments_M();
        if (!1 == this.AdjustDurationOnAssignment_M() ||
            0 == d.length) return a;
        for (var c = 0, g = 0; g < d.length; g++) c += d[g].AllocationUnits_M();
        d = Math.ceil(a.Ticks_M() * (c / 100));
        return RQTimeSpan.fromTicks(d)
    };
    b.BaseGanttModel.prototype.ComputeDuration = function(a) {
        return f(a, a.Effort_M(), this.AdjustDurationOnAssignment_M())
    };
    var f = b.BaseGanttModel.ComputeDuration = function(a, d, c) {
        return !1 == c || 0 == a.Assignments_M().length ? a.Effort_M() : b.BaseGanttModel.ConvertEffortToDuration(a, d, c, !1)
    };
    b.BaseGanttModel.prototype.GetStart = function(a, b) {
        var d = this.WorkTimeSchedule_M();
        return null == d ? a.addTimeSpan(RQTimeSpan.Zero_M().subtract(b)) : d.GetStart(a, b)
    };
    b.BaseGanttModel.AdjustEndTime = function(a, b) {
        return a <= DateTime.MinValue || a >= DateTime.MaxValue ? a : null == b ? a : b.ConverToPreviousWorkingTime(a)
    };
    b.BaseGanttModel.prototype.AdjustStartTime = function(a, d) {
        var c = !1;
        if (!0 == this.AdjustDurationOnAssignment && 0 < a.Assignments.length) {
            for (var g = Date.MaxValue, f = a.Assignments.length, e = 0; e < f; e++) {
                var q = a.Assignments[e];
                null != q.Resource.Schedule && (c = b.BaseGanttModel.AdjustStartTime(d, a.Effort_M(),
                    q.Resource.Schedule), g.isGreaterThan(c) && (g = c), c = !0)
            }
            c && (d = g)
        }!1 != c || 0 != a._childActivities.length && !1 != this.AutoCalculateSummaryTaskTimes_M() || (g = a.Schedule_M(), d = null != g ? b.BaseGanttModel.AdjustStartTime(d, a.Effort_M(), g) : this.AdjustStartTimeWithEffort(d, a.Effort_M()));
        return this.OnBeforeStartTimeChanging(a, d)
    };
    b.BaseGanttModel.prototype.AdjustStartTimeWithEffort = function(a, d) {
        return b.BaseGanttModel.AdjustStartTime(a, d, this.WorkTimeSchedule_M())
    };
    b.BaseGanttModel.AdjustStartTime = function(b, d, c) {
        return b ==
            Date.MinValue || b == Date.MaxValue || a(b, d, c) ? b : null == c ? b : c.ConvertToNextWorkingTime(b)
    };
    b.BaseGanttModel.prototype.RemoveActivity = function(a, b) {
        this.RecursivelyClearDependencies(b);
        null != a ? a.ChildActivities_M().remove(b) : this.Activities_M().remove(b);
        this.OnActivityRemoved(b)
    };
    b.BaseGanttModel.prototype.GetNewID = function() {
        return this.topID + 1
    };
    b.BaseGanttModel.prototype.SetTopSortOrder = function(a) {
        var b = this.ActivitiesCount_M();
        this._topSortOrder < b - 1 && (this._topSortOrder = b - 1);
        this._topSortOrder < a && (this._topSortOrder =
            a)
    };
    b.BaseGanttModel.prototype.GetNewSortOrder = function() {
        return this.ActivitiesCount_M() + 1
    };
    b.BaseGanttModel.prototype.UpdateSortOrders = function() {
        this.UpdateSortOrderFrom(null)
    };
    b.BaseGanttModel.prototype.IsAncestor = function(a, b) {
        for (var d = a.ChildActivities_M(), c = 0; c < d.length; c++) {
            var g = d[c];
            if (g == b || this.IsAncestor(g, b)) return !0
        }
        return !1
    };
    b.BaseGanttModel.prototype.CreateNewActivity = function(a, b) {};
    b.BaseGanttModel.prototype.CreateNewDependency = function(a, b, d, c) {
        d || (d = RadiantQ.Gantt.DependencyType.FinishToStart);
        c || (c = RQTimeSpan.Zero_M());
        return this.CreateNewDependencyInternal(a, b, d, c, !1)
    };
    b.BaseGanttModel.prototype.PrepareParenting = function(a, b) {
        var d = this.Dependencies_M();
        this.RemoveAnyParentChildDependencies(a, b);
        for (var c = d.GetSuccessors(a), g = 0; g < c.length; g++) this.RemoveDependenciesLeadingTo(c[g], b);
        d = d.GetSuccessors(b);
        for (g = 0; g < d.length; g++) this.RemoveDependenciesLeadingTo(d[g], a);
        d = b.ChildActivities_M();
        for (g = 0; g < d.length; g++) this.PrepareParenting(a, d[g]);
        for (; null != (a = a.Parent);) this.RemoveAnyParentChildDependencies(a,
            b)
    };
    b.BaseGanttModel.prototype.CanAddNewDependency = function(a, d, c) {
        c || (c = b.NewDependencyAddScenarioType.None);
        if (!1 == this.ValidateDependencySetting_M()) return !0;
        var g = this.Dependencies_M();
        return a == d || !0 == g.DoesConstraintExist(a, d, !0) || !0 == g.DoesConstraintExist(d, a, !1) || !1 == this.CanAddNewDependencyRecursive(a, d, 0) ? !1 : null != this.NewDependencyValidator && "function" == typeof this.NewDependencyValidator ? this.NewDependencyValidator(a, d, c) : !0
    };
    b.BaseGanttModel.prototype.NewDependencyValidator = null;
    b.BaseGanttModel.prototype.ApplyPreferredStartTimeOnActivity =
        function(a, b) {
            var d = a.ChildActivities_M();
            if (0 < d.length && this.AutoCalculateSummaryTaskTimes_M())
                for (var c = 0; c < d.length; c++) this.ApplyPreferredStartTimeOnActivity(d[c], b);
            else d = a.PreferredStartTime_M(), d > b && (b = d), a.StartTime_M(b)
    };
    b.BaseGanttModel.prototype.GetEnumerator = function() {
        return null != this._actitivites ? this._actitivites.GetEnumerator() : null
    };
    b.BaseGanttModel.prototype.GetResourceActivityList = function(a) {
        return this.ResourceAssignmentTracker_M().GetResourceActivityList(a)
    };
    b.BaseGanttModel.prototype.Filter =
        function(a, b) {
            var d = this.Activities_M();
            null == b && (b = new RadiantQ.Gantt.Utils.FilterOptions);
            for (var c = 0; c < d.length; c++) this.ApplyFilterOnActivity(d[c], a, b)
    };
    b.BaseGanttModel.prototype.ApplyFilterOnActivity = function(a, b, d) {
        var c = a.ChildActivities_M();
        if (0 < c.length) {
            for (var g = null != b ? b(a) : !!1, f = 0; f < c.length; f++) var e = !this.ApplyFilterOnActivity(c[f], b, d),
            g = g | e;
            !1 == d.AlwaysShowSummaryTask && a.IsFilteredOut_M(!g)
        } else null != b ? (b = !b(a), a.IsFilteredOut_M(b)) : a.IsFilteredOut_M(!1);
        return a.IsFilteredOut_M()
    };
    b.ActivitiesCollection =
        function(a, d) {
            this.isActivitiesCollection = !0;
            this._actColl = [];
            this.isRecalculatingTimes = !1;
            this.AdjustStartTimeForConstraints = new ObjectEvent("AdjustStartTimeForConstraints");
            this.CollectionChanged = new ObjectEvent("CollectionChanged");
            this.PropertyChanged = new ObjectEvent("PropertyChanged");
            this.ChildCollectionChanged = new ObjectEvent("ChildCollectionChanged");
            this.base = RadiantQ.Gantt.Utils.IUIUpdateable;
            this.base();
            Array.call(this);
            this._parent = a;
            this._model = d;
            this._progressPercent = 0;
            this._startTime =
                Date.MaxValue;
            this._endTime = Date.MinValue;
            this._cumEffort = RQTimeSpan.Zero_M();
            this._prefStartTime = Date.MinValue;
            null != this._parent && (this._parent_PropertyChangedHandler = this._parent.PropertyChanged.subscribe(this._parent_PropertyChanged, this));
            this.OnAdjustStartTimeForConstraints = function(a) {
                null != this.AdjustStartTimeForConstraints && this.AdjustStartTimeForConstraints.raise(this, a)
            };
            this.OnChildCollectionChanged = function(a, b) {
                null != this.ChildCollectionChanged && this.ChildCollectionChanged.raise(a, b)
            };
            this.OnPropertyChanged = function(a) {
                this.PropertyChanged && 0 < this.PropertyChanged.fn.length && this.PropertyChanged.raise(this, {
                    PropertyName: a
                })
            };
            this.PartialUpdate = function(a) {
                this._disposed || (a && (!0 == a.isIActivity || a instanceof RadiantQ.Gantt.Model.IActivity) ? this.UpdateTimes(a) : this.TotalUpdate())
            };
            this.TotalUpdate = function() {
                this._disposed || (this.RecalculateTimes(), this.UpdateProgressPercent())
            };
            this._disposed = !1;
            b.ActivitiesCollection.prototype.Dispose = this.Dispose = function() {
                for (var a = 0; a < this.length; a++) this[a].Dispose();
                this._disposed = !0;
                null != this._parent && this._parent_PropertyChangedHandler && (this._parent_PropertyChangedHandler.Dispose(), this._parent_PropertyChangedHandler = null);
                this._actChildCollectionChangedHandler && (this._actChildCollectionChangedHandler.Dispose(), this._actChildCollectionChangedHandler = null);
                this._actPropertyChangedHandler && (this._actPropertyChangedHandler.Dispose(), this._actPropertyChangedHandler = null);
                this._actAdjustStartTimeForConstraintsHandler && (this._actAdjustStartTimeForConstraintsHandler.Dispose(),
                    this._actAdjustStartTimeForConstraintsHandler = null);
                this.AdjustStartTimeForConstraints && this.AdjustStartTimeForConstraints.Dispose();
                this.AdjustStartTimeForConstraints = null;
                this.CollectionChanged && this.CollectionChanged.Dispose();
                this.CollectionChanged = null;
                this.PropertyChanged && this.PropertyChanged.Dispose();
                this.PropertyChanged = null;
                this.ChildCollectionChanged && this.ChildCollectionChanged.Dispose();
                this.ChildCollectionChanged = null
            };
            return this
    };
    b.ActivitiesCollection.prototype = new RadiantQ.Gantt.Utils.IUIUpdateable;
    b.ActivitiesCollection.prototype = [];
    b.ActivitiesCollection.prototype.Model_M = function() {
        return this._model
    };
    b.ActivitiesCollection.prototype.StartTime_M = function(a) {
        if (0 == arguments.length) return this._startTime;
        !1 == this._startTime.equals(a) && (this._startTime = a, this.OnPropertyChanged("StartTime", a))
    };
    b.ActivitiesCollection.prototype.PreferredStartTime_M = function(a) {
        if (0 == arguments.length) return this._prefStartTime;
        !1 == this._prefStartTime.equals(a) && (this._prefStartTime = a, this.OnPropertyChanged("PreferredStartTime",
            a))
    };
    b.ActivitiesCollection.prototype.EndTime_M = function(a) {
        if (0 == arguments.length) return this._endTime;
        !1 == this._endTime.equals(a) && (this._endTime = a, this.OnPropertyChanged("EndTime", a))
    };
    b.ActivitiesCollection.prototype.CumulativeEffort_M = function() {
        if (0 == arguments.length) return this._cumEffort
    };
    b.ActivitiesCollection.prototype.ProgressPercent_M = function(a) {
        if (0 == arguments.length) return this._progressPercent;
        this._progressPercent != a && (this._progressPercent = a, this.OnPropertyChanged("ProgressPercent",
            a))
    };
    b.ActivitiesCollection.prototype.Schedule_M = function(a) {
        if (0 == arguments.length) return this._schedule;
        this._schedule != a && (this._schedule = a, this.OnPropertyChanged("Schedule", a))
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.ActivitiesCollection.prototype, "Model", {
        get: function() {
            return this.Model_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ActivitiesCollection.prototype, "StartTime", {
        get: function() {
            return this.StartTime_M()
        },
        set: function(a) {
            this.StartTime_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ActivitiesCollection.prototype, "PreferredStartTime", {
        get: function() {
            return this.PreferredStartTime_M()
        },
        set: function(a) {
            this.PreferredStartTime_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ActivitiesCollection.prototype, "EndTime", {
        get: function() {
            return this.EndTime_M()
        },
        set: function(a) {
            this.EndTime_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ActivitiesCollection.prototype, "CumulativeEffort", {
        get: function() {
            return this.CumulativeEffort_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ActivitiesCollection.prototype, "ProgressPercent", {
        get: function() {
            return this.ProgressPercent_M()
        },
        set: function(a) {
            this.ProgressPercent_M(a)
        },
        enumerable: !0,
        configurable: !0
    }));
    b.ActivitiesCollection.prototype._parent_PropertyChanged = function(a, b) {
        "DefaultWBSID" == b.PropertyName && this.UpdateChildWBSIDs()
    };
    b.ActivitiesCollection.prototype.UpdateChildWBSIDs = function() {
        if (!1 != this.IsWBSCalcEnabled())
            for (var a = 0; a < this.length; a++) this.UpdateChildWBSID(a)
    };
    b.ActivitiesCollection.prototype.UpdateChildWBSID = function(a) {
        var d = this[a];
        a = new b.ProvideDefaultWBSIDEventArgs(d, d.WBSID_M(), a, this);
        this._model.RaiseProvideWBSID(a);
        d.DefaultWBSID_M(a.NewWBSID_M())
    };
    b.ActivitiesCollection.prototype.IsWBSCalcEnabled = function() {
        var a = this._model;
        return null == a || !1 == a.CanProvideWBSID() ? !1 : !0
    };
    b.ActivitiesCollection.prototype.add = function(a) {
        0 <= this.indexOf(a) || (this.push(a), this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(null, a, this.length -
            1)))
    };
    b.ActivitiesCollection.prototype.insert = function(a, b) {
        if (a <= this.length || 0 == a) this.splice(a, 0, b), this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(null, b, a))
    };
    b.ActivitiesCollection.prototype.remove = function(a) {
        var b = this.indexOf(a);
        0 > b || (this.splice(b, 1), this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(a, null, b)))
    };
    b.ActivitiesCollection.prototype.indexOf = function(a) {
        return e.inArray(a, this)
    };
    b.ActivitiesCollection.prototype.contains = function(a) {
        return -1 ===
            this.indexOf(a) ? !0 : !1
    };
    b.ActivitiesCollection.prototype.ClearItems = function() {
        if (b.AutoCalculateSummaryTaskTimes_M())
            for (var a = 0; a < this.collections.length; a++) {
                var d = this.collections.GetItemByIndex(a);
                this.UnsubscribeToChildEvents(d)
            }
        this.splice(0, this._length)
    };
    b.ActivitiesCollection.prototype.OnCollectionChanged = function(a, b) {
        this.CollectionChanged.raise(this, b);
        var d = 2147483647;
        if (null != b.OldItems)
            for (var d = b.OldStartingIndex, c = 0; c < b.OldItems.length; c++) {
                var g = b.OldItems[c];
                this.UnsubscribeToChildEvents(g)
            }
        if (null !=
            b.NewItems)
            for (d = d < b.NewStartingIndex ? d : b.NewStartingIndex, c = 0; c < b.NewItems.length; c++) g = b.NewItems[c], this.SubscribeToChildEvents(g);
        if (2147483647 != d && this.IsWBSCalcEnabled())
            for (c = d; c < this.length; c++) this.UpdateChildWBSID(c);
        "remove" == b.type && 0 == this.length && this._model.AutoCalculateSummaryTaskTimes_M() && (this.StartTime_M(Date.MaxValue), this.EndTime_M(Date.MinValue), this.PreferredStartTime_M(Date.MaxValue))
    };
    RadiantQ.Gantt.Model.ActivitiesCollection.prototype.SubscribeToChildEvents = function(a) {
        b.DataBoundGanttModel.IsBuildingModel ||
            this.UpdateProgressPercentForChild(a, !0);
        (!0 == a.isBaseActivity || a instanceof RadiantQ.Gantt.Model.BaseActivity) && a.Parent_M(this._parent);
        this._actChildCollectionChangedHandlers || (this._actChildCollectionChangedHandlers = {});
        this._actPropertyChangedHandlers || (this._actPropertyChangedHandlers = {});
        this._actAdjustStartTimeForConstraintsHandlers || (this._actAdjustStartTimeForConstraintsHandlers = {});
        var d = a.ChildCollectionChanged.subscribe(this.activity_ChildCollectionChanged, this);
        this._actChildCollectionChangedHandlers[a.id] =
            d;
        var c = this._model;
        !1 != c.AutoCalculateSummaryTaskTimes_M() && (d = a.PropertyChanged.subscribe(this.activity_PropertyChanged, this), this._actPropertyChangedHandlers[a.id] = d, d = a.AdjustStartTimeForConstraints.subscribe(this.activity_AdjustStartTimeForConstraints, this), this._actAdjustStartTimeForConstraintsHandlers[a.id] = d, !1 == a.isBaseActivity && !1 == a instanceof RadiantQ.Gantt.Model.BaseActivity && RadiantQ.Gantt.Model.BaseActivity.call(a, c), d = a.ComputeConstrainedStartTime(), a.StartTime_M() <= d && a.ShiftForwardTo(d),
            RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, a), (a = a.CumulativeEffort_M()) && this.UpdateEffort(RQTimeSpan.Zero_M(), a))
    };
    b.ActivitiesCollection.prototype.UnsubscribeToChildEvents = RadiantQ.Gantt.Model.ActivitiesCollection.prototype.UnsubscribeToChildEvents = function(a) {
        (a instanceof RadiantQ.Gantt.Model.BaseActivity || a.isBaseActivity) && a.Parent_M(null);
        if (this._actChildCollectionChangedHandlers && this._actChildCollectionChangedHandlers[a.id]) {
            var b = this._actChildCollectionChangedHandlers[a.id];
            b.Dispose();
            delete this._actChildCollectionChangedHandlers[a.id]
        }
        this._actPropertyChangedHandlers && this._actPropertyChangedHandlers[a.id] && (b = this._actPropertyChangedHandlers[a.id], b.Dispose(), delete this._actPropertyChangedHandlers[a.id]);
        this._actAdjustStartTimeForConstraintsHandlers && this._actAdjustStartTimeForConstraintsHandlers[a.id] && (b = this._actAdjustStartTimeForConstraintsHandlers[a.id], b.Dispose(), delete this._actAdjustStartTimeForConstraintsHandlers[a.id]);
        !1 != this._model.AutoCalculateSummaryTaskTimes_M() &&
            (RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, null), this.UpdateEffort(a.CumulativeEffort_M(), RQTimeSpan.Zero_M()))
    };
    b.ActivitiesCollection.prototype.activity_PropertyChanged = function(a, b) {
        this.OnChildPropertyChanged(a, b)
    };
    b.ActivitiesCollection.prototype.OnChildPropertyChanged = function(a, b) {
        "StartTime" != b.PropertyName && "EndTime" != b.PropertyName && "PreferredStartTime" != b.PropertyName || RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, a);
        "CumulativeEffort" == b.PropertyName && this.UpdateEffort(b.OldValue,
            a.CumulativeEffort_M());
        if ("ProgressPercent" == b.PropertyName || null != this._model.CustomProgressCalculation_M() && ("Effort" == b.PropertyName || "CumulativeEffort" == b.PropertyName)) RadiantQ.Gantt.Utils.DelayUpdateUtil.IsUpdating() || this.UpdateProgressPercent()
    };
    b.ActivitiesCollection.prototype.DelayUpdate = function(a) {
        RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, a)
    };
    b.ActivitiesCollection.prototype.UpdateEffort = function(a, b) {
        var d = this.CumulativeEffort_M();
        b && d && (d = d.add(b));
        a && d && (d = d.subtract(a));
        d && b || (d = b);
        this._cumEffort != d && (this._cumEffort = d, this.OnPropertyChanged("CumulativeEffort", a, b))
    };
    b.ActivitiesCollection.prototype.UpdateTimes = function(a) {
        if (!1 != this._model.AutoCalculateSummaryTaskTimes_M()) {
            this.isRecalculatingTimes = !0;
            var b = !1,
                d = this.StartTime_M(),
                c = a.StartTime_M();
            c <= d ? this.StartTime_M(c) : b = !0;
            d = a.PreferredStartTime_M();
            d <= this.PreferredStartTime_M() ? this.PreferredStartTime_M(d) : b = !0;
            !1 == b && (a = a.EndTime_M(), a >= this.EndTime_M() ? this.EndTime_M(a) : b = !0);
            this.isRecalculatingTimes = !1;
            b && this.RecalculateTimes()
        }
    };
    b.ActivitiesCollection.prototype.UpdateProgressPercent = function() {
        if (null != this._parent && !1 != this._model.AutoCalculateSummaryTaskTimes_M())
            if (0 == this.length) this.ProgressPercent_M(0);
            else {
                var a = this._model.CustomProgressCalculation_M();
                if (null != a) this.ProgressPercent_M(a(this._parent));
                else {
                    for (var b = a = 0; b < this.length; b++) a += this[b].ProgressPercent_M();
                    this.ProgressPercent_M(a / this.length)
                }
            }
    };
    b.ActivitiesCollection.prototype.UpdateProgressPercentForChild = function(a,
        b) {
        var d = this._model.CustomProgressCalculation_M();
        null != d && null != this._parent ? this.ProgressPercent_M(d(this._parent)) : b ? (d = this.ProgressPercent_M() * (this.length - 1), d += a.ProgressPercent_M(), this.ProgressPercent_M(d / this.length)) : 0 == this.length ? this.ProgressPercent_M(0) : (d = this.ProgressPercent_M() * (this.length + 1), d -= a.ProgressPercent_M(), this.ProgressPercent_M(d / this.length))
    };
    b.ActivitiesCollection.prototype.activity_AdjustStartTimeForConstraints = function(a, b) {
        this.OnAdjustStartTimeForConstraints(b)
    };
    b.ActivitiesCollection.prototype.activity_ChildCollectionChanged = function(a, b) {
        this.OnChildCollectionChanged(a, b)
    };
    b.ActivitiesCollection.prototype.RecalculateTimes = function() {
        if (!1 != this._model.autoCalculateSummaryTaskTimes) {
            this.isRecalculatingTimes = !0;
            if (0 < this.length) {
                for (var a = Date.MaxValue, b = Date.MinValue, d = Date.MaxValue, c = 0; c < this.length; c++) {
                    var g = this[c];
                    g._startTime < a && (a = g._startTime);
                    var f = g.PreferredStartTime_M();
                    f < d && (d = f);
                    g = g.EndTime_M();
                    g > b && (b = g)
                }
                c = new RadiantQ.Gantt.Utils.DelayUpdates;
                this.StartTime_M(a);
                this.EndTime_M(b);
                this.PreferredStartTime_M(d);
                c.Dispose()
            }
            this.isRecalculatingTimes = !1
        }
    };
    b.BaseActivity = function(a) {
        this.processingPredString = !1;
        this.isBaseActivity = !0;
        RadiantQ.Gantt.Model.IActivity.call(this);
        this.IsDisposed = !1;
        this.Model = a;
        this._assignments = new b.ResourceAssignmentCollection(this);
        this.propertiesDict = null;
        this._updatedProps = {};
        0 == arguments.length && (RadiantQ.Gantt.Model.BaseActivity.IsEndTimeCachingEnabled = !0);
        this.cachedEndTime = null;
        RadiantQ.Gantt.Model.BaseActivity.IsEndTimeCachingEnabled = !0;
        this.CreateChildActivitiesCollection || (b.BaseActivity.prototype.CreateChildActivitiesCollection = function() {
            return new b.ActivitiesCollection(this, this.Model)
        });
        this._childActivities = this.CreateChildActivitiesCollection();
        this.PartialUpdate = function(a) {
            "AssignmentsCollectionChanged" == a ? (this.OnPropertyChanged("Assignments"), this.OnPropertyChanged("EndTime")) : this.TotalUpdate()
        };
        this.TotalUpdate = function() {
            var a = this.ChildActivities_M();
            if (0 < a.length && this.Model.AutoCalculateSummaryTaskTimes_M()) {
                var b =
                    this.StartTime_M(),
                    d = this.EndTime_M(),
                    c = a.StartTime_M(),
                    g = a.EndTime_M();
                this.StartTime_M(c);
                !1 == a.PreferredStartTime_M().equals(Date.MinValue) && this.PreferredStartTime_M(a.PreferredStartTime_M());
                !0 == a.isRecalculatingTimes && !1 == b.equals(c) && !1 == d.equals(Date.MinValue) && d.equals(g) ? this.UpdateEndTime(d) : this.EndTime_M(g)
            }
        };
        this._defWbsID = this._wbsID = "";
        this._isAutoWBSID = !0;
        a && (this.Model = a, b.BaseGanttModel.IdCounter++, this.propertiesDict = [], this._childActivities = this.CreateChildActivitiesCollection(),
            this._childActsPropertyChangedHandler = this._childActivities.PropertyChanged.subscribe(this.childActivities_PropertyChanged, this), this._childActsCollectionChangedHandler = this._childActivities.CollectionChanged.subscribe(this.childActivities_CollectionChanged, this), this._childActsChildCollectionChangedHandler = this._childActivities.ChildCollectionChanged.subscribe(this.childActivities_ChildCollectionChanged, this), this._childActsAdjustStartTimeForConstraintsHandler = this._childActivities.AdjustStartTimeForConstraints.subscribe(this._childActivities_AdjustStartTimeForConstraints,
                this), this._assignsCollectionChangedHandler = this._assignments.CollectionChanged.subscribe(this._assignments_CollectionChanged, this), this._assignsPropertyChangedHandler = this._assignments.PropertyChanged.subscribe(this.Assignments_PropertyChanged, this), this._startTime = a.AdjustStartTimeWithEffort(Date.today(), new RQTimeSpan(1, 0, 0, 0, 0)), this._prefStartTime = this.GetDefaultStartTime());
        return this
    };
    b.BaseActivity.prototype = new RadiantQ.Gantt.Model.IActivity;
    b.BaseActivity.prototype.OnTimesChanged = function() {
        this.cachedEndTime =
            null;
        this.UpdateIsMileStone()
    };
    b.BaseActivity.prototype.UpdateIsMileStone = function() {
		this.StartTime_M().equals(this.EndTime_M()) ? this.IsMilestone_M(!0) : this.IsMilestone_M(!1)
    };
    b.BaseActivity.prototype.Dispose = function() {
        !0 != this.IsDisposed && (RadiantQ.Gantt.Model.IActivity.prototype.Dispose.call(this), this._childActsPropertyChangedHandler && (this._childActsPropertyChangedHandler.Dispose(), this._childActsPropertyChangedHandler = null), this._childActsCollectionChangedHandler && (this._childActsCollectionChangedHandler.Dispose(),
                this._childActsCollectionChangedHandler = null), this._childActsChildCollectionChangedHandler && (this._childActsChildCollectionChangedHandler.Dispose(), this._childActsChildCollectionChangedHandler = null), this._childActsAdjustStartTimeForConstraintsHandler && (this._childActsAdjustStartTimeForConstraintsHandler.Dispose(), this._childActsAdjustStartTimeForConstraintsHandler = null), this._assignsCollectionChangedHandler && (this._assignsCollectionChangedHandler.Dispose(), this._assignsCollectionChangedHandler = null),
            this._assignsPropertyChangedHandler && (this._assignsPropertyChangedHandler.Dispose(), this._assignsPropertyChangedHandler = null), this._depPropertyChangedHandler && (this._depPropertyChangedHandler.Dispose(), this._depPropertyChangedHandler = null), this._childActivities.Dispose(), this._assignments.Dispose(), this.IsDisposed = !0)
    };
    b.BaseActivity.prototype.IsParentExpanded_M = function() {
        var a = this.Parent_M();
        return null == a ? !0 : a.IsExpanded_M()
    };
    b.BaseActivity.prototype.IsParentVisible_M = function() {
        var a = this.Parent_M();
        return null == a ? !0 : a.IsVisible_M()
    };
    b.BaseActivity.prototype.StartTime_M = function(a) {
        if (0 == arguments.length) return this._startTime;
        this._startTime.equals(a) || this.ValidateAndSetStartTime(a)
    };
    b.BaseActivity.prototype.ValidateAndSetStartTime = function(a) {
        var d = new b.AdjustStartTimeEventArgs(this, a);
        this.OnAdjustStartTimeForConstraints(d);
        a = d.StartTime;
        d = this.Model.AdjustStartTime(this, a);
        if (this._startTime.equals(d)) a != d && this.OnPropertyChanged("StartTime", a, this._startTime);
        else {
            a = this._startTime instanceof
            Date ? this._startTime.clone() : this._startTime;
            this._startTime = d.clone();
            var c = new RadiantQ.Gantt.Utils.DelayUpdates;
            this.OnPropertyChanged("EndTime", this.cachedEndTime);
            this.OnPropertyChanged("StartTime", a, d);
            c.Dispose()
        }
    };
    b.BaseActivity.prototype.EndTime_M = function(a) {
        if (0 == arguments.length) return RadiantQ.Gantt.Model.BaseActivity.IsEndTimeCachingEnabled ? (null == this.cachedEndTime && (this.cachedEndTime = this.Model.ComputeEndTime(this)), this.cachedEndTime) : this.Model.ComputeEndTime(this);
        var b = this.EndTime_M();
        b && a && b.equals(a) || (null === a ? this.cachedEndTime = a : 0 <= a.compareTo(this.StartTime_M()) && this.UpdateEndTime(a))
    };
    b.BaseActivity.prototype.Effort_M = function(a) {
        if (0 == arguments.length) return this._effort ? this._effort : RQTimeSpan.Zero_M();
        "string" == typeof a && (a = RQTimeSpan.parse(a));
        if (!1 == this._effort.equals(a)) {
            var b = this._effort,
                d = this.CumulativeEffort_M(),
                c = this.Duration_M(),
                g = this.EndTime_M(),
                f = this.Model.AdjustEffort(this, a);
            this._effort = f;
            this._isUpdating = !0;
            this.OnPropertyChanged("Effort", b, f);
            this.OnPropertyChanged("Duration",
                c);
            this._isUpdating = !1;
            this.OnPropertyChanged("EndTime", g);
            this.OnPropertyChanged("CumulativeEffort", d, f)
        }
    };
    b.BaseActivity.prototype.Duration_M = function(a) {
        if (0 == arguments.length) return this.Model.ComputeDuration(this);
        this.Duration_M() != a && this.Effort_M(this.Model.ConvertDurationToEffort(a, this))
    };
    b.BaseActivity.prototype.Properties_M = function() {
        return this.propertiesDict
    };
    b.BaseActivity.prototype.Assignments_M = function(a) {
        if (0 == arguments.length) return this._assignments;
        this._assignments = a
    };
    b.BaseActivity.prototype.ChildActivities_M =
        function() {
            return this._childActivities
    };
    b.BaseActivity.prototype.WBSID_M = function(a) {
        if (0 == arguments.length) return this.IsAutoWBSID_M() ? this._defWbsID : this._wbsID;
        this.IsAutoWBSID_M(null == a || void 0 == a || "" == a);
        this._wbsID != a && (this._wbsID = a, this.OnPropertyChanged("WBSID"))
    };
    b.BaseActivity.prototype.DefaultWBSID_M = function(a) {
        if (0 == arguments.length) return this._defWbsID;
        this._defWbsID != a && (this._defWbsID = a, this.OnPropertyChanged("DefaultWBSID"), this.IsAutoWBSID_M() && this.OnPropertyChanged("WBSID"))
    };
    b.BaseActivity.prototype.IsAutoWBSID_M = function(a) {
        if (0 == arguments.length) return this._isAutoWBSID;
        this._isAutoWBSID != a && (this._isAutoWBSID = a, this.OnPropertyChanged("IsAutoWBSID"))
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.BaseActivity.prototype, "IsParentExpanded", {
        get: function() {
            return this.IsParentExpanded_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "IsParentVisible", {
        get: function() {
            return this.IsParentVisible_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "StartTime", {
        get: function() {
            return this.StartTime_M()
        },
        set: function(a) {
            this.StartTime_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "EndTime", {
        get: function() {
            return this.EndTime_M()
        },
        set: function(a) {
            this.EndTime_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "Effort", {
        get: function() {
            return this.Effort_M()
        },
        set: function(a) {
            this.Effort_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "Duration", {
        get: function() {
            return this.Duration_M()
        },
        set: function(a) {
            this.Duration_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "Properties", {
        get: function() {
            return this.Properties_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "Assignments", {
        get: function() {
            return this.Assignments_M()
        },
        set: function(a) {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype,
        "ChildActivities", {
            get: function() {
                return this.ChildActivities_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.BaseActivity.prototype, "WBSID", {
        get: function() {
            return this.WBSID_M()
        },
        set: function(a) {
            this.WBSID_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype, "DefaultWBSID", {
        get: function() {
            return this.DefaultWBSID_M()
        },
        set: function(a) {
            this.DefaultWBSID_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.BaseActivity.prototype,
        "IsAutoWBSID", {
            get: function() {
                return this.IsAutoWBSID_M()
            },
            set: function(a) {
                this.IsAutoWBSID_M(a)
            },
            enumerable: !0,
            configurable: !0
        }));
    b.BaseActivity.prototype.SetPreCalculatedEndTime = function(a, b) {
        this.cachedEndTime = a;
        this._childActivities.EndTime_M(a);
        this._effort = b
    };
    b.BaseActivity.prototype.UpdateEndTime = function(a) {
        this.cachedEndTime = null;
        var b = this.Model.ComputeEffort(this, a);
        !1 == this.Effort_M().equals(b) ? this.Effort_M(b) : this.OnPropertyChanged("EndTime", a)
    };
    b.BaseActivity.prototype.OnVerticalPositionChanged =
        function() {
            null != this.VerticalPositionChanged && this.VerticalPositionChanged.raise(this, null)
    };
    b.BaseActivity.prototype.AdjustFinishForLag = function(a, b, d) {
        if (null == d) return a.addTimeSpan(b);
        a = b.isGreaterThanOrEqualTo(RQTimeSpan.Zero_M()) ? (new RadiantQ.Gantt.TimePeriodCollection(d.ConvertToNextWorkingTimeIntervals(a, b))).Finish : (new RadiantQ.Gantt.TimePeriodCollection(d.ConvertToPreviousWorkingTimeIntervals(a, new RQTimeSpan(-b.totalMilliseconds_M())))).Finish;
        return d.ConvertToNextWorkingTime(a)
    };
    b.BaseActivity.prototype.GetScheduleToPlotWith =
        function(a) {
            var b = this.Assignments_M(),
                d = this.Schedule_M();
            a = null != d ? d : a;
            if (null == b || 0 == b.length || 1 < b.length || 1 != b.length) return a;
            b = b[0].Resource_M().Schedule_M();
            return null != b ? b : a
    };
    RadiantQ.Gantt.Model.BaseActivity.prototype.WorkTimeSchedule_M = function(a) {
        if (0 == arguments.length) return this._schedule;
        this._schedule != a && (this._schedule = a, this.OnPropertyChanged("WorkTimeSchedule"))
    };
    RadiantQ.Gantt.Model.BaseActivity.prototype.Schedule_M = function(a) {
        if (0 == arguments.length) return this._schedule;
        this._schedule !=
            a && (this._schedule = a, this.OnPropertyChanged("Schedule"), this.ValidateAndSetStartTime(this._startTime), this.OnPropertyChanged("EndTime"))
    };
    b.BaseActivity.prototype._childActivities_AdjustStartTimeForConstraints = function(a, b) {
        this.OnAdjustStartTimeForConstraints(b)
    };
    b.BaseActivity.prototype.childActivities_ChildCollectionChanged = function(a, b) {
        this.OnChildCollectionChanged(a, b)
    };
    b.BaseActivity.prototype.childActivities_CollectionChanged = function(a, b) {
        this.OnChildCollectionChanged(this, b);
        var d = this.ChildActivities_M();
        "remove" == b.type && 0 == d.length ? this.Model.ApplyPreferredStartTimeOnActivity(this, this.PreferredStartTime_M()) : "insert" == b.type && 1 == d.length && this.OnPropertyChanged("CumulativeEffort")
    };
    b.BaseActivity.prototype.childActivities_PropertyChanged = function(a, b) {
        "StartTime" == b.PropertyName || "EndTime" == b.PropertyName || "Effort" == b.PropertyName ? this.Model.AutoCalculateSummaryTaskTimes_M() && RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, null) : "ProgressPercent" == b.PropertyName ? this.ProgressPercent_M(this.ChildActivities_M().ProgressPercent_M()) :
            "CumulativeEffort" == b.PropertyName && this.CumulativeEffort_M(this.ChildActivities_M().CumulativeEffort_M())
    };
    b.BaseActivity.prototype.OnChildCollectionChanged = function(a, b) {
        null != this.ChildCollectionChanged && this.ChildCollectionChanged.raise(a, b)
    };
    b.BaseActivity.prototype.OnPropertyChanged = function(a, b) {
        if ("EndTime" == a || "StartTime" == a || "Effort" == a || "Duration" == a || "Assignments" == a || "IsMilestone" == a) this.OnTimesChanged(), this.OnPropertyChanged("Times", b);
        "Assignments" == a && this.OnPropertyChanged("EndTime");
        null != this.PropertyChanged && this.PropertyChanged.raise(_baseActivity, a, b)
    };
    b.BaseActivity.prototype.Assignments_PropertyChanged = function(a, b) {
        "ResourceInfo" == b.PropertyName && this.OnPropertyChanged("Assignments")
    };
    b.BaseActivity.prototype._assignments_CollectionChanged = function(a, b) {
        null == b.NewItems && null == b.OldItems && b.Action != RadiantQ.NotifyCollectionChangedAction.Reset || RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this, "AssignmentsCollectionChanged")
    };
    b.BaseActivity.prototype.dependency_PropertyChanged =
        function(a, b) {
            this.UpdatePredecessorString()
    };
    b.BaseActivity.prototype.processingPredString = !1;
    b.BaseActivity.prototype.UpdatePredecessorString = function() {
        if (this.Model && !0 != this.processingPredString) {
            var a = this.Model.Dependencies_M().GetPredecessors(this),
                a = b.DataBoundGanttModel.ConstructPredecessorString(a, this.Model.LagStringUnitsInHours_M());
            this.PredecessorIndexString_M(a)
        }
    };
    b.BaseActivity.prototype.OnPropertyChanged = function(a, b, d) {
        if (!1 == this.Model._onInit) switch (a) {
            case "Times":
            case "StartTime":
            case "EndTime":
            case "PreferredStartTime":
            case "Effort":
            case "Parent":
            case "PredecessorIndexString":
            case "ProgressPercent":
            case "ID":
            case "ActivityName":
            case "SortOrder":
            case "Description":
            case "Assignments":
                var c =
                    this._updatedProps[a];
                c || (c = this._updatedProps[a] = {});
                c.OldValue = b;
                this._propertyChangeTimer && clearTimeout(this._propertyChangeTimer);
                this._propertyChangeTimer = setTimeout(function() {
                    var b = this.Parent_M(),
                        b = b ? b : this.Model._activities;
                    this.Model.ActivityUpdated.raise(b._childActivities, this, this._updatedProps);
                    this.triggerEvent && this.triggerEvent(a);
                    this._updatedProps = {}
                }.bind(this), 0)
        }
        if ("EndTime" == a || "StartTime" == a || "Effort" == a || "Duration" == a || "Assignments" == a) this.OnTimesChanged(), this.OnPropertyChanged("Times",
            b, d);
        "Assignments" == a && this.OnPropertyChanged("EndTime");
        this.PropertyChanged && 0 < this.PropertyChanged.fn.length && this.PropertyChanged.raise(this, {
            PropertyName: a,
            OldValue: b,
            value: d
        })
    };
    b.BaseActivity.prototype.ComputeConstrainedStartTime = function() {
        var a = new b.AdjustStartTimeEventArgs(this, this.StartTime_M());
        this.OnAdjustStartTimeForConstraints(a);
        return a.StartTime
    };
    b.BaseActivity.prototype.OnAdjustStartTimeForConstraints = function(a) {
        if (!1 != this.Model.EnforceDependencyConstraints_M() && !1 != b.BaseGanttModel.ShouldEnforceDependency(this,
            this.Model)) {
            for (var d = a.StartTime, c = 0 < this.Model.Dependencies_M().length ? this.Model.Dependencies_M().GetPredecessors(this) : [], g = 0; g < c.length; g++) {
                var f = c[g];
                f.FromActivity_M() != this && (f = f.ComputeLatestToActivityStartTime(), f > d && (d = f))
            }
            a.StartTime = d;
            null != this.AdjustStartTimeForConstraints && this.AdjustStartTimeForConstraints.raise(this, a)
        }
    };
    b.BaseActivity.prototype.GetDefaultStartTime = function() {
        return Date.today()
    };
    b.BaseActivity.prototype.CreateNewChildActivity = function(a) {};
    b.BaseActivity.prototype.IsCritical =
        function(a, b, d) {
            if (null != this.Model) {
                var g = this.Model.AllActivities_M().asArray,
                    f = this.Model.WorkTimeSchedule_M(),
                    e = null == f ? this.EndTime_M().addTimeSpan(b) : (new RadiantQ.Gantt.TimePeriodCollection(f.ConvertToNextWorkingTimeIntervals(this.EndTime_M(), b))).Finish;
                if (e >= a || null != d && d.ContainsKey(this) && e >= d[this]) return !0;
                if (0 == this.ChildActivities_M().length)
                    for (var q = this; null != q; q = q.Parent_M())
                        for (var s = 0; s < g.length; s++) {
                            var r = g[s];
                            if (q != r)
                                for (var t = this.Model.Dependencies_M().GetPredecessors(r),
                                        x = 0; x < t.length; x++) {
                                    var w = t[x];
                                    if (w.FromActivity_M() == q && (w.Type_M() == c.FinishToStart || w.Type_M() == c.StartToStart) && this.AdjustFinishForLag(e, w.Lag_M(), f) >= r.StartTime_M() && r.IsCritical(a, b, d)) return !0
                                }
                        } else
                            for (g = this.ChildActivities_M(), s = 0; s < g.length; s++)
                                if (g[s].IsCritical(a, b, d)) return !0
            }
            return !1
    };
    b.BaseActivity.prototype.GetWorkingHoursTimeSpan = function() {
        var a = this.Effort_M(),
            b = this.Schedule_M(),
            b = null != b ? b : this.Model.WorkTimeSchedule_M();
        0 < this.Assignments_M().length && null != b && (a = b.GetEffort(this.StartTime_M(),
            this.EndTime_M()));
        return a
    };
    b.BaseActivity.prototype.OnAddedPredecessorDependency = function(a) {
        a.ToActivity_M() == this && (this._depPropertyChangedHandler = a.PropertyChanged.subscribe(this.dependency_PropertyChanged, this), this.UpdatePredecessorString())
    };
    b.BaseActivity.prototype.OnRemovedPredecessorDependency = function(a) {
        a.PropertyChanged.unsubscribe(this.dependency_PropertyChanged, this);
        this.UpdatePredecessorString()
    };
    b.BaseActivity.prototype.ShiftForwardTo = function(a) {
        this.StartTime_M();
        var b = this.ChildActivities_M();
        if (0 < b.length && this.Model.AutoCalculateSummaryTaskTimes_M()) {
            for (var d = new RadiantQ.Gantt.Utils.DelayUpdates, c = 0; c < b.length; c++) b[c].ShiftForwardTo(a);
            d.Dispose()
        } else this.Model && this.StartTime_M() < a && (a = this.Model.ConvertToValidStartTime(a, RQTimeSpan.Zero_M(), this.Effort_M()), this.StartTime_M(a))
    };
    b.BaseActivity.prototype.toString = function() {
        return this.ID_M() + "; " + this.ActivityName_M() + "; " + this.StartTime_M().Date() + "/" + (this.Effort_M() ? this.Effort_M().hours_M() : void 0) + "hrs; ChildCount: " + this.ChildActivities_M().length +
            " "
    };
    b.BaseGanttResource = function() {
        this.BaseGanttResource = !0;
        this.base = b.IGanttResource;
        this.base();
        return this
    };
    b.BaseGanttResource.prototype = new b.IGanttResource;
    b.BaseGanttResource.prototype.OnPropertyChanged = function(a) {
        null != this.PropertyChanged && this.PropertyChanged.raise(this, a)
    };
    b.BaseGanttResource.prototype.toString = function() {
        return this.ResourceName_M()
    };
    b.BaseGanttResource.prototype.Dispose = function() {};
    b.ResourceAssignment = function(a, b) {
        this.ResourceAssignment = !0;
        this._allocUnits = 0;
        b || (b = 100);
        this._allocUnits = b;
        a && (this._resource = a, this._allocUnits = 1E5 > b ? this._allocUnits : 1E5);
        return this
    };
    b.ResourceAssignment.prototype.Resource_M = function() {
        return this._resource
    };
    b.ResourceAssignment.prototype.AllocationUnits_M = function() {
        return this._allocUnits
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.ResourceAssignment.prototype, "Resource", {
        get: function() {
            return this.Resource_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ResourceAssignment.prototype,
        "AllocationUnits", {
            get: function() {
                return this.AllocationUnits_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }));
    b.ResourceAssignmentCollection = function(a) {
        this.base = Array;
        this.base();
        this.parentActivity = a;
        this.CollectionChanged = new ObjectEvent("CollectionChanged");
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this.push = b.ResourceAssignmentCollection.prototype.add;
        this.schedules = [];
        return this
    };
    b.ResourceAssignmentCollection.prototype = [];
    b.ResourceAssignmentCollection.prototype.ParentActivity_M =
        function() {
            return this.parentActivity
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.ResourceAssignmentCollection.prototype, "ParentActivity", {
        get: function() {
            return this.ParentActivity_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.ResourceAssignmentCollection.prototype, "AsText", {
        get: function() {
            return this.AsText_M()
        },
        set: function(a) {
            this.AsText_M(a)
        },
        enumerable: !0,
        configurable: !0
    }));
    b.ResourceAssignmentCollection.prototype.AsText_M = function(a) {
        if (0 == arguments.length) {
            if (0 ==
                this.length) return "";
            for (var d = new b.ConvertResourceListFromResourceStringEventArgs("", !0), c = 0; c < this.length; c++) {
                var g = this[c];
                d._assignments.add(g)
            }
            this.parentActivity.OnConvertResourceListFromResourceString(d);
            return d.ResourceText
        }
        this.clear();
        if (a && "" != a)
            for (d = new b.ConvertResourceListFromResourceStringEventArgs(a, !1), this.parentActivity.OnConvertResourceListFromResourceString(d), c = 0; c < d._assignments.length; c++) g = d._assignments[c], this.add(g)
    };
    b.ResourceAssignmentCollection.prototype.add = function(a) {
        if (a) {
            var b =
                a.Resource_M().Schedule_M();
            b && this.schedules.push(b);
            Array.prototype.push.call(this, a);
            this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(null, a))
        }
    };
    b.ResourceAssignmentCollection.prototype.remove = function(a) {
        var b = this.indexOf(a);
        if (!(0 > b)) {
            var d = a.Resource_M().Schedule_M();
            if (d) {
                d = this.schedules.indexOf(d);
                if (0 > d) return;
                this.schedules.splice(d, 1)
            }
            this.splice(b, 1);
            this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(a, null))
        }
    };
    b.ResourceAssignmentCollection.prototype.clear =
        function() {
            0 != this.length && (this.splice(0, this.length), this.OnCollectionChanged(this, new RadiantQ.NotifyCollectionChangedEventArgs(null, null)))
    };
    b.ResourceAssignmentCollection.prototype.indexOf = function(a) {
        for (var b = 0; b < this.length; b++)
            if (this[b] === a) return b;
        return -1
    };
    b.ResourceAssignmentCollection.prototype.ContainsResource = function(a) {
        return null != this.GetAssignmentForResource(a) ? !0 : !1
    };
    b.ResourceAssignmentCollection.prototype.GetAssignmentForResource = function(a) {
        for (var b = 0; b < this.length; b++) {
            var d =
                this[b],
                c = d.Resource_M();
            if (c == a || c._boundObj == a) return d
        }
        return null
    };
    b.ResourceAssignmentCollection.prototype.OnCollectionChanged = function(a, b) {
        if (null != b.NewItems)
            for (var d = 0; d < b.NewItems.length; d++) {
                var c = b.NewItems[d];
                this._resPropertyChangedHandler = c.Resource_M().PropertyChanged.subscribe(this.Resource_PropertyChanged, this)
            }
        if (null != b.OldItems)
            for (d = 0; d < b.OldItems.length; d++) c = b.OldItems[d], c.Resource_M().PropertyChanged.unsubscribe(this.Resource_PropertyChanged, this);
        this.CollectionChanged.raise(a,
            b)
    };
    b.ResourceAssignmentCollection.prototype.Resource_PropertyChanged = function(a, b) {
        this.OnPropertyChanged("ResourceInfo")
    };
    b.ResourceAssignmentCollection.prototype.Dispose = function() {
        this._resPropertyChangedHandler && (this._resPropertyChangedHandler.Dispose(), this._resPropertyChangedHandler = null);
        this.CollectionChanged && this.CollectionChanged.Dispose();
        this.CollectionChanged = null;
        this.PropertyChanged && this.PropertyChanged.Dispose();
        this.parentActivity = this.PropertyChanged = null;
        this.splice(0, this.length)
    };
    b.GanttResourcesCollection = function() {
        this.CollectionChanged = new ObjectEvent("CollectionChanged");
        Array.call(this);
        this._resByID = new RadiantQ.Gantt.Dictionary;
        this._resByName = new RadiantQ.Gantt.Dictionary;
        this.getResourceByID = function(a) {
            return this._resByID[a]
        };
        return this
    };
    b.GanttResourcesCollection.prototype = [];
    b.GanttResourcesCollection.prototype.ClearItems = function() {
        0 != this.length && (this.splice(0, this.length), this._resByID = new RadiantQ.Gantt.Dictionary, this._resByName = new RadiantQ.Gantt.Dictionary)
    };
    b.GanttResourcesCollection.prototype.OnCollectionChanged = function(a) {
        if (null != a.OldItems)
            for (var b = 0; b < a.OldItems.length; b++) {
                var d = a.OldItems[b];
                this._resByID.Remove(d.ResourceID_M());
                var c = d.ResourceName_M();
                !1 == ("" == c || null == c) && this._resByName.Remove(d.ResourceName_M());
                d.Dispose()
            }
        if (null != a.NewItems)
            for (b = 0; b < a.NewItems.length; b++) d = a.NewItems[b], c = d.ResourceName_M(), this._resByID.Add(d.ResourceID_M(), d), !1 == ("" == c || null == c) && this._resByName.Add(d.ResourceName_M(), d)
    };
    b.GanttResourcesCollection.prototype.SetItem =
        function(a, b) {
            if (a > this.length) alert("Can't add the item to the " + a + "index which is greater than the length");
            else if (-1 != a) {
                var d = this[a],
                    c = d.ResourceName_M();
                this._resByID.Remove(d.ResourceID_M());
                !1 == ("" == c || null == c) && this._resByName.Remove(c);
                d.Dispose();
                this.splice(a, 1, b);
                d = b.ResourceName_M();
                this._resByID[b.ResourceID_M()] = b;
                !1 == ("" == d || null == d) && (this._resByName[d] = b)
            }
    };
    b.GanttResourcesCollection.prototype.Add = function(a) {
        var b = a.ResourceID_M();
        if (this._resByID[b]) {
            var d = this.indexOf(a);
            this.splice(d,
                0, a)
        } else this.push(a);
        this._resByID[b] = a;
        this.OnCollectionChanged(new RadiantQ.NotifyCollectionChangedEventArgs(null, a))
    };
    b.GanttResourcesCollection.prototype.Remove = function(a) {
        var b = this.indexOf(a); - 1 != b && (this.splice(b, 1), delete this._resByID[a.ResourceID_M()], this.OnCollectionChanged(new RadiantQ.NotifyCollectionChangedEventArgs(a, null)))
    };
    b.GanttResourcesCollection.prototype.GetResourceByName = function(a) {
        return this._resByName.Contains(a) ? this._resByName[a] : null
    };
    b.GanttResourcesCollection.prototype.Dispose =
        function() {
            this.CollectionChanged && this.CollectionChanged.Dispose();
            this.CollectionChanged = null
    };
    b.AdjustStartTimeEventArgs = function(a, b) {
        this.StartTime = this.Activity = null;
        a && b && (this.Activity = a, this.StartTime = b);
        return this
    };
    b.ActivityEventHandler = function(a, b) {};
    b.ActivityEventArgs = function(a) {
        a && (this._activity = a);
        return this
    };
    b.ActivityEventArgs.prototype.Activity_M = function() {
        return this._activity
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(b.ActivityEventArgs.prototype, "Activity", {
        get: function() {
            return this.Activity_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    });
    b.NewActivityAddedEventArgs = function(a, b, d) {
        a && (this._activity = a, this._parent = b, this._childIndex = d);
        return this
    };
    b.NewActivityAddedEventArgs.prototype.NewActivity_M = function() {
        return this._activity
    };
    b.NewActivityAddedEventArgs.prototype.Parent_M = function() {
        return this._parent
    };
    b.NewActivityAddedEventArgs.prototype.ChildIndex_M = function() {
        return this._childIndex
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.NewActivityAddedEventArgs.prototype,
        "NewActivity", {
            get: function() {
                return this.NewActivity_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.NewActivityAddedEventArgs.prototype, "Parent", {
        get: function() {
            return this.Parent_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(b.NewActivityAddedEventArgs.prototype, "ChildIndex", {
        get: function() {
            return this.ChildIndex_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }));
    b.BeforeStartTimeChangingEventArgs = function(a, b) {
        this.NewStartTime = null;
        a && b && (this.Activity = a, this.NewStartTime = b);
        return this
    };
    b.BeforeEffortChangingEventArgs = function(a, b) {
        this.NewEffort = null;
        a && b && (this.Activity = a, this.NewEffort = b);
        return this
    };
    b.ResourceAssignmentTracker = function(a) {
        this.activitiesByResources = new RadiantQ.Gantt.Dictionary;
        this.OnActivityAdded = function(a) {
            this._activityPropertyChangedHandler = a.PropertyChanged.subscribe(this.activity_PropertyChanged, this);
            for (var b = a.Assignments_M(), d = 0; d < b.length; d++) {
                var c = this.GetResourceActivityList(b[d].Resource_M()._boundObj);
                e.observable(c).insert(a)
            }
        };
        if (a) {
            this.Model = a;
            this._modelNewActivityAddedHandler = a.NewActivityAdded.subscribe(this.model_NewActivityAdded, this);
            this._modelActivityRemovedHandler = a.ActivityRemoved.subscribe(this.model_ActivityRemoved, this);
            a = a.AllActivities_M();
            for (var b = 0; b < a.length; b++) {
                var d = a.GetItemByIndex(b);
                this.OnActivityAdded(d)
            }
        }
    };
    b.ResourceAssignmentTracker.prototype.model_ActivityRemoved = function(a, b) {
        this.ProcessActivityRemovedRecursively(b)
    };
    b.ResourceAssignmentTracker.prototype.model_NewActivityAdded =
        function(a, b) {
            this.OnActivityAdded(b.NewActivity_M())
    };
    b.ResourceAssignmentTracker.prototype.GetResourceActivityList = function(a) {
        var b = this.activitiesByResources.GetItemByKey(a);
        b || (b = [], this.activitiesByResources.Add(a, b));
        return b
    };
    b.ResourceAssignmentTracker.prototype.activity_PropertyChanged = function(a, b) {
        "Assignments" == b.PropertyName && (this.OnActivityRemoved(a), this.OnActivityAdded(a))
    };
    b.ResourceAssignmentTracker.prototype.ProcessActivityRemovedRecursively = function(a) {
        if (a) {
            this.OnActivityRemoved(a);
            a = a.ChildActivities_M();
            for (var b = 0; b < a.length; b++) this.ProcessActivityRemovedRecursively(a[b])
        }
    };
    b.ResourceAssignmentTracker.prototype.Dispose = function() {
        this._activityPropertyChangedHandler && this._activityPropertyChangedHandler.Dispose();
        this._activityPropertyChangedHandler = null;
        this._modelNewActivityAddedHandler && this._modelNewActivityAddedHandler.Dispose();
        this._modelNewActivityAddedHandler = null;
        this._modelActivityRemovedHandler && this._modelActivityRemovedHandler.Dispose();
        this._modelActivityRemovedHandler =
            null
    };
    b.ResourceAssignmentTracker.prototype.OnActivityRemoved = function(a) {
        for (var b = this.Model.GanttResources_M(), d = 0; d < b.length; d++) {
            var c = this.GetResourceActivityList(b[d]._boundObj),
                g = c.indexOf(a); - 1 != g && (e.observable(c).remove(g, 1), a.PropertyChanged.unsubscribe(this.activity_PropertyChanged, this))
        }
    };
    b.ResourceToActivitiesListConverter = function() {
        this.Model = null;
        this.Convert = function(a, b, d, c) {
            if (null == this.Model) throw Error("ResourceToActivitiesListConverter's Convert is called before setting it's Model property.");
            if (null == a) throw Error("value passed to ResourceToActivitiesListConverter's Convert method must be of type IGanttResource.");
            return this.Model.GetResourceActivityList(a)
        }
    };
    b.PropertyChangedWithOldValueEventArgs = function(a, b) {
        b && (this._oldValue = b);
        return this
    };
    b.PropertyChangedWithOldValueEventArgs.prototype.OldValue = function() {
        return this._oldValue
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(b.PropertyChangedWithOldValueEventArgs.prototype, "OldValue", {
        get: function() {
            return this._oldValue
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    });
    b.NewDependencyAddScenarioType = {
        None: "None",
        UserDragOver: "UserDragOver",
        UserDragDrop: "UserDragDrop",
        UserGridEdit: "UserGridEdit"
    }
})(jQuery);
(function(e) {
    function b(a, b) {
        this.ResourceText = a;
        this._assignments = new RadiantQ.Gantt.Model.ResourceAssignmentCollection(null);
        this.ConvertBack = !1;
        b && (this.ConvertBack = b);
        return this
    }

    function c(a) {
        this._dict = new RadiantQ.Gantt.Dictionary;
        this._cachedItem = {};
        this.last = this.first = null;
        if (a) {
            this._deps = a;
            for (var b = 0; b < a.length; b++) this.ProcessDependency(a[b])
        }
        this.GetEnumerator = function() {
            return new d(this)
        };
        return this
    }

    function a(a) {
        this.Next = this.Previous = null;
        this.Activity = a;
        this._index = -1;
        return this
    }

    function d(a) {
        this._list = a;
        this.current = null;
        return this
    }
    var g = RadiantQ.Gantt,
        f = RadiantQ.Gantt.Model,
        h = RadiantQ.Gantt.Utils.ValueBinder;
    f.DataBoundGanttModel = function(a, b, d, e, p, q, s, r, t, x, w, u, v, C, z, y, B, A, D, E, J, H, F, I, N, G, O, Q, L, K, U, M, R, S) {
        this.CreateActivitiesCollection = function() {
            return new f.DataBoundActivitiesCollection(null, this)
        };
        f.BaseGanttModel.prototype.CreateActivitiesCollection = this.CreateActivitiesCollection;
        this.base = f.BaseGanttModel;
        f.BaseGanttModel.call(this, L, K, U);
        if (!a) return null;
        this._boundColl =
            a;
        this.canInsertPropertyChangeTriggeringPropertiesInData = !1;
        this.ScheduleFrom = this.ProjectEndDate = this.ProjectStartDate = this._resAssgnStringConverter = null;
        this._onInit = !0;
        this.ProcessPredecessorString = f.DataBoundGanttModel.ProcessPredecessorString;
        this.ActivityUpdated = new ObjectEvent("ActivityUpdated");
        this.canInsertPropertyChangeTriggeringPropertiesInData = M ? !0 : !1;
        this.ScheduleFrom = e;
        this.ProjectStartDate = b;
        this.ProjectEndDate = d;
        this.ValidateDependencySetting_M(p);
        this.EnforceDependencyConstraints_M(q);
        this.AutoCalculateSummaryTaskTimes_M(s);
        this._customProgressCalculation = Q;
        this.AutoExpandNodes = R;
        this._resAssgnStringConverter = S;
        RadiantQ.Gantt.WorkTimeSchedule._cachedStdWorkingTimes = new g.WorkTimeSchedule.CachedContWorkingTimes;
        RadiantQ.Gantt.WorkTimeSchedule._continuousSchedule = null;
        RadiantQ.Gantt.WorkTimeSchedule.cachedContWorkingTimes = new g.WorkTimeSchedule.CachedContWorkingTimes;
        this._resList = H;
        this.AdjustDurationOnAssignment_M(r);
        this.LagStringUnitsInHours_M(t);
        this.parentActivities = [];
        a = null;
        b = 0;
        this.IDBinding = x;
        this.NameBinding = u;
        this.SortOrderBinding = w;
        this.IndentLevelBinding = v;
        this.StartTimeBinding = C;
        this.PrefStartTimeBinding = z;
        this.EffortBinding = y;
        this.EndTimeBinding = B;
        this.PredecessorBinding = A;
        this.ProgressPercentBinding = D;
        this.ScheduleBinding = E;
        this.DescBinding = J;
        this.ResourceNameBinding = F;
        this.ResourceIDBinding = I;
        this.ResourceScheduleBinding = N;
        this.AssignedResourcesBinding = G;
        this.WBSIDBinding = O;
        this._convertResListFromResStringHandler = this.DataBoundActivities_M().ConvertResourceListFromResourceString.subscribe(this.DataBoundGanttModel_ConvertResourceListFromResourceString,
            this);
        x = [];
        w = new RadiantQ.Gantt.Utils.DelayUpdates;
        try {
            f.DataBoundGanttModel.IsBuildingModel = !0;
            if (null != this._resList)
                for (var ba = this.GanttResources_M(), P = 0; P < this._resList.length; P++) ba.Add(new f.DataBoundGanttResource(this._resList[P], F, I, N));
            F = 1;
            for (P = 0; P < this._boundColl.length; P++) {
                var X = this._boundColl[P],
                    W = new h(X, v, null, RadiantQ.Gantt.BindingMode.OneWay, this);
                W._value || (W._value = 0);
                var V = W._value;
                if (0 > V) throw new NotSupportedException("Specified Indent is < 0 and not supported.");
                var T = this.CreateNewDataBoundActivity(X,
                    R);
                T.TransferIDFromBoundToSelf();
                T.TransferWBSFromBoundToSelf();
                if (0 == V || null == a) this._activities.add(T), a = T, b = 0, this.parentActivities = [];
                else if (V > b) a.ChildActivities_M().add(T), this.parentActivities.push(a), a = T, b++;
                else {
                    I = b - V;
                    for (N = 1; N <= I; N++) this.parentActivities.pop();
                    this.parentActivities[this.parentActivities.length - 1].ChildActivities_M().add(T);
                    a = T;
                    b -= I
                }
                T.TransferDataFromBoundToSelf();
                T.PredecessorIndexString_M() && x.push(T);
                null == this.SortOrderBinding && T.SortOrder_M(F);
                F++
            }
        } catch (Y) {
            throw window.console &&
                window.console.error && window.console.error("DataBoundGanttModel constructor throws " + Y), Error(Y);
        } finally {
            f.DataBoundGanttModel.IsBuildingModel = !1
        }
        w.Dispose();
        v = new RadiantQ.Gantt.Utils.DelayUpdates;
        try {
            f.DataBoundGanttModel.IsBuildingModel = !0;
            for (P = 0; P < x.length; P++) this.ProcessPredecessorsAndAddDependencies(x[P]);
            if (!0 == this.EnforceDependencyConstraints_M())
                for (var Z = new c(this.Dependencies_M()), P = 0; P < Z.length_M(); P++) {
                    var ca = Z.GetItemByIndex(P);
                    this.ApplyDependencyConstraints(ca.Activity)
                }
            this.Activities_M().UpdateChildWBSIDs()
        } catch (aa) {
            throw window.console &&
                window.console.error && window.console.error("DataBoundGanttModel constructor throws " + aa), Error(aa);
        } finally {
            f.DataBoundGanttModel.IsBuildingModel = !1
        }
        v.Dispose();
        this._onInit = !1;
        return this
    };
    f.DataBoundGanttModel.IsBuildingModel = !1;
    f.DataBoundGanttModel.prototype = new f.BaseGanttModel;
    f.DataBoundGanttModel.prototype.BoundCollAsList_M = function() {
        return this._boundColl
    };
    f.DataBoundGanttModel.prototype.DataBoundActivities_M = function() {
        return this.Activities_M()
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(f.DataBoundGanttModel.prototype,
        "BoundCollAsList", {
            get: function() {
                return this.BoundCollAsList_M()
            },
            set: function() {},
            enumerable: !0,
            configurable: !1
        }), Object.defineProperty(f.DataBoundGanttModel.prototype, "DataBoundActivities", {
        get: function() {
            return this.DataBoundActivities_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }));
    f.DataBoundGanttModel.prototype.ApplyDependencyConstraints = function(a) {
        if (a = this.Dependencies_M()._predsByActivity[a.ID_M()])
            for (var b = 0; b < a.length; b++) a[b].EnsureActivityOrder()
    };
    f.DataBoundGanttModel.prototype.CreateNewDataBoundActivity =
        function(a, b) {
            return new f.DataBoundActivity(this, a, this.IDBinding, this.SortOrderBinding, this.NameBinding, this.IndentLevelBinding, this.StartTimeBinding, this.PrefStartTimeBinding, this.EffortBinding, this.EndTimeBinding, this.PredecessorBinding, this.ProgressPercentBinding, this.ScheduleBinding, this.DescBinding, this.AssignedResourcesBinding, this.WBSIDBinding, this.AutoExpandNodes)
    };
    f.DataBoundGanttModel.prototype.DataBoundGanttModel_ConvertResourceListFromResourceString = function(a, b) {
        var d = g.ValueConverters.ConverterUtils;
        if (!1 == b.ConvertBack)
            if (null != this._resAssgnStringConverter) this._resAssgnStringConverter.Convert(b, null, this, null);
            else {
                var c = b.Assignments_M();
                c.clear();
                d.ConvertResourceTextToAssignments(b.ResourceText, this.GanttResources_M(), c)
            } else null != this._resAssgnStringConverter ? this._resAssgnStringConverter.ConvertBack(b, null, this, null) : b.ResourceText = d.GetResourcesText(b.Assignments_M(), !0, !1)
    };
    f.DataBoundGanttModel.prototype.ProcessPredecessorsAndAddDependencies = function(a) {
        var b = a.PredecessorIndexString_M();
        if (b) {
            var d = [],
                c = [],
                g = [],
                f = this.ProcessPredecessorString(b, this.LagStringUnitsInHours_M(), d, c, g, f);
            a.processingPredString = !0;
            for (b = 0; b < d.length; b++) f = this.GetActivityById(d[b]), null != f && this.CanAddNewDependency(f, a) && this.CreateNewDependencyInternal(f, a, c[b], g[b], !0);
            a.processingPredString = !1;
            a.UpdatePredecessorString()
        }
    };
    f.DataBoundGanttModel.prototype.ValidatePredecessorString = function(a, b, d) {
        if (a) {
            b = [];
            if (d = this.ProcessPredecessorString(a, b, [], [], d)) return !1;
            for (a = 0; a < b.Length; a++)
                if (null == this[b[a]]) return !1
        }
        return !0
    };
    f.DataBoundGanttModel.ProcessPredecessorString = function(a, b, d, c, g, e) {
        e = "";
        if (a) {
            a = a.split(",");
            for (var h = 0; h < a.length; h++) {
                var r = a[h].trim();
                if (0 != r.length) {
                    var t = null,
                        x = !0; - 1 != r.indexOf("-") ? (t = r.split("-"), x = !1) : t = r.split("+");
                    var r = -1,
                        w = RadiantQ.Gantt.DependencyType.FinishToStart,
                        u = RQTimeSpan.Zero_M(),
                        v = t[0].trim(),
                        r = parseInt(v),
                        C = v.toLowerCase().search("s"),
                        z = v.toLowerCase().search("f");
                    if (0 < C || 0 < z)
                        if (2 > v.length) {
                            e += "Unexpected string encountered: " + v + ". (Valid examples: 10, 10SS, 5FS, etc.)";
                            continue
                        } else C = v.substring(v.length - 2, v.length), v = v.substring(0, v.length - 2), r = parseInt(v), void 0 == r || -1 == r ? (r = -1, e += v + " is not a valid ID (number).") : void 0 != r && -1 != r && (z = f.DataBoundGanttModel.TryParse(C, w), w = z.Type, !1 == z.status && (e += C + " is not a valid Dependency Type"));
                    void 0 != r && -1 != r ? (1 < t.length && (u = 0, u = parseFloat(t[1].trim()), !1 == u && (e += t[1].trim() + " is not a valid lag string. Specify a valid number."), u = new RQTimeSpan(0, u * b, 0, 0, 0), !1 == x && (u = u.getEqualNegative())), -1 == d.indexOf(r) && (d.push(r),
                        c.push(w), g.push(u))) : e += "Unexpected string encountered: " + v + ". (Valid examples: 10, 10SS, 5FS, etc.)"
                }
            }
        }
        return e
    };
    f.DataBoundGanttModel.ConstructPredecessorString = function(a, b) {
        var d = RQTimeSpan.Zero_M(),
            c = "";
        if (null != a)
            for (var g = 0; g < a.length; g++) {
                var f = a[g],
                    e = f.FromActivity_M().ID_M().toString();
                switch (f.Type_M()) {
                    case RadiantQ.Gantt.DependencyType.FinishToFinish:
                        e += "FF";
                        break;
                    case RadiantQ.Gantt.DependencyType.StartToFinish:
                        e += "SF";
                        break;
                    case RadiantQ.Gantt.DependencyType.StartToStart:
                        e += "SS"
                }
                f =
                    f.Lag_M();
                f > d ? e += "+" + (f.getTotalHours() / b).toString() : f < d && (e += "-" + -(f.getTotalHours() / b).toString());
                c += e;
                c += ","
            }
        return c ? c.slice(0, c.length - 1) : c
    };
    f.DataBoundGanttModel.TryParse = function(a, b) {
        a = a.toLowerCase();
        switch (a) {
            case "ss":
                return {
                    Type: RadiantQ.Gantt.DependencyType.StartToStart,
                    status: !0
                };
            case "sf":
                return {
                    Type: RadiantQ.Gantt.DependencyType.StartToFinish,
                    status: !0
                };
            case "fs":
                return {
                    Type: RadiantQ.Gantt.DependencyType.FinishToStart,
                    status: !0
                };
            case "ff":
                return {
                    Type: RadiantQ.Gantt.DependencyType.FinishToFinish,
                    status: !0
                }
        }
        return {
            Type: RadiantQ.Gantt.DependencyType.FinishToStart,
            status: !1
        }
    };
    f.DataBoundGanttModel.prototype.GetIndent = function(a, b) {
        return ModelExtensions.GetValue(a, b, new StringToIntConverter)
    };
    f.DataBoundGanttModel.prototype.CreateNewActivity = function(a, b) {
        null == b && (b = !0);
        if (b)
            if (null != this._boundColl) a && e.observable(this._boundColl).insert(this._boundColl.length, a);
            else throw new NotSupportedException("The bound ItemsSource should be of type IList to be able to add the new item into it.");
        var d =
            this.GetNewSortOrder(),
            c = this.CreateNewDataBoundActivity(a, this.AutoExpandNodes);
        c.TransferIDFromBoundToSelf();
        c.TransferWBSFromBoundToSelf();
        this.Activities_M().add(c);
        this._isNewActInit = !0;
        c.TransferDataFromBoundToSelf();
        this._isNewActInit = !1;
        c.SortOrder_M(d);
        this.OnNewActivityAdded(new f.NewActivityAddedEventArgs(c, null, -1));
        this.ProcessPredecessorsAndAddDependencies(c);
        return c
    };
    f.DataBoundGanttModel.prototype.CreateNewDependency = function(a, b, d, c) {
        a = f.BaseGanttModel.prototype.CreateNewDependency.call(this,
            a, b, d, c);
        b.OnAddedPredecessorDependency(a);
        return a
    };
    f.DataBoundGanttModel.prototype.Dispose = function() {
        f.BaseGanttModel.prototype.Dispose.call(this);
        this._convertResListFromResStringHandler && (this._convertResListFromResStringHandler.Dispose(), this._convertResListFromResStringHandler = null);
        this._schedule = this._resources = null;
        this._activities && this._activities.Dispose();
        this._boundColl = this._activities = null;
        this.canInsertPropertyChangeTriggeringPropertiesInData = !1;
        this.ScheduleFrom = this.ProjectEndDate =
            this.ProjectStartDate = this._resAssgnStringConverter = null;
        this._onInit = !1;
        this.ActivityUpdated = this.ProcessPredecessorString = null;
        this.canInsertPropertyChangeTriggeringPropertiesInData = !1;
        this._resAssgnStringConverter = this.AutoExpandNodes = this._customProgressCalculation = this.ProjectEndDate = this.ProjectStartDate = this.ScheduleFrom = null;
        g.WorkTimeSchedule._cachedStdWorkingTimes = new g.WorkTimeSchedule.CachedContWorkingTimes;
        g.WorkTimeSchedule._continuousSchedule = null;
        g.WorkTimeSchedule.cachedContWorkingTimes = {};
        this.WBSIDBinding = this.AssignedResourcesBinding = this.ResourceScheduleBinding = this.ResourceIDBinding = this.ResourceNameBinding = this.DescBinding = this.ScheduleBinding = this.ProgressPercentBinding = this.PredecessorBinding = this.EndTimeBinding = this.EffortBinding = this.PrefStartTimeBinding = this.StartTimeBinding = this.IndentLevelBinding = this.SortOrderBinding = this.NameBinding = this.IDBinding = this.parentActivities = this._resList = null;
        RadiantQ.Gantt.WorkTimeSchedule._cached8X5ScheduleTimes = new g.WorkTimeSchedule("8X5 Schedule",
            g.WorkTimeSchedule.EightHoursByFiveDaysScheduleProvider)
    };
    f.DataBoundActivitiesCollection = function(a, b) {
        f.ActivitiesCollection.call(this, a, b);
        this._model = b;
        this._parent = a;
        !1 == this.isActivitiesCollection && !1 == this instanceof f.ActivitiesCollection && f.ActivitiesCollection.call(this, a, b);
        this.ConvertResourceListFromResourceString = new ObjectEvent("ConvertResourceListFromResourceString");
        this.OnChildPropertyChanged = function(a, b) {
            f.ActivitiesCollection.prototype.OnChildPropertyChanged.call(this, a, b);
            if ("ID" ==
                b.PropertyName) {
                var d = this._idByActivity.GetItemByKey(a);
                d && (this._activityByID.Remove(d), this._idByActivity.Remove(a));
                d = a.ID_M();
                this._activityByID.Add(d, a);
                this._idByActivity.Add(a, d)
            }
        };
        this._indentLevel = 0;
        f.DataBoundActivitiesCollection.prototype.Dispose = this.Dispose = function() {
            f.ActivitiesCollection.prototype.Dispose.call(this);
            this._parent = this._model = null;
            this.ConvertResourceListFromResourceString && this.ConvertResourceListFromResourceString.Dispose();
            this.ConvertResourceListFromResourceString =
                null;
            this._actConvertResListFromResStrHandlerByID && (this._actConvertResListFromResStrHandlerByID = {})
        };
        return this
    };
    f.DataBoundActivitiesCollection.prototype = new f.ActivitiesCollection;
    f.DataBoundActivitiesCollection.prototype._activityByID = new RadiantQ.Gantt.Dictionary;
    f.DataBoundActivitiesCollection.prototype._idByActivity = new RadiantQ.Gantt.Dictionary;
    f.DataBoundActivitiesCollection.prototype.IndentLevel_M = function(a) {
        if (0 == arguments.length) return this._indentLevel;
        if (this._indentLevel != a) {
            this._indentLevel =
                a;
            this.OnPropertyChanged("IndentLevel");
            for (var b = 0; b < this.length; b++) this[b].IndentLevel_M(a)
        }
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(f.DataBoundActivitiesCollection.prototype, "IndentLevel", {
        get: function() {
            return this.IndentLevel_M()
        },
        set: function(a) {
            this.IndentLevel_M(a)
        },
        enumerable: !0,
        configurable: !0
    });
    f.DataBoundActivitiesCollection.prototype.SubscribeToChildEvents = function(a) {
        this._actConvertResListFromResStrHandlerByID || (this._actConvertResListFromResStrHandlerByID = {});
        var b =
            a.ConvertResourceListFromResourceString.subscribe(this.dbActivity_ConvertResourceListFromResourceString, this);
        this._actConvertResListFromResStrHandlerByID[a.id] = b;
        a.IndentLevel_M(this.IndentLevel_M());
        RadiantQ.Gantt.Model.ActivitiesCollection.prototype.SubscribeToChildEvents.call(this, a)
    };
    f.DataBoundActivitiesCollection.prototype.dbActivity_ConvertResourceListFromResourceString = function(a, b) {
        this.OnConvertResourceListFromResourceString(b)
    };
    f.DataBoundActivitiesCollection.prototype.UnsubscribeToChildEvents =
        function(a) {
            this._actConvertResListFromResStrHandlerByID && this._actConvertResListFromResStrHandlerByID[a.id] && (this._actConvertResListFromResStrHandlerByID[a.id].Dispose(), delete this._actConvertResListFromResStrHandlerByID[a.id]);
            f.ActivitiesCollection.prototype.UnsubscribeToChildEvents.call(this, a)
    };
    f.DataBoundActivitiesCollection.prototype.OnConvertResourceListFromResourceString = function(a) {
        null != this.ConvertResourceListFromResourceString && this.ConvertResourceListFromResourceString.raise(this,
            a)
    };
    f.DataBoundActivitiesCollection.prototype.GetActivityById = function(a) {
        return this._activityByID.GetItemByKey(a)
    };
    f.DataBoundActivitiesCollection.prototype.GetIdByActivity = function(a) {
        a = this._idByActivity.GetItemByKey(a);
        return null == a || void 0 == a ? -1 : a
    };
    f.DataBoundActivity = function(a, b, d, c, g, e, s, r, t, x, w, u, v, C, z, y, B) {
        this.CreateChildActivitiesCollection = function() {
            return new f.DataBoundActivitiesCollection(this, this.Model)
        };
        f.BaseActivity.call(this, a);
        this.ConvertResourceListFromResourceString = new ObjectEvent("ConvertResourceListFromResourceString");
        this._indentLevel = -1;
        this._isExpanded = B;
        this._isOverlapping = !1;
        a && b && (this._boundObject = b, this._boundProps = {}, this._ignoreSelfUpdates = this.IgnoreBDUpdates = !1, this._idBinder = new h(this._boundObject, d, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._nameBinder = new h(this._boundObject, g, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._sortOrderBinder = new h(this._boundObject, c, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._indentBinder = new h(this._boundObject, e, null, RadiantQ.Gantt.BindingMode.TwoWay, a),
            this._startTimeBinder = new h(this._boundObject, s, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._prefStartTimeBinder = new h(this._boundObject, r, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._effortBinder = new h(this._boundObject, t, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._endTimeBinder = new h(this._boundObject, x, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._predIndexBinder = new h(this._boundObject, w, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._progressPercentBinder = new h(this._boundObject,
                u, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._scheduleBinder = new h(this._boundObject, v, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._descBinder = new h(this._boundObject, C, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._assignedResourcesBinder = new h(this._boundObject, z, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._wbsIdBinder = new h(this._boundObject, y, null, RadiantQ.Gantt.BindingMode.TwoWay, a), this._idBinder.IsBound_M() && (this._boundProps[this._idBinder._binding.Property] = this._idBinder, this._idBinder.ValueChanged.subscribe(this.BoundData_ValueChanged,
                this)), this._nameBinder.IsBound_M() && (this._boundProps[this._nameBinder._binding.Property] = this._nameBinder, this._nameBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._sortOrderBinder.IsBound_M() && (this._boundProps[this._sortOrderBinder._binding.Property] = this._sortOrderBinder, this._sortOrderBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._indentBinder.IsBound_M() && (this._boundProps[this._indentBinder._binding.Property] = this._indentBinder, this._indentBinder.ValueChanged.subscribe(this.BoundData_ValueChanged,
                this)), this._assignedResourcesBinder.IsBound_M() && (this._boundProps[this._assignedResourcesBinder._binding.Property] = this._assignedResourcesBinder, this._assignedResourcesBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._startTimeBinder.IsBound_M() && (this._boundProps[this._startTimeBinder._binding.Property] = this._startTimeBinder, this._startTimeBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._prefStartTimeBinder.IsBound_M() && (this._boundProps[this._prefStartTimeBinder._binding.Property] =
                this._prefStartTimeBinder, this._prefStartTimeBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._effortBinder.IsBound_M() && (this._boundProps[this._effortBinder._binding.Property] = this._effortBinder, this._effortBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._endTimeBinder.IsBound_M() && (this._boundProps[this._endTimeBinder._binding.Property] = this._endTimeBinder, this._endTimeBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._predIndexBinder.IsBound_M() &&
            (this._boundProps[this._predIndexBinder._binding.Property] = this._predIndexBinder, this._predIndexBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._progressPercentBinder.IsBound_M() && (this._boundProps[this._progressPercentBinder._binding.Property] = this._progressPercentBinder, this._progressPercentBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._scheduleBinder.IsBound_M() && (this._boundProps[this._scheduleBinder._binding.Property] = this._scheduleBinder, this._scheduleBinder.ValueChanged.subscribe(this.BoundData_ValueChanged,
                this)), this._descBinder.IsBound_M() && (this._boundProps[this._descBinder._binding.Property] = this._descBinder, this._descBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._wbsIdBinder.IsBound_M() && (this._boundProps[this._wbsIdBinder._binding.Property] = this._wbsIdBinder, this._wbsIdBinder.ValueChanged.subscribe(this.BoundData_ValueChanged, this)), this._childActivities.ConvertResourceListFromResourceString.subscribe(this.ChildActivity_ConvertResourceListFromResourceString, this));
        this._ignoreSelfUpdates = !1;
        this.OnPropertyChanged = function(a, b, d) {
            if (!1 == this._ignoreSelfUpdates) try {
                switch (this.IgnoreBDUpdates = !0, a) {
                    case "ActivityName":
                        this._nameBinder.Value_M(this.ActivityName_M());
                        break;
                    case "IndentLevel":
                        this._indentBinder && this._indentBinder.Value_M(this.IndentLevel_M());
                        break;
                    case "StartTime":
                        this._startTimeBinder.Value_M(this.StartTime_M());
                        break;
                    case "PreferredStartTime":
                        this._prefStartTimeBinder.Value_M(d);
                        break;
                    case "Effort":
                        this._effortBinder.Value_M(this.Effort_M());
                        break;
                    case "ProgressPercent":
                        this._progressPercentBinder.Value_M(this.ProgressPercent_M());
                        break;
                    case "Schedule":
                        this._scheduleBinder.Value_M(this.Schedule_M());
                        break;
                    case "Description":
                        this._descBinder.Value_M(this.Description_M());
                        break;
                    case "ID":
                        this._idBinder.Value_M(this.ID_M());
                        break;
                    case "SortOrder":
                        this._sortOrderBinder.Value_M(this.SortOrder_M());
                        break;
                    case "PredecessorIndexString":
                        this._predIndexBinder.Value_M(this.PredecessorIndexString_M());
                        break;
                    case "Assignments":
                        this.UpdateResourcesString();
                        break;
                    case "DefaultWBSID":
                    case "WBSID":
                    case "IsAutoWBSID":
                        this.PersistWBSInData();
                        break
                }
            } finally {
                this.IgnoreBDUpdates = !1
            }
            f.BaseActivity.prototype.OnPropertyChanged.call(this, a, b, d);
            if (!1 == this._ignoreSelfUpdates) try {
                switch (this.IgnoreBDUpdates = !0, a) {
                    case "EndTime":
                        this._endTimeBinder.Value_M(this.EndTime_M());
                        break
                }
            } finally {
                this.IgnoreBDUpdates = !1
            }
        };
        return this
    };
    f.DataBoundActivity.prototype = new f.BaseActivity;
    f.DataBoundActivity.prototype.DataSource_M = function() {
        return this._boundObject
    };
    f.DataBoundActivity.prototype.IndentLevel_M = function(a) {
        if (0 == arguments.length) return this._indentLevel;
        if (this._indentLevel != a) {
            var b = this._indentLevel;
            this._indentLevel = a;
            this.OnPropertyChanged("IndentLevel", b, a);
            this._childActivities.IndentLevel_M(a + 1)
        }
    };
    f.DataBoundActivity.prototype.IgnoreSelfUpdates_M = function(a) {
        if (0 == arguments.length) return this._ignoreSelfUpdates;
        this._ignoreSelfUpdates = a
    };
    f.DataBoundActivity.prototype.IsOverlapping_M = function(a) {
        if (0 == arguments.length) return this._isOverlapping;
        this._isOverlapping != a && (this._isOverlapping = a, this.OnPropertyChanged("IsOverlapping"))
    };
    RadiantQ.CanUseDefineProperty &&
        (Object.defineProperty(f.DataBoundActivity.prototype, "DataSource", {
        get: function() {
            return this.DataSource_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(f.DataBoundActivity.prototype, "IndentLevel", {
        get: function() {
            return this.IndentLevel_M()
        },
        set: function(a) {
            this.IndentLevel_M(a)
        },
        enumerable: !1,
        configurable: !0
    }), Object.defineProperty(f.DataBoundActivity.prototype, "IgnoreSelfUpdates", {
        get: function() {
            return this.IgnoreSelfUpdates_M()
        },
        set: function(a) {
            this.IgnoreSelfUpdates_M(a)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(f.DataBoundActivity.prototype, "IsOverlapping", {
        get: function() {
            return this.IsOverlapping_M()
        },
        set: function(a) {
            this.IsOverlapping_M(a)
        },
        enumerable: !0,
        configurable: !0
    }));
    f.DataBoundActivity.prototype.BoundData_ValueChanged = function(a, b) {
        if (!this.IgnoreBDUpdates) try {
            switch (this._ignoreSelfUpdates = !0, a) {
                case this._idBinder:
                    this.ID_M(parseInt(this._idBinder._value));
                    break;
                case this._sortOrderBinder:
                    this.SortOrder_M(this._sortOrderBinder._value);
                    break;
                case this._nameBinder:
                    this.ActivityName_M(this._nameBinder._value);
                    break;
                case this._startTimeBinder:
                    this._startTimeBinder._value && this._startTimeBinder._value != Date.MinValue ? (this.StartTime_M(this._startTimeBinder._value), !1 == this._prefStartTimeBinder.IsBound_M() && this.PreferredStartTime_M(this.StartTime_M())) : this.StartTime_M(this.GetDefaultStartTime());
                    break;
                case this._prefStartTimeBinder:
                    this._prefStartTimeBinder._value != Date.MinValue && this._prefStartTimeBinder._value ? this.PreferredStartTime_M(this._prefStartTimeBinder._value) :
                        this.PreferredStartTime_M(this.GetDefaultStartTime());
                    break;
                case this._indentBinder:
                    this.IndentLevel_M(this._indentBinder._value);
                    break;
                case this._progressPercentBinder:
                    var d = parseInt(this._progressPercentBinder._value);
                    this.ProgressPercent_M(isNaN(d) ? 0 : d);
                    break;
                case this._scheduleBinder:
                    this.Schedule_M(this._scheduleBinder._value);
                    break;
                case this._effortBinder:
                    this.Effort_M(this._effortBinder._value);
                    break;
                case this._endTimeBinder:
                    this.EndTime_M(this._endTimeBinder._value);
                    break;
                case this._descBinder:
                    this._description =
                        this._descBinder._value;
                    break;
                case this._predIndexBinder:
                    this.PredecessorIndexString_M(this._predIndexBinder._value);
                    break;
                case this._assignedResourcesBinder:
                    this.UpdateResourcesCollection(this._assignedResourcesBinder._value);
                    break;
                case this._wbsIdBinder:
                    this.ProcessWBSIDInData(this._wbsIdBinder._value);
                    break
            }
        } finally {
            this._ignoreSelfUpdates = !1
        }
    };
    f.DataBoundActivity.prototype.ProcessWBSIDInData = function(a) {
        var b = !0;
        !1 == (null == a || void 0 == a || "" == a) && "*" == a[0] && 1 < a.length && (this.WBSID_M(a.substring(1)),
            b = !1);
        this.IsAutoWBSID_M(b)
    };
    f.DataBoundActivity.prototype.Dispose = function() {
        f.BaseActivity.prototype.Dispose.call(this);
        null != this._idBinder && (this.ConvertResourceListFromResourceString && this.ConvertResourceListFromResourceString.Dispose(), this.ConvertResourceListFromResourceString = null, this._idBinder.Dispose(), this._idBinder = null, this._nameBinder.Dispose(), this._nameBinder = null, this._sortOrderBinder.Dispose(), this._sortOrderBinder = null, this._indentBinder.Dispose(), this._indentBinder = null, this._startTimeBinder.Dispose(),
            this._startTimeBinder = null, this._prefStartTimeBinder.Dispose(), this._prefStartTimeBinder = null, this._effortBinder.Dispose(), this._effortBinder = null, this._endTimeBinder.Dispose(), this._endTimeBinder = null, this._predIndexBinder.Dispose(), this._predIndexBinder = null, this._progressPercentBinder.Dispose(), this._progressPercentBinder = null, this._scheduleBinder.Dispose(), this._scheduleBinder = null, this._descBinder.Dispose(), this._descBinder = null, this._assignedResourcesBinder.Dispose(), this._assignedResourcesBinder =
            null, this._wbsIdBinder.Dispose(), this._wbsIdBinder = null, delete this._boundObject.PropertyChanged, delete this._boundObject._boundProps, delete this._boundProps)
    };
    f.DataBoundActivity.prototype.GetDefaultStartTime = function() {
        f.BaseActivity.prototype.GetDefaultStartTime = this.GetDefaultStartTime;
        return this.Model.ScheduleFrom == f.ScheduleFrom.ProjectStartDate ? this.Model.ProjectStartDate : this.Model.WorkTimeSchedule_M().GetStart(this.Model.ProjectEndDate, this.Effort_M())
    };
    f.DataBoundActivity.prototype.ChildActivity_ConvertResourceListFromResourceString =
        function(a, b) {
            this.OnConvertResourceListFromResourceString(b)
    };
    f.DataBoundActivity.prototype.TransferIDFromBoundToSelf = function() {
        this._idBinder.IsBound_M() && this.BoundData_ValueChanged(this._idBinder)
    };
    f.DataBoundActivity.prototype.TransferWBSFromBoundToSelf = function() {
        this._wbsIdBinder.IsBound_M() && this.BoundData_ValueChanged(this._wbsIdBinder)
    };
    f.DataBoundActivity.prototype.TransferDataFromBoundToSelf = function() {
        this._sortOrderBinder.IsBound_M() && this.BoundData_ValueChanged(this._sortOrderBinder);
        this._nameBinder.IsBound_M() && this.BoundData_ValueChanged(this._nameBinder);
        this._descBinder.IsBound_M() && this.BoundData_ValueChanged(this._descBinder);
        this._scheduleBinder.IsBound_M() && this.BoundData_ValueChanged(this._scheduleBinder);
        this._assignedResourcesBinder.IsBound_M() && this.BoundData_ValueChanged(this._assignedResourcesBinder);
        var a = !1;
        if (this._endTimeBinder.IsBound_M()) {
            this._ignoreSelfUpdates = !0;
            var b = this._endTimeBinder.Value_M();
            if (b != DateTime.MinValue) {
                var d = RQTimeSpan.Zero;
                this._effortBinder.IsBound_M() &&
                    (d = this._effortBinder.Value_M(), "string" == typeof d && (d = RQTimeSpan.parse(d)));
                a = !0;
                this.SetPreCalculatedEndTime(b, d)
            }
            this._ignoreSelfUpdates = !1
        }
        this._effortBinder.IsBound_M() && !a && this.BoundData_ValueChanged(this._effortBinder);
        this._startTimeBinder.IsBound_M() && (this.BoundData_ValueChanged(this._startTimeBinder), this.UpdateIsMileStone());
        this._prefStartTimeBinder.IsBound_M() && this.BoundData_ValueChanged(this._prefStartTimeBinder);
        this._indentBinder.IsBound_M() && this.BoundData_ValueChanged(this._indentBinder);
        this._progressPercentBinder.IsBound_M() && this.BoundData_ValueChanged(this._progressPercentBinder);
        this._predIndexBinder.IsBound_M() && this.BoundData_ValueChanged(this._predIndexBinder);
        this._wbsIdBinder.IsBound_M() && this.BoundData_ValueChanged(this._wbsIdBinder);
        this.Model.SetTopSortOrder(this.SortOrder_M())
    };
    f.DataBoundActivity.prototype.UpdateResourcesString = function() {
        var a = this._assignments.AsText_M();
        this._assignedResourcesBinder.Value_M(a)
    };
    f.DataBoundActivity.prototype.UpdateResourcesCollection =
        function(a) {
            this._assignments.AsText_M(a)
    };
    f.DataBoundActivity.prototype.OnConvertResourceListFromResourceString = function(a) {
        null != this.ConvertResourceListFromResourceString && this.ConvertResourceListFromResourceString.raise(this, a)
    };
    f.DataBoundActivity.prototype.OnTimesChanged = function() {
        this._ignoreSelfUpdates && this._endTimeBinder.IsBound_M() || f.BaseActivity.prototype.OnTimesChanged.call(this)
    };
    f.DataBoundActivity.prototype.PersistWBSInData = function() {
        var a = this.WBSID_M();
        !1 == this.IsAutoWBSID_M() &&
            (a = "*" + a);
        this._wbsIdBinder.Value_M(a)
    };
    f.DataBoundActivity.prototype.CreateNewChildActivity = function(a) {
        a = new RadiantQ.Gantt.Model.DataBoundActivity(this.Model, a, this._idBinder.OriginalBinding, this._sortOrderBinder.OriginalBinding, this._nameBinder.OriginalBinding, this._indentBinder.OriginalBinding, this._startTimeBinder.OriginalBinding, this._prefStartTimeBinder.OriginalBinding, this._effortBinder.OriginalBinding, this._endTimeBinder.OriginalBinding, this._predIndexBinder.OriginalBinding, _progressPercentBinder.OriginalBinding,
            this._scheduleBinder.OriginalBinding, this._descBinder.OriginalBinding, this._assignedResourcesBinder.OriginalBinding, this._wbsIdBinder.OriginalBinding);
        a.TransferIDFromBoundToSelf();
        a.TransferWBSFromBoundToSelf();
        this.ChildActivities_M().Add(a);
        a.TransferDataFromBoundToSelf();
        return a
    };
    f.ConvertResourceListFromResourceStringEventArgs = b;
    b.prototype.Assignments_M = function() {
        return this._assignments
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(b.prototype, "Assignments", {
        get: function() {
            return this.Assignments_M()
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    });
    f.DataBoundGanttResource = function(a, b, d, c) {
        this.base = f.BaseGanttResource;
        this.base();
        this._resScheduleBinder = null;
        this.DataSource = this._boundObj = a;
        null != d && (this._resIDbinder = new h(a, d));
        null != b && (this._resNamebinder = new h(a, b), this._resNamebinder.ValueChanged.subscribe(this._resNamebinder_ValueChanged, this));
        null != c && (this._resScheduleBinder = new h(a, c), this._resScheduleBinder.ValueChanged.subscribe(this._resScheduleBinder_ValueChanged));
        return this
    };
    f.DataBoundGanttResource.prototype = new f.BaseGanttResource;
    f.DataBoundGanttResource.prototype.ResourceID_M = function() {
        if (0 == arguments.length) return this._resIDbinder ? this._resIDbinder._value : this.ResourceName;
        window.console && console.error && console.error("Changing the bound resource's ID via DataBoundGanttResource.ResourceID property is not supported.");
        throw Error("Changing the bound resource's ID via DataBoundGanttResource.ResourceID property is not supported.");
    };
    f.DataBoundGanttResource.prototype.Schedule_M =
        function() {
            if (0 == arguments.length) return null != this._resScheduleBinder ? this._resScheduleBinder.Value_M() : null;
            window.console && console.error && console.error("Chaging the bound resource's schedule via DataBoundGanttResource.Schedule property is not supported.");
            throw Error("Chaging the bound resource's schedule via DataBoundGanttResource.Schedule property is not supported.");
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(f.DataBoundGanttResource.prototype, "ResourceID", {
        get: function() {
            return this.ResourceID_M()
        },
        set: function(a) {
            throw Error("Changing the bound resource's ID via DataBoundGanttResource.ResourceID property is not supported.");
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(f.DataBoundGanttResource.prototype, "Schedule", {
        get: function() {
            return this.Schedule_M()
        },
        set: function() {
            throw new Exception("Chaging the bound resource's schedule via DataBoundGanttResource.Schedule property is not supported.");
        },
        enumerable: !0,
        configurable: !0
    }));
    f.DataBoundGanttResource.prototype.OnPropertyChanged = function(a) {
        null !=
            this.PropertyChanged && this.PropertyChanged.raise(this, a)
    };
    f.DataBoundGanttResource.prototype.toString = function() {
        return this.ResourceName_M()
    };
    f.DataBoundGanttResource.prototype._resNamebinder_ValueChanged = function(a, b) {
        this.OnPropertyChanged("ResourceName")
    };
    f.DataBoundGanttResource.prototype._resScheduleBinder_ValueChanged = function(a, b) {
        this.OnPropertyChanged("Schedule")
    };
    f.DataBoundGanttResource.prototype.Dispose = function() {
        this._resNamebinder.Dispose();
        this._resNamebinder = null;
        this._resScheduleBinder.Dispose();
        this._resScheduleBinder = null
    };
    f.ScheduleFrom = {
        ProjectStartDate: "ProjectStartDate",
        ProjectEndDate: "ProjectEndDate"
    };
    c.prototype.ProcessDependency = function(b) {
        this._cachedItem = {};
        var d = b.FromActivity_M(),
            c = b.ToActivity_M(),
            g = this._dict[d.ID_M()],
            f = this._dict[c.ID_M()];
        if (null == g) null == f ? (b = new a(d), this._dict.Add(d, b), this.Append(b), b = new a(c), this._dict.Add(c, b), this.Append(b)) : (b = new a(d), this._dict.Add(d, b), this.InsertBefore(b, f));
        else if (null == f) b = new a(c), this._dict.Add(c, b), this.InsertAfter(b,
            g);
        else if (f.Index < g.Index)
            for (this.InsertBefore(g, f), d = this._deps.GetPredecessors(g.Activity), c = 0; c < d.length; c++) g = d[c], g != b && this.ProcessDependency(g)
    };
    c.prototype.InsertBefore = function(a, b) {
        null != a.Previous && (a.Previous.Next = a.Next);
        null != a.Next && (a.Next.Previous = a.Previous);
        a == this.last && (this.last = a.Previous);
        a.Next = b;
        a.Previous = b.Previous;
        null != b.Previous && (b.Previous.Next = a);
        b.Previous = a;
        null != a.Previous ? a.Index_M(a.Previous.Index_M() + 1) : (this.first = a, a.Index_M(0))
    };
    c.prototype.InsertAfter =
        function(a, b) {
            a.Next = b.Next;
            a.Previous = b;
            null != b.Next && (b.Next.Previous = a);
            b.Next = a;
            null == a.Next && (this.last = a);
            a.Index_M(a.Previous.Index_M() + 1)
    };
    c.prototype.Append = function(a) {
        null == this.first ? (this.first = this.last = a, a.Index_M(0)) : (this.last.Next = a, a.Previous = this.last, a.Index_M(this.last.Index_M() + 1), this.last = a)
    };
    c.prototype.GetItemByIndex = function(a) {
        for (var b = 0; b < this._dict.asArray.length; b++) {
            var d = this._dict.asArray[b];
            if (this._cachedItem[a]) return this._cachedItem[a];
            this._cachedItem[d._index] =
                d;
            if (d._index === a) return d
        }
        return null
    };
    c.prototype.length_M = function() {
        return this._dict.length
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(c.prototype, "length", {
        get: function() {
            return this._dict.length
        },
        set: function() {},
        configurable: !0
    });
    a.prototype.Index_M = function(a) {
        if (0 == arguments.length) return this._index;
        this._index !== a && (this._index = a, null != this.Next && this.Next.Index_M(this._index + 1))
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(a.prototype, "Index", {
        get: function() {
            return this._index
        },
        set: function(a) {
            this._index !== a && (this._index = a, null != this.Next && (this.Next.Index = this._index + 1))
        },
        enumerable: !0,
        configurable: !0
    });
    d.prototype.Current_M = function() {
        return this.current.Activity
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(d.prototype, "Current", {
        get: function() {
            return this.current.Activity
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    });
    d.prototype.MoveNext = function() {
        this.current = null == this.current ? this._list.first : this.current.Next;
        return null != this.current
    };
    d.prototype.Reset =
        function() {
            this.current = null
    }
})(jQuery);
(function() {
    RadiantQ.Gantt.View = {};
    RadiantQ.Gantt.DependencyType = {
        FinishToStart: "FinishToStart",
        StartToStart: "StartToStart",
        FinishToFinish: "FinishToFinish",
        StartToFinish: "StartToFinish",
        None: "None"
    };
    var e = RadiantQ.Gantt;
    RadiantQ.Gantt.View.IDependencyView = function() {
        NotifyPropertyChanged.apply(this, arguments);
        this.OnPropertyChanged = NotifyPropertyChanged.prototype.OnPropertyChanged;
        this._endTime = this._startTime = this.Dependency = null;
        this.StartItemPosAdjustment = {
            X: 0,
            Y: 0
        };
        this.EndItemPosAdjustment = {
            X: 0,
            Y: 0
        };
        this._endItemXPosAdjustment = this._startItemXPosAdjustment = 0;
        this.VerticalPositionChanged = null
    };
    RadiantQ.Gantt.View.IDependencyView.prototype = new NotifyPropertyChanged;
    RadiantQ.Gantt.View.IDependencyView.prototype.GetStartItemScheduleToPlotWith = function(b) {};
    RadiantQ.Gantt.View.IDependencyView.prototype.GetEndItemScheduleToPlotWith = function(b) {};
    RadiantQ.Gantt.View.IGanttControlDependencyView = function() {
        this.GanttControl = this.Dependency = null
    };
    RadiantQ.Gantt.View.GanttDependencyView = function(b,
        c, a) {
        RadiantQ.Gantt.View.IDependencyView.call(this, arguments);
        this._onInit = !0;
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this.notifyChange = function(a, b) {
            !0 != this._onInit && this.PropertyChanged.raise(this, {
                PropertyName: a,
                value: b
            })
        };
        this.GanttControl = a;
        this._startTime = new Date;
        this._endTime = new Date;
        this.Dependency = this.Dependency = b;
        this.StartActivity = b.FromActivity_M();
        this.EndActivity = b.ToActivity_M();
        this.ActivityViewsCollection = c;
        this.UpdateTimes();
        this._depPropertyChangedHandler && this._depPropertyChangedHandler.Dispose();
        this._startPropertyChangedHandler && this._startPropertyChangedHandler.Dispose();
        this._endPropertyChangedHandler && this._endPropertyChangedHandler.Dispose();
        this._startVerticalPositionChangedHandler && this._startVerticalPositionChangedHandler.Dispose();
        this._endVerticalPositionChangedHandler && this._endVerticalPositionChangedHandler.Dispose();
        this._depPropertyChangedHandler = b.PropertyChanged.subscribe(this.dependency_PropertyChanged, this);
        this._startPropertyChangedHandler = this.StartActivity.PropertyChanged.subscribe(this.StartActivity_PropertyChanged,
            this);
        this._endPropertyChangedHandler = this.EndActivity.PropertyChanged.subscribe(this.EndActivity_PropertyChanged, this);
        this._startVerticalPositionChangedHandler = this.StartActivity.VerticalPositionChanged.subscribe(this.Activity_VerticalPositionChanged, this);
        this._endVerticalPositionChangedHandler = this.EndActivity.VerticalPositionChanged.subscribe(this.Activity_VerticalPositionChanged, this);
        this._visibility = this._fromVisibility = this._toVisibility = this._workTimeSchedule = null;
        if (this._bindings && this._bindings.length)
            for (var d =
                0; d < this._bindings.length; d++) this._bindings[d].Dispose();
        else this._bindings = [];
        d = new Binding(this.StartActivity, "IsVisible", this, "FromVisibility", null, RadiantQ.Gantt.BindingMode.TwoWay);
        this._bindings.push(d);
        d = new Binding(this.EndActivity, "IsVisible", this, "ToVisibility", null, RadiantQ.Gantt.BindingMode.TwoWay);
        this._bindings.push(d);
        d = new Binding(this.GanttControl.options, "WorkTimeSchedule", this, "WorkTimeSchedule", null, RadiantQ.Gantt.BindingMode.OneWay);
        this._bindings.push(d);
        this.UpdateVisibility();
        this._onInit = !1
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype = new RadiantQ.Gantt.View.IDependencyView;
    RadiantQ.Gantt.View.GanttDependencyView.prototype.StartTime_M = function(b) {
        if (0 == arguments.length) return this._startTime;
        this._startTime = b;
        this.notifyChange("StartTime", b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.EndTime_M = function(b) {
        if (0 == arguments.length) return this._endTime;
        this._endTime = b;
        this.notifyChange("EndTime", b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.DataSource_M =
        function() {
            return this.Dependency
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.DependencyType_M = function() {
        return this.Dependency.Type_M()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.IsEndFixedShape_M = function() {
        return this.EndActivity.IsMilestone_M()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.IsStartFixedShape_M = function() {
        return this.StartActivity.IsMilestone_M()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.StartRowIndex_M = function() {
        return this.StartActivity.DisplayIndex_M()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.EndRowIndex_M = function() {
        return this.EndActivity.DisplayIndex_M()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.WorkTimeSchedule_M = function(b) {
        if (0 == arguments.length) return this._workTimeSchedule;
        this._workTimeSchedule = b;
        this.notifyChange("WorkTimeSchedule", b);
        this.UpdateTimes()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.ToVisibility_M = function(b) {
        if (0 == arguments.length) return this._toVisibility;
        this._toVisibility = b;
        this.notifyChange("ToVisibility",
            b);
        this.UpdateTimes();
        this.UpdateVisibility()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.FromVisibility_M = function(b) {
        if (0 == arguments.length) return this._fromVisibility;
        this._fromVisibility = b;
        this.notifyChange("FromVisibility", b);
        this.UpdateVisibility()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.Visibility_M = function(b) {
        if (0 == arguments.length) return this._visibility;
        this._visibility = b;
        this.notifyChange("Visibility", b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.StartItemXPosAdjustment_M =
        function(b) {
            if (0 == arguments.length) {
                var c = 0;
                this.StartActivity.IsMilestone ? c = 8 : 0 < this.StartActivity._childActivities.length && (c = 10);
                switch (this.Dependency._type) {
                    case e.DependencyType.StartToFinish:
                    case e.DependencyType.StartToStart:
                        return -1 * c;
                    default:
                        return c
                }
            } else this._startItemXPosAdjustment = b, this.notifyChange("StartItemXPosAdjustment", b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.EndItemXPosAdjustment_M = function(b) {
        if (0 == arguments.length) return this.EndActivity.IsMilestone ? this.Dependency._type ==
            RadiantQ.Gantt.DependencyType.StartToStart ? -8.5 : 8.5 : 0 < this.EndActivity._childActivities.length ? this.Dependency._type == RadiantQ.Gantt.DependencyType.StartToStart ? -10 : 10 : this._endItemXPosAdjustment;
        this._endItemXPosAdjustment = b;
        this.notifyChange("EndItemXPosAdjustment", b)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "StartTime", {
        get: function() {
            return this._startTime
        },
        set: function(b) {
            this._startTime = b;
            this.notifyChange("StartTime", b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "EndTime", {
        get: function() {
            return this._endTime
        },
        set: function(b) {
            this._endTime = b;
            this.notifyChange("EndTime", b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "DataSource", {
        get: function() {
            return this.Dependency
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "DependencyType", {
        get: function() {
            return this.Dependency.Type
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "IsEndFixedShape", {
        get: function() {
            return this.EndActivity.IsMilestone
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "IsStartFixedShape", {
        get: function() {
            return this.StartActivity.IsMilestone
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype,
        "StartRowIndex", {
            get: function() {
                return this.StartActivity.DisplayIndex
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "EndRowIndex", {
        get: function() {
            return this.EndActivity.DisplayIndex
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "WorkTimeSchedule", {
        get: function() {
            return this._workTimeSchedule
        },
        set: function(b) {
            this._workTimeSchedule = b;
            this.notifyChange("WorkTimeSchedule",
                b);
            this.UpdateTimes()
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "ToVisibility", {
        get: function() {
            return this._toVisibility
        },
        set: function(b) {
            this._toVisibility = b;
            this.notifyChange("ToVisibility", b);
            this.UpdateTimes();
            this.UpdateVisibility()
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "FromVisibility", {
        get: function() {
            return this._fromVisibility
        },
        set: function(b) {
            this._fromVisibility =
                b;
            this.notifyChange("FromVisibility", b);
            this.UpdateVisibility()
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "Visibility", {
        get: function() {
            return this._visibility
        },
        set: function(b) {
            this._visibility = b;
            this.notifyChange("Visibility", b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "StartItemXPosAdjustment", {
        get: function() {
            return this.StartItemXPosAdjustment_M()
        },
        set: function(b) {
            this.StartItemXPosAdjustment_M(b)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(RadiantQ.Gantt.View.GanttDependencyView.prototype, "EndItemXPosAdjustment", {
        get: function() {
            return this.EndItemXPosAdjustment_M()
        },
        set: function(b) {
            this.EndItemXPosAdjustment_M(b)
        },
        enumerable: !0,
        configurable: !0
    }));
    RadiantQ.Gantt.View.GanttDependencyView.prototype.dependency_PropertyChanged = function() {
        this.UpdateTimes()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.StartActivity_PropertyChanged = function(b, c) {
        "StartTime" != c.PropertyName && "EndTime" !=
            c.PropertyName || this.UpdateTimes()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.EndActivity_PropertyChanged = function(b, c) {
        "StartTime" != c.PropertyName && "EndTime" != c.PropertyName || this.UpdateTimes()
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.Activity_VerticalPositionChanged = function() {};
    RadiantQ.Gantt.View.GanttDependencyView.prototype.GetStartItemScheduleToPlotWith = function(b) {
        return this.StartActivity.GetScheduleToPlotWith(b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.GetEndItemScheduleToPlotWith =
        function(b) {
            return this.EndActivity.GetScheduleToPlotWith(b)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.OnVerticalPositionChanged = function() {
        null != this.VerticalPositionChanged && this.VerticalPositionChanged.raise(this)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.UpdateTimes = function() {
        switch (this.Dependency.Type_M()) {
            case e.DependencyType.FinishToFinish:
                this.StartTime_M(this.Dependency._fromActivity.EndTime_M());
                this.EndTime_M(this.Dependency._toActivity.EndTime_M());
                break;
            case e.DependencyType.StartToFinish:
                this.StartTime_M(this.Dependency._fromActivity.StartTime_M());
                this.EndTime_M(this.Dependency._toActivity.EndTime_M());
                break;
            case e.DependencyType.StartToStart:
                this.StartTime_M(this.Dependency._fromActivity.StartTime_M());
                this.EndTime_M(this.Dependency._toActivity.StartTime_M());
                break;
            default:
                this.StartTime_M(this.Dependency.FromActivity_M().EndTime_M()), this.EndTime_M(this.Dependency._toActivity.StartTime_M())
        }
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.UpdateVisibility = function() {
        !0 == this.ToVisibility_M() && !0 == this.FromVisibility_M() ? this.Visibility_M(!0) :
            this.Visibility_M(!1)
    };
    RadiantQ.Gantt.View.GanttDependencyView.prototype.Dispose = function() {
        this._depPropertyChangedHandler && this._depPropertyChangedHandler.Dispose();
        this._depPropertyChangedHandler = null;
        this._startPropertyChangedHandler && this._startPropertyChangedHandler.Dispose();
        this._startPropertyChangedHandler = null;
        this._endPropertyChangedHandler && this._endPropertyChangedHandler.Dispose();
        this._endPropertyChangedHandler = null;
        this._startVerticalPositionChangedHandler && this._startVerticalPositionChangedHandler.Dispose();
        this._startVerticalPositionChangedHandler = null;
        this._endVerticalPositionChangedHandler && this._endVerticalPositionChangedHandler.Dispose();
        this._endVerticalPositionChangedHandler = null;
        for (var b = 0; b < this._bindings.length; b++) this._bindings[b].Dispose()
    };
    RadiantQ.Gantt.View.IParentData = function() {};
    RadiantQ.Gantt.View.IParentData.prototype.HasParent_M = function() {
        return this
    };
    RadiantQ.Gantt.View.IParentData.prototype.Parent_M = function() {
        return this
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.View.IParentData.prototype,
        "HasParent", {
            get: function() {
                return this
            },
            set: function() {},
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RadiantQ.Gantt.View.IParentData.prototype, "Parent", {
        get: function() {
            return this
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }));
    CollectionOFIDependencyView = function() {};
    CollectionOFIDependencyView.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
    RadiantQ.Gantt.GanttFlatDependenciesList = function(b, c, a) {
        this.activityViewsList = c;
        this.chart = a;
        this.model = b;
        this.model.Dependencies.CollectionChanged.subscribe(this.model_NewActivityAdded)
    };
    RadiantQ.Gantt.GanttFlatDependenciesList.prototype.CreateFromModel = function(b) {
        this.Clear();
        for (var c = 0; c < b.Dependencies.length; c++) this.add(this.CreateNew(dependency))
    };
    RadiantQ.Gantt.GanttFlatDependenciesList.prototype.CreateNew = function(b) {
        return new GanttDependencyView(b, this.activityViewsList, this.chart)
    };
    RadiantQ.Gantt.GanttFlatDependenciesList.prototype.FindView = function(b) {
        for (var c = 0; c < this.length; c++)
            if (this[c].DataSource == b) return c;
        return -1
    };
    RadiantQ.Gantt.GanttFlatDependenciesList.prototype.model_NewActivityAdded =
        function(b, c) {
            if ("remove" == b.type || "replaceAll" == b.type)
                for (var a = 0; a < c.items.length; a++) {
                    var d = this.FindView(c.items[a]); - 1 != d && this.remove(d)
                }
            if ("insert" == b.type)
                for (a = 0; a < c.items.length; a++) this.add(this.CreateNew(c.items[a]))
    }
})();
(function(e) {
    View = RadiantQ.Gantt.View;
    View.IActivityView = function() {
        NotifyPropertyChanged.apply(this, arguments);
        this.OnPropertyChanged = NotifyPropertyChanged.prototype.OnPropertyChanged;
        this._indentLevel = 0;
        this._isExpanded = !0;
        this._isParent = this._isReadOnly = this._isMouseIn = this._isSelected = !1;
        this._isRegularTask = !0;
        this.ExpandedChanged = new ObjectEvent("ExpandedChanged");
        this.$chartRow = this.$tableRow = null;
        return this
    };
    View.IActivityView.prototype = new NotifyPropertyChanged;
    View.IActivityView.prototype.Activity_M =
        function(b) {
            if (0 == arguments.length) return this._activity;
            this._activity != b && (this._activity = b, this.OnPropertyChanged("Activity", b))
    };
    View.IActivityView.prototype.ParentView_M = function(b) {
        if (0 == arguments.length) return this._parentView;
        this._parentView != b && (this._parentView = b, this.OnPropertyChanged("ParentView", b))
    };
    View.IActivityView.prototype.ParentActivity_M = function(b) {
        if (0 == arguments.length) return this._activity.Parent_M();
        this._activity.Parent_M() != b && (this._activity.Parent_M(b), this.OnPropertyChanged("ParentActivity",
            b))
    };
    View.IActivityView.prototype.IndentLevel_M = function(b) {
        if (0 == arguments.length) return this._indentLevel;
        this._indentLevel != b && (this._indentLevel = b, this.OnPropertyChanged("IndentLevel", b))
    };
    View.IActivityView.prototype.IsExpanded_M = function(b) {
        if (0 == arguments.length) return this._isExpanded;
        this._isExpanded != b && (this._isExpanded = b, this.OnPropertyChanged("IsExpanded", b))
    };
    View.IActivityView.prototype.IsReadOnly_M = function(b) {
        if (0 == arguments.length) return this._isReadOnly;
        this._isReadOnly != b && (this._isReadOnly =
            b, this.OnPropertyChanged("IsReadOnly", b))
    };
    View.IActivityView.prototype.IsParent_M = function(b) {
        if (0 == arguments.length) return this._isParent;
        this._isParent != b && (this._isParent = b, this.OnPropertyChanged("IsParent", b))
    };
    View.IActivityView.prototype.IsRegularTask_M = function(b) {
        if (0 == arguments.length) return this._isRegularTask;
        this._isRegularTask != b && (this._isRegularTask = b, this.OnPropertyChanged("IsRegularTask", b))
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(View.IActivityView.prototype, "Activity", {
        get: function() {
            return this._activity
        },
        set: function(b) {
            this._activity != b && (this._activity = b, this.OnPropertyChanged("Activity", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "ParentView", {
        get: function() {
            return this._parentView
        },
        set: function(b) {
            this._parentView != b && (this._parentView = b, this.OnPropertyChanged("ParentView", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "ParentActivity", {
        get: function() {
            return this._activity.Parent_M()
        },
        set: function(b) {
            this._activity.Parent_M() != b && (this._activity.Parent_M(b), this.OnPropertyChanged("ParentActivity", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "IndentLevel", {
        get: function() {
            return this._indentLevel
        },
        set: function(b) {
            this._indentLevel != b && (this._indentLevel = b, this.OnPropertyChanged("IndentLevel", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "IsExpanded", {
        get: function() {
            return this._isExpanded
        },
        set: function(b) {
            this._isExpanded !=
                b && (this._isExpanded = b, this.OnPropertyChanged("IsExpanded", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "IsReadOnly", {
        get: function() {
            return this._isReadOnly
        },
        set: function(b) {
            this._isReadOnly != b && (this._isReadOnly = b, this.OnPropertyChanged("IsReadOnly", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "IsParent", {
        get: function() {
            return this._isParent
        },
        set: function(b) {
            this._isParent != b && (this._isParent = b, this.OnPropertyChanged("IsParent",
                b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.IActivityView.prototype, "IsRegularTask", {
        get: function() {
            return this._isRegularTask
        },
        set: function(b) {
            this._isRegularTask != b && (this._isRegularTask = b, this.OnPropertyChanged("IsRegularTask", b))
        },
        enumerable: !0,
        configurable: !0
    }));
    View.IActivityView.prototype.IsSelected = function(b) {
        if (void 0 == b || null == b) return this._isSelected;
        this._isSelected != b && (this._isSelected = b, this.OnPropertyChanged("IsSelected", b, null, !1), this.UpdateSelection(b))
    };
    View.IActivityView.prototype.TableRow =
        function(b) {
            if (void 0 == b || null == b) return this.$tableRow;
            b = b instanceof jQuery ? b : e(b);
            if (!this.IsSelected) return 0;
            if (void 0 != this.$tableRow) {
                this.IsSelected() && this.addSelectionClassToTable(b);
                this.IsMouseIn() && this.addHoverClassToTable(b);
                var c = this.$tableRow.height();
                b.height(c)
            }
            this.$tableRow = b;
            !0 == this._isParent ? this.$tableRow.css("font-weight", "bolder") : this.$tableRow.css("font-weight", "normal")
    };
    View.IActivityView.prototype.ChartRow = function(b) {
        if (void 0 == b || null == b) return this.$chartRow;
        b =
            b instanceof jQuery ? b : e(b);
        if (void 0 != this.$chartRow) {
            var c = this.$chartRow.height();
            b.height(c)
        }
        this.$chartRow = b
    };
    View.IActivityView.prototype.IsMouseIn = function(b) {
        if (void 0 == b || null == b) return this._isMouseIn;
        this._isMouseIn != b && (this._isMouseIn = b, this.UpdateHoverStyle(b))
    };
    View.IActivityView.prototype.UpdateHoverStyle = function(b) {};
    View.IActivityView.prototype.addSelectionClassToTable = function(b) {
        b.addClass("rq-row-selected ui-state-active")
    };
    View.IActivityView.prototype.addHoverClassToTable = function(b) {
        b.addClass("rq-row-hover ui-state-hover")
    };
    View.IActivityView.prototype.UpdateSelection = function(b) {};
    View.IActivityView.prototype.Dispose = function() {
        NotifyPropertyChanged.prototype.Dispose.call(this);
        this._indentLevel = 0;
        this._isExpanded = !0;
        this._isParent = this._isReadOnly = this._isMouseIn = this._isSelected = !1;
        this._isRegularTask = !0;
        this.ExpandedChanged && this.ExpandedChanged.Dispose();
        this.$chartRow = this.$tableRow = this.ExpandedChanged = null
    };
    View.GanttActivityView = function(b, c, a, d) {
        View.IActivityView.apply(this, arguments);
        this.IndentLevelBinding =
            this.ParentActivityBinding = null;
        this._activity = this.activity = b;
        this._isExpanded = b.IsExpanded_M();
        this.Model = a;
        this.GC = d;
        this._isParent = this._ignorePredUpdates = !1;
        this._indentLevel = 0;
        this._isReadOnly = !1;
        this.ParentView_M(c);
        this._childActsCollChangedHandler && this._childActsCollChangedHandler.Dispose();
        this._actPropertyChangedHandler && this._actPropertyChangedHandler.Dispose();
        this._childActsCollChangedHandler = this.activity.ChildActivities_M().CollectionChanged.subscribe(this.ChildActivities_CollectionChanged,
            this);
        this._actPropertyChangedHandler = this.activity.PropertyChanged.subscribe(this.activity_PropertyChanged, this);
        this.listenChanges();
        this.OnChildListChanged();
        this.OnTimesChanged();
        if (null != this.GC.options.IsTaskReadOnlyBinding) {
            var g = this.GC.options.IsTaskReadOnlyBinding,
                f = g.Property,
                g = g.Converter,
                e = f.split("."),
                k = null;
            1 < e.length ? (k = this[e[0]], f = e[1]) : k = this;
            this.IsTaskReadOnlyBinding && this.IsTaskReadOnlyBinding.Dispose();
            this.IsTaskReadOnlyBinding = new Binding(k, f, this, "IsReadOnly", {
                Convert: g
            })
        }
        this.RefreshPredString(!0);
        this.UpdateIndentWidth();
        return this
    };
    View.GanttActivityView.prototype = new View.IActivityView;
    View.GanttActivityView.prototype.IndentWidth_M = function(b) {
        if (0 == arguments.length) return this._indentWidth;
        this._indentWidth != b && (this._indentWidth = b, this.OnPropertyChanged("IndentWidth", b))
    };
    View.GanttActivityView.prototype.Background_M = function(b) {
        if (0 == arguments.length) return this._background;
        this._background != b && (this._background = b, this.OnPropertyChanged("Background", b))
    };
    View.GanttActivityView.prototype.ParentView_M =
        function(b) {
            if (0 == arguments.length) return this._parentView;
            this._parentView != b && (this._parentView = b, null != b ? (this.updateParentViewActivityBinding(), this.updateParentViewIndentLevelBinding()) : (this.ParentActivityBinding.Dispose(), this.IndentLevelBinding.Dispose(), this.IndentLevelBinding = this.ParentActivityBinding = null, this.IndentLevel_M(0)), this.OnPropertyChanged("ParentView", b))
    };
    View.GanttActivityView.prototype.ParentActivity_M = function(b) {
        if (0 == arguments.length) return this.activity.Parent_M();
        this.activity.Parent_M() !=
            b && (this.activity.Parent_M(b), this.OnPropertyChanged("ParentActivity", b))
    };
    View.GanttActivityView.prototype.SelectionFill_M = function(b) {
        if (0 == arguments.length) return this._selectionFill;
        this._selectionFill != b && (this._selectionFill = b, this.OnPropertyChanged("SelectionFill", b))
    };
    View.GanttActivityView.prototype.SelectionFillOpacity_M = function(b) {
        if (0 == arguments.length) return this._selectionFillOpacity;
        this._selectionFillOpacity != b && (this._selectionFillOpacity = b, this.OnPropertyChanged("SelectionFillOpacity",
            b))
    };
    View.GanttActivityView.prototype.PredecessorIndexString_M = function(b) {
        if (0 == arguments.length) return this._predecessorIndexString;
        if (this._predecessorIndexString != b) {
            var c = this._predecessorIndexString;
            this._predecessorIndexString = b;
            !1 == this.UpdateActivityDependencies() ? (this._predecessorIndexString = c, this.activity.PredecessorIndexString_M(c)) : this.OnPropertyChanged("PredecessorIndexString", b)
        }
    };
    View.GanttActivityView.prototype.Activity_M = function() {
        return this.activity
    };
    View.GanttActivityView.prototype.IndentLevel_M =
        function(b) {
            if (0 == arguments.length) return this._indentLevel;
            this._indentLevel != b && (this._indentLevel = b, this.UpdateIndentWidth(), this.OnPropertyChanged("IndentLevel", b))
    };
    View.GanttActivityView.prototype.IsParent_M = function(b) {
        if (0 == arguments.length) return this._isParent;
        var c = this.TableRow();
        null != c && (!0 == b ? c.css("font-weight", "bolder") : c.css("font-weight", "normal"));
        this._isParent != b && (this._isParent = b, this.UpdateIndentWidth(), this.OnPropertyChanged("IsParent", b))
    };
    View.GanttActivityView.prototype.IsExpanded_M =
        function(b) {
            if (0 == arguments.length) return this._isExpanded;
            this._isExpanded != b && (this._isExpanded = b, this.OnExpandedChanged(), this.OnPropertyChanged("IsExpanded", b, null, !1))
    };
    View.GanttActivityView.prototype.DisplayIndex_M = function(b) {
        if (0 == arguments.length) return this.activity.DisplayIndex_M();
        this.activity.DisplayIndex_M() != b && (this.activity.DisplayIndex_M(b), this.OnPropertyChanged("DisplayIndex", b, null, !1))
    };
    View.GanttActivityView.prototype.HasParent_M = function() {
        return null != this._parentView
    };
    View.GanttActivityView.prototype.Parent_M = function() {
        return this._parentView
    };
    View.GanttActivityView.prototype.IsReadOnly_M = function(b) {
        if (0 == arguments.length) return this._isReadOnly;
        this._isReadOnly != b && (this._isReadOnly = b, this.OnPropertyChanged("IsReadOnly", b))
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(View.GanttActivityView.prototype, "IndentWidth", {
        get: function() {
            return this._indentWidth
        },
        set: function(b) {
            this._indentWidth != b && (this._indentWidth = b, this.OnPropertyChanged("IndentWidth",
                b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "Background", {
        get: function() {
            return this._background
        },
        set: function(b) {
            this._background != b && (this._background = b, this.OnPropertyChanged("Background", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "ParentView", {
        get: function() {
            return this._parentView
        },
        set: function(b) {
            this._parentView != b && (this._parentView = b, null != b ? (this.updateParentViewActivityBinding(), this.updateParentViewIndentLevelBinding()) :
                (this.ParentActivityBinding.Dispose(), this.IndentLevelBinding.Dispose(), this.IndentLevel_M(0)), this.OnPropertyChanged("ParentView", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "ParentActivity", {
        get: function() {
            return this.activity.Parent_M()
        },
        set: function(b) {
            this.activity.Parent_M() != b && (this.activity.Parent_M(b), this.OnPropertyChanged("ParentActivity", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "SelectionFill", {
        get: function() {
            return this._selectionFill
        },
        set: function(b) {
            this._selectionFill != b && (this._selectionFill = b, this.OnPropertyChanged("SelectionFill", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "SelectionFillOpacity", {
        get: function() {
            return this._selectionFillOpacity
        },
        set: function(b) {
            this._selectionFillOpacity != b && (this._selectionFillOpacity = b, this.OnPropertyChanged("SelectionFillOpacity", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype,
        "PredecessorIndexString", {
            get: function() {
                return this._predecessorIndexString
            },
            set: function(b) {
                if (this._predecessorIndexString != b) {
                    var c = this._predecessorIndexString;
                    this._predecessorIndexString = b;
                    !1 == this.UpdateActivityDependencies() ? (this._predecessorIndexString = c, this.activity.PredecessorIndexString_M(c)) : this.OnPropertyChanged("PredecessorIndexString", b)
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(View.GanttActivityView.prototype, "Activity", {
        get: function() {
            return this.activity
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "IndentLevel", {
        get: function() {
            return this._indentLevel
        },
        set: function(b) {
            this._indentLevel != b && (this._indentLevel = b, this.UpdateIndentWidth(), this.OnPropertyChanged("IndentLevel", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "IsParent", {
        get: function() {
            return this._isParent
        },
        set: function(b) {
            var c = this.TableRow();
            null != c && (!0 == b ? c.css("font-weight", "bolder") : c.css("font-weight",
                "normal"));
            this._isParent != b && (this._isParent = b, this.UpdateIndentWidth(), this.OnPropertyChanged("IsParent", b))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "IsExpanded", {
        get: function() {
            return this._isExpanded
        },
        set: function(b) {
            this._isExpanded != b && (this._isExpanded = b, this.OnExpandedChanged(), this.OnPropertyChanged("IsExpanded", b, null, !1))
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "DisplayIndex", {
        get: function() {
            return this.activity.DisplayIndex_M()
        },
        set: function(b) {
            this.activity.DisplayIndex_M(b);
            this.OnPropertyChanged("DisplayIndex", b, null, !1)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "HasParent", {
        get: function() {
            return null != this.ParentView
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "Parent", {
        get: function() {
            return this.ParentView
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(View.GanttActivityView.prototype, "IsReadOnly", {
        get: function() {
            return this._isReadOnly
        },
        set: function(b) {
            this._isReadOnly != b && (this._isReadOnly = b, this.OnPropertyChanged("IsReadOnly", b))
        },
        enumerable: !0,
        configurable: !0
    }));
    View.GanttActivityView.prototype.listenChanges = function() {};
    View.GanttActivityView.prototype.updateParentViewActivityBinding = function() {
        this.ParentActivityBinding && this.ParentActivityBinding.Dispose();
        this.ParentActivityBinding = new Binding(this.ParentView_M(), "Activity", this, "ParentActivity", null, null)
    };
    View.GanttActivityView.prototype.updateParentViewIndentLevelBinding =
        function() {
            this.IndentLevelBinding && this.IndentLevelBinding.Dispose();
            this.IndentLevelBinding = new Binding(this.ParentView_M(), "IndentLevel", this, "IndentLevel", RadiantQ.Gantt.ValueConverters.ParentViewToIndentConverter, null)
    };
    View.GanttActivityView.prototype.UpdateIsRegularTask = function() {
        this.IsParent_M() || this.activity.IsMilestone_M() ? this.IsRegularTask_M(!1) : this.IsRegularTask_M(!0)
    };
    View.GanttActivityView.prototype.OnChildListChanged = function() {
        this.IsParent_M(0 < this.activity.ChildActivities_M().length);
        this.UpdateIsRegularTask()
    };
    View.GanttActivityView.prototype.ChildActivities_CollectionChanged = function(b, c) {
        this.OnChildListChanged()
    };
    View.GanttActivityView.prototype.UpdateIndentWidth = function() {
        this.IndentWidth_M(RadiantQ.Gantt.LevelToIndentWidth(this._indentLevel, this._isParent))
    };
    View.GanttActivityView.prototype.RefreshPredString = function(b) {
        try {
            this._ignorePredUpdates = b, this.PredecessorIndexString_M(this.activity.PredecessorIndexString_M())
        } finally {
            this._ignorePredUpdates = !1
        }
    };
    View.GanttActivityView.prototype.OnExpandedChanged =
        function() {
            var b = new RadiantQ.Gantt.Utils.DelayUpdates;
            this.ExpandedChanged.isSubscribed() && this.ExpandedChanged.raise(this, this);
            b.Dispose()
    };
    View.GanttActivityView.prototype.activity_PropertyChanged = function(b, c) {
        "StartTime" == c.PropertyName || "EndTime" == c.PropertyName || "Assignments" == c.PropertyName ? this.OnTimesChanged() : "PredecessorIndexString" == c.PropertyName && this.RefreshPredString(this.Model._dependencies._inCollectionChanged)
    };
    View.GanttActivityView.prototype.OnTimesChanged = function() {
        this.UpdateIsRegularTask()
    };
    View.GanttActivityView.prototype.ConvertToMilestone = function(b, c) {
        b.PreferredStartTime_M(b.StartTime_M());
        var a = new RadiantQ.Gantt.SetEndTimeAction(c, b, b.StartTime_M(), b.PreferredStartTime_M(), b.EndTime_M(), !1);
        c.ActionManager.RecordAction(a)
    };
    View.GanttActivityView.prototype.ConvertToNormalTask = function(b, c) {
        var a = c.BottomTwoHeaders;
        null != a && (a = RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertTimeUnitsToTimeSpan(a[0].BaseTimeScaleType, 1), a = b.StartTime_M().addTimeSpan(a), a = new RadiantQ.Gantt.SetEndTimeAction(c,
            b, a, b.PreferredStartTime_M(), b.EndTime_M(), !1), c.ActionManager.RecordAction(a))
    };
    View.GanttActivityView.prototype.ReparentView = function(b) {
        b != this.ParentView_M() && (this.ParentView_M(null), this.ParentView_M(b), null != b && !1 == b.IsExpanded_M() && (b.IsExpanded_M(!0), b.IsExpanded_M(!1)))
    };
    View.GanttActivityView.prototype.UpdateActivityDependencies = function() {
        if (!this._ignorePredUpdates) {
            var b = this.PredecessorIndexString_M();
            this.UpdateActivityDependency(this.Model, this.activity, b, RadiantQ.Gantt.Model.NewDependencyAddScenarioType.UserGridEdit);
            this.RefreshPredString(!0)
        }
    };
    View.GanttActivityView.prototype.UpdateActivityDependency = function(b, c, a, d) {
        d = new ObservableCollection;
        var g = new ObservableCollection,
            f = new ObservableCollection,
            e = RadiantQ.Gantt.Model.DataBoundGanttModel.ProcessPredecessorString(a, b.LagStringUnitsInHours_M(), d, g, f, e);
        if (e) return alert(e), !1;
        a = new RadiantQ.Gantt.Utils.DelayUpdates;
        b.Dependencies_M().ClearDependencies(c);
        for (var e = new RadiantQ.Gantt.Utils.DelayUpdates, k = 0; k < d.length; k++) {
            var n = b.GetActivityById(d[k]);
            null !=
                n && b.CanAddNewDependency(n, c) && b.CreateNewDependency(n, c, g[k], f[k])
        }
        e.Dispose();
        a.Dispose()
    };
    View.GanttActivityView.prototype.toString = function() {
        var b = this.ParentActivity_M();
        return "" + this.activity.ActivityName_M() + ", Parent: " + (b ? b.ActivityName_M() : "null") + ", Indent:" + this.IndentLevel_M() + ", IsParent:" + this.IsParent_M() + ""
    };
    View.GanttActivityView.prototype.Dispose = function() {
        View.IActivityView.prototype.Dispose.call(this);
        this._childActsCollChangedHandler && (this._childActsCollChangedHandler.Dispose(),
            this._childActsCollChangedHandler = null);
        this._actPropertyChangedHandler && (this._actPropertyChangedHandler.Dispose(), this._actPropertyChangedHandler = null);
        this.IsTaskReadOnlyBinding && (this.IsTaskReadOnlyBinding.Dispose(), this.IsTaskReadOnlyBinding = null);
        this.ParentActivityBinding && (this.ParentActivityBinding.Dispose(), this.ParentActivityBinding = null);
        this.IndentLevelBinding && (this.IndentLevelBinding.Dispose(), this.IndentLevelBinding = null)
    };
    View.GanttFlatActivitiesList = function(b, c) {
        RadiantQ.RQ_CollectionChangeNotifier.apply(this,
            arguments);
        this._dictActivityVsView = new RadiantQ.Gantt.Dictionary;
        this._dictChildActivityViews = new RadiantQ.Gantt.Dictionary;
        this.model = b;
        this.gantt = c;
        this._collectionChangedHandler && this._collectionChangedHandler.Dispose();
        this._collectionChangedHandler = this.CollectionChanged.subscribe(this.OnCollectionChanged, this);
        this.RowVisiblityChanged = new ObjectEvent("RowVisiblityChanged");
        this._ignoreRemove = !1;
        var a = this;
        this.view_ExpandedChanged = function(b, c) {
            a.HoldtriggeringChange = !0;
            !1 == b._isExpanded ? a.ClearHierarchyFromList(b) :
                a.AddHierarchyToList(b);
            a.gantt.RefreshDisplayIndex();
            a.OnRowVisiblityChanged();
            a.HoldtriggeringChange = !1
        };
        this.model && (this.CreateFromModel(), this.ListenToModelChanges());
        this._init = !0
    };
    View.GanttFlatActivitiesList.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
    View.GanttFlatActivitiesList.prototype.OnCollectionChanged = function(b, c) {
        if ("remove" == b.type || "replaceAll" == b.type)
            for (var a = 0; a < c.items.length; a++) this.UnsubscribeToActivityView(c.items[a]);
        if ("insert" == b.type)
            for (a = 0; a < c.items.length; a++) this.SubscribeToActivityView(c.items[a]);
        this._init && this.gantt.RefreshDisplayIndex()
    };
    View.GanttFlatActivitiesList.prototype.model_ChildCollectionChanged = function(b, c) {
        if ("insert" == c.type)
            for (var a = c.NewItems, d = 0; d < a.length; d++) {
                var g = a[d],
                    g = this._dictActivityVsView[g.id];
                this._updateChildsOnAdd(g, this._dictActivityVsView[b.id])
            } else if ("remove" == c.type)
                for (a = c.OldItems, d = 0; d < a.length; d++) g = a[d], (g = this._dictActivityVsView[g.id]) && this._updateChildsOnRemove(g)
    };
    View.GanttFlatActivitiesList.prototype.GetActivityViewByID = function(b) {
        b = this.model.GetActivityById(b);
        return this.GetIActivityView(b)
    };
    View.GanttFlatActivitiesList.prototype.CreateFromModel = function() {
        this.clear();
        if (null != this.model)
            for (var b = 0; b < this.model._activities.length; b++)!1 == this.model._activities[b].IsFilteredOut_M() && this.AddActivities(this.model._activities[b], null, this.model, 0)
    };
    View.GanttFlatActivitiesList.prototype.AddActivities = function(b, c, a, d) {
        c = new View.GanttActivityView(b, c, a, this.gantt);
        this.add(c);
        if (c.IsParent_M() && b.IsExpanded_M()) {
            b = b.ChildActivities_M();
            for (var g = 0; g < b.length; g++)!1 ==
                b[g].IsFilteredOut_M() && this.AddActivities(b[g], c, a, d + 1)
        }
    };
    View.GanttFlatActivitiesList.prototype.model_NewActivityAdded = function(b, c) {
        var a = c.NewActivity_M(),
            d = 0;
        if (0 < a.ChildActivities_M().length) throw "Encountered a newly added activity which already has children. This is not supported.";
        var g = null,
            f = c.Parent_M();
        if (null != f) {
            g = this[f];
            if (null == g) throw "Encountered a new activity whose parent activity is not already in the view.";
            d = g._indentLevel + 1
        }
        this.AddActivities(a, g, this.model, d)
    };
    View.GanttFlatActivitiesList.prototype._newActivityAddedHandler =
        null;
    View.GanttFlatActivitiesList.prototype._actsChildCollectionChangedHandler = null;
    View.GanttFlatActivitiesList.prototype.ListenToModelChanges = function() {
        this._newActivityAddedHandler = this.model.NewActivityAdded.subscribe(this.model_NewActivityAdded, this);
        this._actsChildCollectionChangedHandler = this.model._activities.ChildCollectionChanged.subscribe(this.model_ChildCollectionChanged, this)
    };
    View.GanttFlatActivitiesList.prototype.remove = function(b) {
        this[b].DisplayIndex_M(-1);
        RadiantQ.RQ_CollectionChangeNotifier.prototype.remove.apply(this,
            arguments)
    };
    View.GanttFlatActivitiesList.prototype.Move = function(b, c, a) {
        var d = new RadiantQ.Gantt.Utils.DelayUpdates,
            g, f;
        try {
            this._ignoreRemove = !0;
            if (a > b) {
                g = b;
                for (var e = 0; e < c; e++) {
                    var k = this[b];
                    this.remove(b);
                    this.insert(a - 1, k)
                }
                f = a - c
            } else {
                g = a;
                for (e = 0; e < c; e++) k = this[b + e], this.remove(b + e), this.insert(a + e, k);
                f = a
            }
            this.gantt.Model.UpdateSortOrderFrom(this[g].activity);
            return f
        } finally {
            this._ignoreRemove = !1
        }
        d.Dispose()
    };
    View.GanttFlatActivitiesList.prototype.ClearHierarchyFromList = function(b) {
        var c = this.indexOf(b),
            a = b.activity._indentLevel,
            d = this.length,
            g = this._getLastChildActivityViewIndex(b),
            g = g > c ? g : c;
        for (g++; g < d;) {
            var f = this[g];
            if (f._parentView == b || f.activity._indentLevel > a) {
                var e = -1;
                0 < f.activity._childActivities.length && (e = this._getLastChildActivityViewIndex(f));
                g = e > g ? e : g;
                g++
            } else break
        }
        c++;
        this.splice(c, g - c);
        b.activity.IsExpanded_M(!1)
    };
    View.GanttFlatActivitiesList.prototype.ClearHierarchyFromListRecursive = function(b, c) {
        if (b.activity.IsExpanded_M()) {
            var a = this.length;
            for (c++; c < a;)
                if (a = this[c], a.ParentView_M() ==
                    b) this.ClearHierarchyFromListRecursive(a, c), this.RemoveAndDispose(c), a = this.length;
                else break
        }
    };
    View.GanttFlatActivitiesList.prototype.RemoveAndDispose = function(b) {
        var c = 0,
            c = "number" === e.type(b) ? b : this.indexOf(b);
        this.remove(c)
    };
    RadiantQ.Gantt.addMethod(View.GanttFlatActivitiesList.prototype, "AddHierarchyToList", function(b) {
        b.activity.IsExpanded_M(!0);
        this.AddHierarchyToList(b, {
            value: -1
        })
    });
    RadiantQ.Gantt.addMethod(View.GanttFlatActivitiesList.prototype, "AddHierarchyToList", function(b, c) {
        -1 == c.value &&
            (c.value = this.indexOf(b));
        if (b.activity.IsExpanded_M()) {
            b.Activity_M().ChildActivities_M();
            var a = [],
                d = c.value + 1;
            this.GetHierarchyToListRecursive(b, a);
            0 < a.length && this.merge(d, a)
        }
    });
    View.GanttFlatActivitiesList.prototype.GetHierarchyToListRecursive = function(b, c) {
        var a = b.activity._childActivities;
        if (0 < a.length)
            for (var d = 0; d < a.length; d++) {
                var g = a[d];
                if (!1 == g.IsFilteredOut_M()) {
                    var f = new RadiantQ.Gantt.View.GanttActivityView(g, b, this.model, this.gantt);
                    c.push(f);
                    !0 == g._isExpanded && 0 < g._childActivities.length &&
                        this.GetHierarchyToListRecursive(f, c)
                }
            }
        return c
    };
    View.GanttFlatActivitiesList.prototype.GetIActivityView = function(b) {
        return this._dictActivityVsView.GetItemByKey(b)
    };
    View.GanttFlatActivitiesList.prototype.clear = function(b) {
        for (b = 0; b < this.length; b++) this.UnsubscribeToActivityView(this[b]), RadiantQ.RQ_CollectionChangeNotifier.prototype.splice.apply(this, b, 1)
    };
    View.GanttFlatActivitiesList.prototype.Contains = function(b) {
        return this._dictActivityVsView.Contains(b)
    };
    View.GanttFlatActivitiesList.prototype.SubscribeToActivityView =
        function(b) {
            this._dictActivityVsView.Add(b.activity, b);
            this.actViewExpandedChangedHandlers || (this.actViewExpandedChangedHandlers = {});
            this.actViewExpandedChangedHandlers[b.activity.id] && this.actViewExpandedChangedHandlers[b.activity.id].Dispose();
            var c = b.ExpandedChanged.subscribe(this.view_ExpandedChanged);
            this.actViewExpandedChangedHandlers[b.activity.id] = c;
            this._updateChildsOnAdd(b)
    };
    View.GanttFlatActivitiesList.prototype.UnsubscribeToActivityView = function(b) {
        this._dictActivityVsView.Remove(b.activity);
        this.actViewExpandedChangedHandlers[b.activity.id] ? (this.actViewExpandedChangedHandlers[b.activity.id].Dispose(), delete this.actViewExpandedChangedHandlers[b.activity.id]) : b.ExpandedChanged.unsubscribe(this.view_ExpandedChanged);
        this._updateChildsOnRemove(b)
    };
    View.GanttFlatActivitiesList.prototype._updateChildsOnAdd = function(b, c) {
        if (c = c || b.ParentView_M()) {
            var a = this._dictChildActivityViews[c.activity.id];
            a ? a.push(b) : this._dictChildActivityViews.Add(c.activity, [b])
        }
    };
    View.GanttFlatActivitiesList.prototype._updateChildsOnRemove =
        function(b) {
            var c = b.ParentView_M();
            if (c) {
                var a = this._dictChildActivityViews[c.activity.id];
                a && (0 == a.length ? this._dictChildActivityViews.Remove(c.activity) : 0 < a.length && (b = a.indexOf(b), a.splice(b, 1)))
            }
    };
    View.GanttFlatActivitiesList.prototype._getLastChildActivityViewIndex = function(b) {
        if (!b.activity.IsExpanded_M()) return -1;
        for (; null != b;) {
            var c = this._dictChildActivityViews[b.activity.id];
            if (c && 0 < c.length) b = c[c.length - 1] || null;
            else break
        }
        return this.indexOf(b)
    };
    View.GanttFlatActivitiesList.prototype.OnRowVisiblityChanged =
        function() {
            this.RowVisiblityChanged.isSubscribed() && this.RowVisiblityChanged.raise(this, EventArgs.Empty)
    };
    View.GanttFlatActivitiesList.prototype.RefreshDisplayIndexOfChildren = function() {
        this.RefreshDisplayIndexOfChildrenPrivate()
    };
    View.GanttFlatActivitiesList.prototype.RefreshDisplayIndexOfChildrenPrivate = function() {
        for (var b = -1, c = 0; c < this.length; c++) b++, this[c].DisplayIndex_M(b)
    };
    View.GanttFlatActivitiesList.prototype.VisibleIndexOf = function(b) {
        return b.DisplayIndex_M()
    };
    View.GanttFlatActivitiesList.prototype.Dispose =
        function() {
            this._newActivityAddedHandler && (this._newActivityAddedHandler.Dispose(), this._newActivityAddedHandler = null);
            this._actsChildCollectionChangedHandler && (this._actsChildCollectionChangedHandler.Dispose(), this._actsChildCollectionChangedHandler = null);
            this._collectionChangedHandler && (this._collectionChangedHandler.Dispose(), this._collectionChangedHandler = null);
            this.CollectionChanged.unsubscribe(this.OnCollectionChanged, this);
            this.IsTaskReadOnlyBinding && this.IsTaskReadOnlyBinding.Dispose();
            for (var b =
                0; b < this.length; b++) {
                var c = this[b];
                c.Dispose();
                this.actViewExpandedChangedHandlers && this.actViewExpandedChangedHandlers[c.activity.id] && (this.actViewExpandedChangedHandlers[c.activity.id].Dispose(), delete this.actViewExpandedChangedHandlers[c.activity.id])
            }
            Array.prototype.splice.call(this, 0, this.length);
            this.actViewExpandedChangedHandlers = {}
    };
    View.GanttFlatDependenciesList = function(b, c, a) {
        RadiantQ.RQ_CollectionChangeNotifier.call(this);
        this.model = b;
        this.activityViewsList = c;
        this.gantt = a;
        this._depViewByActivity = {};
        this.model && (this._collectionChangedHandler && this._collectionChangedHandler.Dispose(), this._collectionChangedHandler = this.model._dependencies.CollectionChanged.subscribe(this.model_NewDependencyAdded, this), this.CreateFromModel(b))
    };
    View.GanttFlatDependenciesList.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
    View.GanttFlatDependenciesList.prototype.CreateFromModel = function(b) {
        for (var c = 0; c < b._dependencies.length; c++) this.add(this.CreateNew(b._dependencies[c]))
    };
    View.GanttFlatDependenciesList.prototype.DependencyViewByActivityID_M =
        function() {
            return this._depViewByActivity
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(View.GanttFlatDependenciesList.prototype, "DependencyViewByActivityID", {
        get: function() {
            return this._depViewByActivity
        }
    });
    View.GanttFlatDependenciesList.prototype._depViewByActivity = {};
    View.GanttFlatDependenciesList.prototype.CreateNew = function(b) {
        var c = new RadiantQ.Gantt.View.GanttDependencyView(b, this.activityViewsList, this.gantt),
            a = b._fromActivity.ID_M();
        b = b._toActivity.ID_M();
        var d = this._depViewByActivity[a];
        d ? -1 == d.indexOf(c) && d.push(c) : this._depViewByActivity[a] = [c];
        (a = this._depViewByActivity[b]) ? -1 == a.indexOf(c) && a.push(c) : this._depViewByActivity[b] = [c];
        return c
    };
    View.GanttFlatDependenciesList.prototype.FindView = function(b) {
        for (var c = 0; c < this.length; c++)
            if (this[c].Dependency == b) return c;
        return -1
    };
    View.GanttFlatDependenciesList.prototype.model_NewDependencyAdded = function(b, c) {
        if ("remove" == c.type || "replaceAll" == c.type)
            for (var a = 0; a < c.OldItems.length; a++) {
                var d = c.OldItems[a],
                    g = this.FindView(d);
                if (-1 !=
                    g) {
                    var f = this[g];
                    this.splice(g, 1);
                    var e = d._fromActivity.ID_M(),
                        k = this._depViewByActivity[e];
                    k && (g = k.indexOf(f), -1 != g && k.splice(g, 1), 0 == k.length && delete this._depViewByActivity[e]);
                    d = d._toActivity.ID_M();
                    if (e = this._depViewByActivity[d]) g = e.indexOf(f), -1 != g && e.splice(g, 1), 0 == e.length && delete this._depViewByActivity[d]
                }
            }
        if ("insert" == c.type)
            for (a = 0; a < c.NewItems.length; a++) d = c.NewItems[a], f = this.CreateNew(d), this.add(f)
    };
    View.GanttFlatDependenciesList.prototype.Dispose = function() {
        for (var b = 0; b < this.length; b++) this[b].Dispose();
        this._collectionChangedHandler && (this._collectionChangedHandler.Dispose(), this._collectionChangedHandler = null);
        this.model && (this.model.Dependencies && this.model.Dependencies.CollectionChanged.unsubscribe(this.model_NewDependencyAdded, this), this.model._dependencies && this.model._dependencies.CollectionChanged.unsubscribe(this.model_NewDependencyAdded, this), this.model.NewActivityAdded && this.model.NewActivityAdded.unsubscribe(this.model_NewActivityAdded, this));
        this.activityViewsList && (this.activityViewsList =
            null)
    }
})(jQuery);
(function(e) {
    RadiantQ.Gantt.OverlappedTasksRenderingOptimization = {
        None: "None",
        ShrinkHeight: "ShrinkHeight"
    };
    Array.max = function(b, c) {
        return null != c || c ? (e.each(b, function(a, b) {
            if (0 == a || max < b.options[c]) max = b.options[c]
        }), max) : Math.max.apply(Math, b)
    };
    Array.min = function(b, c) {
        return null != c ? (e.each(b, function(a, b) {
            if (0 == a || min > b.options[c]) min = b.options[c]
        }), min) : Math.min.apply(Math, b)
    };
    Array.prototype.findByPropertyValue = function(b, c) {
        var a = -1;
        e.each(this, function(d, g) {
            this[b] === c && (a = d)
        });
        return a
    };
    Array.prototype.removeByValue =
        function(b) {
            for (var c = 0; c < this.length; c++)
                if (this[c] === b) {
                    this.splice(c, 1);
                    break
                }
    };
    Array.prototype.containsValue = function(b) {
        for (var c = 0; c < this.length; c++)
            if (this[c] == b) return !0;
        return !1
    };
    Array.prototype.FirstOrDefaultEndity = function(b) {
        for (var c = 0; c < this.length; c++)
            if (this[c].options.Data === b) return this[c];
        return null
    };
    OverlappingBlock = function(b) {
        this.StartTime = b.options.StartTime;
        this.EndTime = b.options.EndTime;
        this.entities = [];
        this.entities.push(b);
        this.IsOverlappingWithExcludeCurrentItem = function(b) {
            for (var a =
                0; a < this.entities.length; a++) {
                var d = this.entities[a];
                if (d != b && (d.options && (d = d.options), b.StartTime >= d.StartTime && b.StartTime < d.EndTime || b.EndTime > d.StartTime && b.EndTime <= d.EndTime || d.StartTime > b.StartTime && d.EndTime < b.EndTime)) return !0
            }
            return !1
        };
        this.IsOverlapping = function(b, a) {
            b.options && (b = b.options);
            if (a) {
                if (b.StartTime >= this.StartTime && b.StartTime < this.EndTime || b.EndTime > this.StartTime && b.EndTime <= this.EndTime || this.StartTime > b.StartTime && this.EndTime < b.EndTime) return !0
            } else
                for (index = 0; index <
                    this.entities.length; index++) {
                    var d = this.entities[index].options;
                    if (b.Parent.element.options.Data == d.Parent.element.options.Data && (b.StartTime >= d.StartTime && b.StartTime < d.EndTime || b.EndTime > d.StartTime && b.EndTime <= d.EndTime || d.StartTime > b.StartTime && d.EndTime < b.EndTime)) return !0
                }
            return !1
        };
        this.AddEntity = function(b) {
            this.entities.push(b);
            this.UpdateTimeLength()
        };
        this.RemoveEntity = function(b) {
            (b = this.entities.Remove(b)) && 0 < this.entities.length && this.UpdateTimeLength();
            return b
        };
        this.UpdateTimeLength =
            function() {
                0 < this.entities.length && (this.StartTime = Array.min(this.entities, "StartTime"), this.EndTime = Array.max(this.entities, "EndTime"))
        };
        this.ComputeIndicesAndHeight = function() {
            var b = this.GetBlocksFromEntities();
            for (i = 0; i < b.length; i++) {
                var a = b[i];
                for (index = 0; index < a.entities.length; index++) {
                    var d = a.entities[index],
                        g = RadiantQ.FlexyGantt.TaskItemControl,
                        g = d.Height - 2 * g.MarginForBars - (g.TaskBar_BorderTopWidth + g.TaskBar_BorderBottomWidth),
                        f = b.length > g && g ? g : b.length;
                    void 0 != d.element.attr("heightSetBySrc") ||
                        isNaN(parseInt(d.element[0].style.height)) ? d._updateTaskItem(i, g / f, 1 < b.length, f) : d._updateTaskItem(i, parseInt(d.element[0].style.height), 1 < b.length)
                }
            }
        };
        this.GetBlocksFromEntities = function() {
            for (var b = [], a = 0; a < this.entities.length; a++) {
                for (var d = this.entities[a], g = !1, f = 0; f < b.length; f++) {
                    var e = b[f];
                    if (!1 == e.IsOverlapping(d, !1)) {
                        e.AddEntity(d);
                        g = !0;
                        break
                    }
                }!1 == g && b.push(new OverlappingBlock(d))
            }
            return b
        };
        this.GetRowCount = function() {
            return this.GetBlocksFromEntities().length
        };
        return this
    };
    window.OverlappingBlock =
        OverlappingBlock
})(jQuery);
(function(e, b) {
    var c = function(a, b) {
        for (var c = a.replace(/\\\}/g, "__CURLY__").replace(/\\#/g, "__SHARP__").replace(/\$\{([^}]*)\}/g, "#=($1)#").split("#"), e = "var x=", k = 0; k < c.length; k++) {
            var n;
            n = c[k];
            n = 0 === k % 2 ? "'" + n.split("'").join("\\'").split('\\"').join('\\\\\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t") + "'" : "=" === n.charAt(0) ? "+(" + n.substring(1) + ")+" : ";" + n + ";x+=";
            e += n
        }
        e += ";return x;";
        e = e.replace(/__CURLY__/g, "}").replace(/__SHARP__/g, "#");
        c = new Function("data", e);
        return b ? c(b) :
            c
    };
    c.hasValueInWindow = function(a) {
        var c;
        c = window;
        a = a.split(".");
        for (var f = 0; f < a.length; f++) "undefined" != typeof c && (c = c[a[f] + "_M"] ? c[a[f] + "_M"]() : c[a[f]]);
        c = !0 == b.isFunction(c) ? !0 : void 0 == c ? !1 : void 0;
        return !1 == c ? !1 : !0
    };
    c.checkProperty = function(a) {
        return " " == a ? !0 : !1
    };
    c.getterCache = {};
    c.getter = function(a, b) {
        var f = null;
        null == c.getterCache[a] && (f = "" == a ? "return d;" : " if(d." + a + " != undefined)  if(typeof(d." + a + ") ==='function')   return d." + a + "(); else return d." + a + ";else if(" + c.hasValueInWindow(a) + " ){ if(typeof " +
            a + " === 'function')    return " + a + "(d); else return " + a + ";}else return null;", f = Function("d", f), c.getterCache[a] = f);
        f = c.getterCache[a];
        return b ? f(b) : f
    };
    c.setterCache = {};
    c.setter = function(a, b, f) {
        var e = null;
        null == c.setterCache[a] && (e = " if(d." + a + " != undefined) if(typeof(d." + a + ") ==='function') d." + a + "(value);else d." + a + "= value;else if(" + c.hasValueInWindow(a) + " ){ if(typeof " + a + " === 'function') " + a + "(d,value); else " + a + "=value;}else d." + a + "= value;", e = Function("d", "value", e), c.setterCache[a] = e);
        e =
            c.setterCache[a];
        return b ? e(b, f) : e
    };
    e.Default = {};
    e.Default.Template = {};
    var a = function(a) {
        var b = /name/g;
        return a ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'.replace(b,
            a) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'
    },
        a = function(a) {
            var b = /name/g;
            return a ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'.replace(b,
                a) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${name(data)}</div>'
        };
    e.Template = c;
    e.Default.Template.ProjectGanttExpandableTextBlockTemplate = function(a) {
        var b = /data.Activity.ActivityName/g;
        return a ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${data.Activity_M().ActivityName_M()}</div>'.replace(b,
            a) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text">${data.Activity_M().ActivityName_M()}</div>'
    };
    e.Default.Template.FlexyGanttExpandableTextBlockTemplate =
        a;
    e.Default.Template.ProjectGanttExpandableTextboxEditor = function(a) {
        var b = /data.Activity.ActivityName/g;
        return a ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text"><input data-bind=value:Activity_M().ActivityName_M /></div>'.replace(b,
            a) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${data.IndentWidth_M()}px"></div><div style="width: 12px; display: ${data.IsParent_M() ? "block" :"none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${ data.IsExpanded_M() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text"><input data-bind=value:Activity_M().ActivityName_M /></div>'
    };
    e.Default.Template.FlexyGanttExpandableTextBoxEditor =
        function(a) {
            var b = /name/g;
            return a ? '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text"><input data-bind="value:name"/></div>'.replace(b,
                a) : '<div class="rq-grid-expand-indentWidth" style="height: 1px; width: ${RadiantQ.Gantt.LevelToIndentWidth(data.Level(), data.IsParentType())}px"></div><div style="width: 12px; display: ${data.IsParentType() ? (data.HierarchicalItem.CanShowCue() ? "block" :"none") : "none" }" class="arrowContainer">   <div onclick="ExpanderOnclick(this,event)" id="arrow" class="${data.HierarchicalItem.IsExpanded() ? " rq-grid-expand-arrow rq-grid-collapse-arrow": "rq-grid-expand-arrow"} rq-Ignore-click"></div></div> <div class="rq-grid-expander-text"><input data-bind="value:name"/></div>'
    };
    window.ExpanderOnclick = function(a, c) {
        var f = b(a).closest("tr.rq-grid-row"),
            h = f.closest("table.ui-grid-body-table").find("tbody"),
            k = f.closest("table#frozenGanttTable").find("tbody"),
            h = 0 != h.length ? h.data("VWGrid") : k.data("VWGrid"),
            f = h.GetDataFromRow(f);
        f instanceof e.FlexyGantt.FlexyNodeData ? (f.HierarchicalItem._forceToCreateNewChildList = !0, f.HierarchicalItem.IsExpanded(!f.HierarchicalItem.IsExpanded()), f.HierarchicalItem._forceToCreateNewChildList = !1, h.RefreshItem(f)) : (h = new e.Gantt.ExpandCollapseActivityViewAction(f.GC,
            f, !f.IsExpanded_M()), f.GC.ActionManager.RecordAction(h));
        void 0 != c.stopPropagation && c.stopPropagation()
    };
    window.Template = c
})(RadiantQ, jQuery);
(function(e, b) {
    function c(a, b, c, f, e) {
        var k = this;
        k.data = f;
        k.Value = c;
        k.getMethodName = a.data("getvaluename") || "value";
        k.setMethodName = a.data("setvaluename") || "value";
        k.$elem = a;
        k.role = b;
        k.UpdatedValue = null;
        k.getOptions = function(a) {
            return a.data("options") || {}
        };
        k.SetValueToElement = function() {
            if (null == this.data && !1 == this.initChange) return null;
            var a = this.Value.getter(f);
            if (!1 == this.compareObject(this.UpdatedValue, a)) this.$elem[this.role](this.setMethodName, a)
        };
        this.compareObject = function(a, b) {
            return null !=
                a && null != b && a.equals && b.equals ? a.equals(b) : a == b
        };
        k.initChange = !1;
        var n = this.getOptions(a);
        f && (n[e] = function() {
            !1 == k.initChange && (k.initChange = !0, k.UpdatedValue = k.GetValueToElement(), !1 == k.compareObject(k.UpdatedValue, c.getter(f)) && c.setter(f, k.UpdatedValue), k.initChange = !1)
        });
        a[b](n);
        k.initChange = !0;
        k.SetValueToElement();
        k.initChange = !1
    }
    c.prototype.GetValueToElement = function() {
        return this.$elem[this.role](this.getMethodName)
    };
    e.Binder = function() {};
    Binder = e.Binder;
    e.Binder.value = function(a, b, g, f) {
        var e =
            a.data("valueupdate") || "change",
            k = null;
        g.getter(f);
        a.val(g.getter(f));
        b ? k = new c(a, b, g, f, e) : a.bind(e, function() {
            var b = a.val();
            g.setter(f, b)
        });
        this.refresh = function() {
            if (k) k.SetValueToElement();
            else {
                var b = g.getter(f);
                a.val() != b && a.val(b)
            }
        }
    };
    e.Binder.text = function(a, b, c, f) {
        this.element = a;
        this.value = c;
        this.data = f;
        this.init = function() {
            this.element.text(this.value.getter(this.data))
        };
        this.refresh = function() {
            this.init()
        }
    };
    Binder.attr = function(a, d, c, f, e) {
        b(a).attr(e, c.getter(f));
        this.refresh = function() {
            b(a).attr(e,
                c.getter(f))
        }
    };
    Binder.style = function(a, d, c, f, e) {
        b(a).css(e, c.getter(f));
        this.refresh = function() {
            b(a).css(e, c.getter(f))
        }
    };
    e.Bind = function(a, d) {
        this.data = d;
        this.bindings = [];
        this.bindAllElem = function(a) {
            var b = this.bindElement(a);
            b && (this.bindings = b.concat(this.bindings));
            b = a.childNodes;
            b = a.children;
            a = [];
            for (var d = 0; d < b.length; d++) a[d] = b[d];
            for (d = 0; d < a.length; d++) this.bindAllElem(a[d])
        };
        this.getValue = function(a, b) {
            return a && b.value ? (getter = Template.getter(b.value), setter = Template.setter(b.value), value = {
                getter: getter,
                setter: setter,
                field: b.value
            }) : null
        };
        this.createBindings = function(a, d, c) {
            var g = [];
            a = b(a);
            var l = Binder[c.key],
                m = c.value;
            !1 == m instanceof Array && (m = [c]);
            for (var p = 0; p < m.length; p++) {
                var q = m[p],
                    s = this.getValue(this.data, q),
                    l = Binder[q.key] ? Binder[q.key] : Binder[c.key];
                if (null == l) return;
                l = new l(a, d, s, this.data, q.key);
                l.init && l.init(a, d, s, this.data, q.key);
                q = q.value.split(".");
                s = null;
                1 < q.length ? (l.property = q.pop(), q = q.join("."), s = e.Template.getter(q, this.data)) : (s = this.data, l.property = q[0]);
                s && l.refresh && s.PropertyChanged && (l.PropertyName = l.property, q = s.PropertyChanged.subscribe(function(a, b) {
                    var d = b.PropertyName; - 1 != d.indexOf("_M") && (d = d.replace(/_M/ig, ""));
                    this.PropertyName == d && this.refresh(a, b)
                }, l), l.destroyEvent = q);
                g.push(l)
            }
            return g
        };
        this.bindElement = function(a) {
            var b = a.getAttribute("data-bind"),
                d = a.getAttribute("data-role"),
                c = [];
            if (b)
                for (var b = this.parseBind(b), g = 0; g < b.length; g++) var e = this.createBindings(a, d, b[g]),
            c = c.concat(e);
            return c
        };
        this.parseBind = function(a) {
            var b = [],
                d,
                c, g, e, p;
            a = a.replace(/\s/g, "");
            p = a.match(/[A-Za-z0-9_\-]+:(\{([^}]*)\}|[^,}]+)/g);
            a = 0;
            for (d = p.length; a < d; a++) c = p[a], g = c.indexOf(":"), e = c.substring(0, g), c = c.substring(g + 1), "{" == c.charAt(0) && (c = this.parseBind(c)), b.push({
                key: e,
                value: c
            });
            return b
        };
        var c = a[0];
        a.bindObject && unbind(a);
        this.bindAllElem(c);
        c.bindObject = this.bindings
    };
    e.Unbind = function(a) {
        var b = a[0].bindObject;
        if (b) {
            for (var c = 0; c < b.length; c++) b[c].destroyEvent && b[c].destroyEvent.Dispose(), b[c].destroy && b[c].destroy();
            delete a[0].bindObject
        }
    }
})(RadiantQ,
    jQuery);
var RQStyle = RadiantQ.Gantt.DefaultStyles;
(function(e, b) {
    var c = RadiantQ.Template || kendo.template;
    e.ScaleRendererBase = {
        options: {
            name: "ScaleRendererBase",
            ViewStartTime: null,
            ViewEndTime: null,
            headerInfo: null,
            BaseTimeUnitWidth: 25,
            BaseTimeScaleType: null,
            timeUnits: [],
            GanttChart: null,
            ViewWidth: null,
            WorkTimeSchedule: null
        },
        guid: function() {
            var a = "",
                b, c, f = Math;
            for (b = 0; 32 > b; b++) {
                c = 16 * f.random() | 0;
                if (8 == b || 12 == b || 16 == b || 20 == b) a += "-";
                a += (12 == b ? 4 : 16 == b ? c & 3 | 8 : c).toString(16)
            }
            return a
        },
        _requiresTimeUnitText: !0,
        _floorToHour: function(a) {
            return new Date(a.getFullYear(),
                a.getMonth(), a.getDate(), a.getHours(), 0, 0)
        },
        _floorToMinute: function(a) {
            return new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), 0)
        },
        _floorWidth: function(a, b) {
            a += b;
            var c = Math.floor(a);
            return {
                FlooredWidth: c,
                Residue: a - c
            }
        },
        drawHourHeader: function(a, b, c) {
            var f = RadiantQ.Gantt,
                e = Date.CultureInfo.formatPatterns.shortDate;
            this.element.show();
            var k = 0,
                n = 0;
            for (b = b.clone(); 0 >= b.compareTo(c);) {
                var l = 1;
                0 < b.getMinutes() && (l = 1 - b.getMinutes() / 60);
                try {
                    var k = {
                        Value: k
                    }, m = {
                            Value: n
                        };
                    if (!1 == this.AddTimeUnit(b,
                        l, f.TimeScaleType.Hours, a, f.TimeScaleType.Hours, b.toString("HH"), b.toString(e) + " " + b.toString("htt"), k, m)) break;
                    b = new Date(b.getFullYear(), b.getMonth(), b.getDate(), b.getHours(), 0, 0);
                    b = b.clone().addHours(1)
                } finally {
                    k = k.Value, n = m.Value
                }
            }
        },
        drawDayHeader: function(a, b, c) {
            var f = RadiantQ.Gantt,
                e = Date.CultureInfo.formatPatterns.shortDate,
                k = 0,
                n = 0,
                l = new Date,
                n = 0;
            this.element.show();
            for (l = b.clone(); 0 >= l.compareTo(c);) {
                b = 1;
                var m = l.clone().clearTime();
                0 > m.compareTo(l) && (b = 1 - (new RQTimeSpan(l - m)).getTotalMinutes() /
                    1440);
                try {
                    var k = {
                        Value: k
                    }, p = {
                            Value: n
                        };
                    if (!1 == this.AddTimeUnit(l, b, f.TimeScaleType.Days, a, f.TimeScaleType.Days, l.getDate(), l.toString(e), k, p)) break;
                    l = m.clone().addDays(1)
                } finally {
                    k = k.Value, n = p.Value
                }
            }
        },
        UpdateTimeUnits: function() {
            this.options.timeUnits.length = 0;
            var a = this.options;
            if (!(null == a.ViewStartTime || null == a.ViewEndTime || null == a.headerInfo || 0 <= a.ViewStartTime.compareTo(a.ViewEndTime))) {
                var d = RadiantQ.Gantt,
                    c = RadiantQ.Gantt.Utils,
                    f = a.ViewStartTime.clone(),
                    e = a.ViewEndTime.clone(),
                    k = Date.CultureInfo.formatPatterns.shortDate,
                    n = RQTimeSpan.Zero_M(),
                    l = [],
                    m = 0,
                    n = 0;
                switch (a.headerInfo.Type) {
                    case d.TimeScaleType.Days:
                        this.drawDayHeader(l, f, e);
                        break;
                    case d.TimeScaleType.Weeks:
                        var n = new RQTimeSpan(e.clone() - f.clone()),
                            e = n.getTotalDays(),
                            p = f.clone();
                        this.element.show();
                        for (n = 0; 0 < e;) {
                            var q = c.TimeComputingUtils.GetRemainingDaysInWeek(p),
                                p = p.clone().addDays(q - 7),
                                q = q > e ? e : q;
                            try {
                                var s = {
                                    Value: m
                                }, r = {
                                        Value: n
                                    };
                                if (!1 == this.AddTimeUnit(p, q, d.TimeScaleType.Days, l, d.TimeScaleType.Weeks, p.toString("MMMM dd, yyyy"), p.toString(k) + " - " + p.clone().addDays(6).toString(k),
                                    s, r)) break
                            } finally {
                                m = s.Value, n = r.Value
                            }
                            e -= q;
                            p = p.clone().addDays(7)
                        }
                        break;
                    case d.TimeScaleType.Months:
                        n = new RQTimeSpan(e - f);
                        e = n.getTotalDays();
                        p = f.clone();
                        this.element.show();
                        for (n = 0; 0 < e;) {
                            q = c.TimeComputingUtils.GetRemainingDaysInMonth(p);
                            q = q > e ? e : q;
                            try {
                                if (s = {
                                    Value: m
                                }, r = {
                                    Value: n
                                }, !1 == this.AddTimeUnit(p, q, d.TimeScaleType.Days, l, d.TimeScaleType.Months, p.toString("MMMM yyyy"), (new Date(p.getFullYear(), p.getMonth(), 1)).toString(k) + " - " + (new Date(p.getFullYear(), p.getMonth() + 1, 0, 23, 59, 59)).toString(k),
                                    s, r)) break
                            } finally {
                                m = s.Value, n = r.Value
                            }
                            e -= q;
                            p = c.TimeComputingUtils.GetStartOfNextMonth(p.clone())
                        }
                        break;
                    case d.TimeScaleType.Years:
                        n = new RQTimeSpan(e - f);
                        e = n.getTotalDays();
                        p = f.clone();
                        this.element.show();
                        for (n = 0; 0 < e;) {
                            q = c.TimeComputingUtils.GetRemainingDaysInYear(p.clone());
                            q = q > e ? e : q;
                            try {
                                if (s = {
                                    Value: m
                                }, r = {
                                    Value: n
                                }, !1 == this.AddTimeUnit(p.clone(), q, d.TimeScaleType.Days, l, d.TimeScaleType.Years, p.toString("yyyy"), p.toString(k) + " - " + p.clone().addYears(1).addDays(-1).toString(k), s, r)) break
                            } finally {
                                m = s.Value,
                                n = r.Value
                            }
                            e -= q;
                            p = c.TimeComputingUtils.GetStartOfNextYear(p.clone())
                        }
                        break;
                    case d.TimeScaleType.Minutes:
                        n = new RQTimeSpan(e - f);
                        e = n.getTotalMinutes();
                        this.element.show();
                        for (c = n = 0; c < e; c++) try {
                            if (s = {
                                Value: m
                            }, r = {
                                Value: n
                            }, q = f.clone().addMinutes(c), !1 == this.AddTimeUnit(q, 1, d.TimeScaleType.Minutes, l, d.TimeScaleType.Minutes, q.toString("mm"), q.toString(k) + " " + q.toString("htt"), s, r)) break
                        } finally {
                            m = s.Value, n = r.Value
                        }
                        break;
                    case d.TimeScaleType.Hours:
                        this.drawHourHeader(l, f, e);
                        break;
                    case d.TimeScaleType.Custom:
                        if (null ==
                            this.options.headerInfo.CustomTimeScaleTypeHint) throw "CustomTimeScaleTypeHint is not set in a TimeScaleHeaderDefinition of type TimeScaleType.Custom.";
                        a = this.options.headerInfo.CustomTimeScaleTypeHint.EquivalentType;
                        b(this.element).show();
                        m = n = 0;
                        q = f.clone();
                        f = new RadiantQ.Gantt.ProvideCustomTimeIntervalsEventArgs(q.clone(), e.clone());
                        this.options.headerInfo.ProvideCustomTimeIntervals.raise(this, f);
                        0 == f.TimeIntervals.length && f.TimeIntervals.push(e.clone());
                        f.TimeIntervals.splice(0, 0, q.clone());
                        for (c =
                            0; c < f.TimeIntervals.length; c++) {
                            var q = f.TimeIntervals[c],
                                q = a < d.TimeScaleType.Hours ? this._floorToMinute(q) : q,
                                t = c < f.TimeIntervals.length - 1 ? f.TimeIntervals[c + 1] : e.clone(),
                                t = a < d.TimeScaleType.Hours ? rqTCUtils.GetTimeSpan(q, this._floorToMinute(t)) : rqTCUtils.GetTimeSpan(q, t);
                            if (t < RQTimeSpan.Zero_M()) throw "Custom time interval entries are out of order.";
                            a > d.TimeScaleType.Hours && (a = d.TimeScaleType.Hours);
                            t = a >= d.TimeScaleType.Hours ? t.getTotalHours() : t.getTotalMinutes();
                            try {
                                s = {
                                    Value: m
                                }, r = {
                                    Value: n
                                }, p = this.AddTimeUnit(q,
                                    t, a, l, a, q.getDate().toString(), q.toString(k) + " " + q.toString("htt"), s, r)
                            } finally {
                                m = s.Value, n = r.Value
                            }
                            q = l[l.length - 1];
                            this.options.headerInfo.CustomTimeScaleTypeHint.EquivalentType > d.TimeScaleType.Days && (q.IsWorkingTime = !0);
                            if (!1 == p) break
                        }
                }
                this.options.timeUnits = l
            }
        },
        GetWorkTimeSchedule: function() {
            return this.options.WorkTimeSchedule
        },
        AddTimeUnit: function(a, d, c, f, e, k, n, l, m) {
            var p = this.options,
                q = RadiantQ.Gantt,
                s = RadiantQ.Gantt.Utils,
                r = p.headerInfo,
                t = k,
                x = null;
            k = !1;
            this._requiresTimeUnitText && r.ProvideCustomHeaderText.isSubscribed() &&
                (k = !0);
            if (!k && null != r._textFormat && "" != r._textFormat)
                if (-1 != r._textFormat.indexOf("|")) x = r._textFormat, t = " ";
                else try {
                    t = a.toString(r.TextFormat)
                } catch (w) {}
                q = new q.TimeUnit;
            q.Text = t;
            q.TextFormat = x;
            q.ToolTipText = n;
            q.Type = e;
            d = this._floorWidth(s.TimeComputingUtils.ConvertToUnitsOfBaseType(r.BaseTimeScaleType, c, d) * p.BaseTimeUnitWidth, m.Value);
            q.Width = d.FlooredWidth;
            m.Value = d.Residue;
            q.IsWorkingTime = s.TimeComputingUtils.IsWorkingTime(a, e, this.GetWorkTimeSchedule());
            q.Tag = a.clone();
            q.guid = this.guid();
            f.push(q);
            e = p.ViewWidth;
            if (2 == f.length && f[0].Width < p.GanttChart.options.MinTimeUnitWidthForHeaderVisibility && f[1].Width < p.GanttChart.options.MinTimeUnitWidthForHeaderVisibility) return b(this.element).hide(), !1;
            f = f[f.length - 1];
            f.Width > e && (f.Width = e);
            l.Value += f.Width;
            k && (a = new RadiantQ.Gantt.ProvideCustomerHeaderTextEventArgs(a, q.Text, q.Width), r.ProvideCustomHeaderText.raise(r, a), q.Text = a.Text, a.TooltipText && (q.ToolTipText = a.TooltipText));
            return l.Value >= e ? (l = f.Width - (l.Value - e), 0 < l && (f.Width = l), !1) : !0
        },
        _create: function() {
            this._refresh()
        },
        _refresh: function() {
            var a = this.options;
            this.UpdateTimeUnits();
            this.element.width(a.ViewWidth);
            this.renderUnites(this.options.timeUnits)
        },
        _destroy: function() {
            this.element.empty()
        },
        _refreshWidth: function(a) {
            b(this.element).width(a)
        },
        _setOption: function(a, b) {
            this.widgetBaseSetOption.apply(this, arguments);
            "ViewWidth" == a && this._refreshWidth(b);
            this._refresh()
        }
    };
    e.TimeSpanHeader = {
        options: {
            name: "TimeSpanHeader"
        },
        renderUnites: function(a) {
            var b;
            b = '<div class="rq-timeUnit-div ' + window.radiantQclasses.headerClass +
                '" data-uid=${data.guid} title="${data.ToolTipText }" style="width: ${ data.Width}px;height:100%;"><div >${ data.Text }</div></div>';
            for (var g = this.options.headerInfo.Template || c(b), f = "<div style='height:100%' >", e = 0; e < a.length; e++) b = a[e], this.guidList[b.guid] = b, b.Width && (f += g(b));
            this.element[0].innerHTML = f + "</div>"
        },
        _renderTimeUnit: function(a, d, c) {
            var f = b('<div class="rq-timeUnit-div ' + window.radiantQclasses.headerClass + '" style="width: ' + a.Width + 'px;height:100%;" ></div>'),
                e = f[0];
            d.appendChild(e);
            d = RQStyle.ZeroStyle;
            var k = b("<table ></table>")[0];
            k.style.cssText = d;
            var n = k.insertRow(-1),
                l = n.insertCell(-1);
            n.style.cssText = d;
            l.style.cssText = d;
            l.align = "center";
            l.vAlign = "middle";
            l.width = "100%";
            l.height = "100%";
            b(l).attr({
                align: "center",
                vAlign: "middle",
                title: a.ToolTipText
            });
            var m = this,
                p = RadiantQ.Gantt.TimeRangeHighlightBehavior;
            f.mouseenter(function() {
                a.IsHighlighted(!0);
                (m.options.GanttChart.options.TimeRangeHighlightBehavior & p.HighlightInChartOnHeaderMouseHover) == p.HighlightInChartOnHeaderMouseHover &&
                    f.addClass("rq-tsh-timeUnit-hover " + window.radiantQclasses.hoveringClass)
            });
            f.mouseleave(function() {
                a.IsHighlighted(!1);
                (m.options.GanttChart.options.TimeRangeHighlightBehavior & p.HighlightInChartOnHeaderMouseHover) == p.HighlightInChartOnHeaderMouseHover && f.removeClass("rq-tsh-timeUnit-hover " + window.radiantQclasses.hoveringClass)
            });
            e.appendChild(k);
            c && this.options.headerInfo.RenderCallBack.raise(this, {
                timeUnit: a,
                headerUnit: f
            })
        },
        CreateSmartDateTimeText: function(a, b) {
            a[this.getChildWidgetName("SmartDateTimeText")]({
                text: b.Text,
                timeUnit: b
            })
        },
        guidList: [],
        prevTaget: null,
        prevTimeunit: null,
        addHoverStyle: function(a, b) {
            null != this.prevTaget && this.removeHoverStyle(this.prevTaget, this.prevTimeunit);
            a && !0 == a.hasClass("rq-timeUnit-div") && (this.prevTaget = a, this.prevTimeunit = b, b.IsHighlighted(!0), a.addClass("rq-tsh-timeUnit-hover " + window.radiantQclasses.hoveringClass))
        },
        removeHoverStyle: function(a, b) {
            a.hasClass("rq-tsh-timeUnit-hover") && (b.IsHighlighted(!1), a.removeClass("rq-tsh-timeUnit-hover " + window.radiantQclasses.hoveringClass),
                this.prevTimeunit = this.prevTaget = null)
        },
        _create: function() {
            RQStyle.init();
            var a = this,
                d = RadiantQ.Gantt.TimeRangeHighlightBehavior;
            a.guidList = [];
            a.element.height(a.options.headerInfo.HeaderHeight);
            a.baseCreate.apply(a, arguments);
            a.element.mouseover(function(c) {
                if ((a.options.GanttChart.options.TimeRangeHighlightBehavior & d.HighlightInChartOnHeaderMouseHover) == d.HighlightInChartOnHeaderMouseHover && (c = b(c.target).closest("div.rq-timeUnit-div").not(".rq-tsh-timeUnit-hover"), c.length)) {
                    var g = c.data("uid");
                    g && a.addHoverStyle(c, a.guidList[g])
                }
            });
            a.element.mouseleave(function(b) {
                a.addHoverStyle(null, null)
            });
            var c = a.options;
            c.headerInfo.PropertyChanged.clear();
            c.headerInfo.PropertyChanged.subscribe(a.PropertyChange, a)
        },
        PropertyChange: function(a, b) {
            "TextFormat" == b.PropertyName && this._refresh()
        },
        UpdateTimeUnits: function() {
            var a = this.options,
                b = a.headerInfo;
            viewStartTime = a.ViewStartTime;
            viewEndTime = a.ViewEndTime;
            null != b && b.TimeUnitsCache.ClearTimeUnitsCacheForRange(viewStartTime, viewEndTime);
            this.ScaleRendererBaseUpdateTimeUnits();
            null != b && null != a.timeUnits && 0 < a.timeUnits.length && b.TimeUnitsCache.SetTimeUnitsCacheForRange(viewStartTime, viewEndTime, a.timeUnits)
        },
        _setOption: function(a, b) {
            this.baseSetOption.apply(this, arguments)
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e, b) {
    var c = RadiantQ.Gantt;
    e.GanttChartBackground = {
        options: {
            name: "GanttChartBackground",
            WorkTimeSchedule: null,
            WorkingTimeBackground: null,
            NonWorkingTimeBackground: null,
            BottomTwoHeaders: null,
            ViewStartTime: null,
            ViewEndTime: null,
            BaseTimeUnitWidth: 25,
            BaseTimeScaleType: null,
            timeUnits: [],
            GanttChart: null,
            ViewWidth: null,
            Parent: null,
            TimeRangeHighlightBehavior: null
        },
        _create: function() {
            this._refresh();
            this._subscribeEvents()
        },
        _subscribeEvents: function() {
            var a = this,
                b = this.options.Parent.element;
            null !=
                b && (b.bind("ganttchartrefreshui.GanttChartBGRefreshUI", function(b, d) {
                    a._ConvertGanttChartOptionsToChatBGOptions(d.options);
                    a.draw()
                }), b.bind("ganttchartoptionchanged.GanttChartBGRefreshUI", function(b, d) {
                    a._ConvertGanttChartOptionsToChatBGOptions(d.options)
                }))
        },
        _refresh: function() {
            this.element.empty();
            this.draw()
        },
        propertyChanged: function(a, b) {
            if ("IsHighlighted" == b.PropertyName) {
                var c = a.IsHighlighted(),
                    f = this.element.find("#" + a.guid);
                c ? this.addHoverStyle(f, a) : this.removeHoverStyle(f, a)
            }
        },
        prevTaget: null,
        prevTimeunit: null,
        addHoverStyle: function(a, b) {
            null != this.prevTaget && this.removeHoverStyle(this.prevTaget, this.prevTimeunit);
            if (a && !0 == a.hasClass("ui-GanttTimeUnitBackground-unit")) {
                this.prevTaget = a;
                this.prevTimeunit = b;
                var c = a.data("level");
                a.hasClass("rq-gc-nonWorking-background") && a.removeClass(window.radiantQclasses.highlightingClass);
                1 == c && a.css("background", "");
                a.addClass("rq-Background-timeUnit-hover " + window.radiantQclasses.hoveringClass)
            }
        },
        removeHoverStyle: function(a, b) {
            if (a.hasClass("rq-Background-timeUnit-hover")) {
                var c =
                    a.data("level");
                a.hasClass("rq-gc-nonWorking-background") && a.addClass(window.radiantQclasses.highlightingClass);
                1 == c && a.css("background", "transparent");
                a.removeClass("rq-Background-timeUnit-hover " + window.radiantQclasses.hoveringClass);
                this.prevTimeunit = this.prevTaget = null
            }
        },
        drawUnits: function(a, b, c) {
            for (var f = "<div class='ui-GanttChartScaleBackground ui-GanttChart-Background' >", e = "", k, n, l = 0; l < a.length; l++) e = "ui-GanttTimeUnitBackground-unit ", k = a[l], k.PropertyChanged.subscribe(this.propertyChanged,
                this), 0 == b ? (e += k.IsWorkingTime ? "ui-WorkingTimeBackground " : "rq-gc-nonWorking-background " + window.radiantQclasses.highlightingClass, n = '"height: ' + c + "px;z-index: " + b + ";width: " + k.Width + 'px;"') : 1 == b && (e += "rq-gc-timeunit-border ui-widget-content", n = '"height: ' + c + "px;z-index: " + b + ";width: " + k.Width + 'px; border-left-width:1px;"'), f += "<div id=" + k.guid + " data-level=" + b + ' class="' + e + '" style=' + n + " ></div>";
            return f + "</div>"
        },
        draw: function() {
            var a = this.options,
                b = a.BottomTwoHeaders;
            if (null != b) {
                for (var c = this.element.parent("div.rq-gc-chartArea-div").height(),
                        f = "", e = 0; e < b.length; e++) var k = b[e],
                n = k.TimeUnitsCache.GetTimeUnitsCacheForRange(a.ViewStartTime, a.ViewEndTime), k = RadiantQ.Gantt.BottomTwoHeaderDefinitions.GetIndex(k), f = f + this.drawUnits(n, k, c);
                this.element[0].innerHTML = f
            }
        },
        _ConvertGanttChartOptionsToChatBGOptions: function(a) {
            this.options.ViewStartTime = a.ComputedStartTime.clone();
            this.options.ViewEndTime = a.ComputedEndTime.clone();
            this.options.BaseTimeUnitWidth = a.BaseTimeUnitWidth;
            this.options.BaseTimeScaleType = a.BaseTimeScaleType;
            this.options.GanttChart = {
                MinTimeUnitWidthForHeaderVisibility: a.MinTimeUnitWidthForHeaderVisibility
            };
            this.options.ViewWidth = a.ViewWidth;
            this.options.BottomTwoHeaders = a.BottomTwoHeaders;
            this.options.WorkTimeSchedule = a.WorkTimeSchedule;
            this.options.WorkingTimeBackground = a.WorkingTimeBackground;
            this.options.NonWorkingTimeBackground = a.NonWorkingTimeBackground;
            this.options.TimeRangeHighlightBehavior = a.TimeRangeHighlightBehavior
        },
        _setOption: function(a, b) {
            this.widgetBaseSetOption.apply(this, arguments)
        },
        _destroy: function() {
            this.element.empty();
            var a = this.options.Parent.element;
            a.unbind("ganttchartrefreshui.GanttChartBGRefreshUI");
            a.unbind("ganttchartoptionchanged.GanttChartBGRefreshUI")
        }
    };
    e.GanttChartCustomRangeBackground = {
        options: {
            name: "GanttChartCustomRangeBackground",
            CustomChartBackgroundRanges: null,
            Parent: null
        },
        _create: function() {
            var a = this;
            a._refresh();
            var b = a.options.Parent.element;
            null != b && (b.bind("ganttchartrefreshui.CustomBGRefreshUI", function(b, d) {
                a._ConvertGanttChartOptionsToChatBGOptions(d.options);
                a._refresh()
            }), b.bind("ganttchartoptionchanged.CustomBGRefreshUI",
                function(b, d) {
                    a._ConvertGanttChartOptionsToChatBGOptions(d.options)
                }));
            null != a.options.CustomChartBackgroundRanges && a.options.CustomChartBackgroundRanges.DiscreetCustomRanges.CollectionChanged.subscribe(function() {
                this._refresh()
            }, a)
        },
        _refresh: function() {
            this.element.empty();
            this.element.width(this.options.ViewWidth);
            this.UpdateTimeUnits()
        },
        UpdateTimeUnits: function() {
            var a = this.options,
                b = a.ViewStartTime.clone(),
                c = a.ViewEndTime.clone(),
                f = a.BaseTimeUnitWidth,
                e = a.BaseTimeScaleType;
            if (!(null == b || null ==
                c || null == a.CustomChartBackgroundRanges || 0 <= b.compareTo(c))) {
                for (var k = [], n = [], l = 0; l < a.CustomChartBackgroundRanges.DiscreetCustomRanges.length; l++) n.push(a.CustomChartBackgroundRanges.DiscreetCustomRanges[l]);
                var m = new RadiantQ.Gantt.CustomRangeInformationEventArgs(b, c);
                a.CustomChartBackgroundRanges.RaiseProvideRepeatingCustomRanges(m);
                a = RadiantQ.Gantt.Utils.TimeComputingUtils;
                for (l = 0; l < m.CustomRanges.length; l++) n.push(m.CustomRanges[l]);
                for (l = 0; l < n.length; l++)
                    if (m = n[l], 0 <= m.StartTime.compareTo(b) &&
                        0 < c.compareTo(m.StartTime) || 0 < m.EndTime.compareTo(c) && 0 <= c.compareTo(m.EndTime)) {
                        var p = a.GetTimeSpan(m.StartTime.clone(), m.EndTime.clone()),
                            q = RadiantQ.Gantt.TimeScaleType.Hours,
                            p = p.getTotalHours(),
                            s = RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToUnitsOfBaseType(e, q, p) * f,
                            p = a.GetTimeSpan(b.clone(), m.StartTime.clone()),
                            p = p.getTotalHours(),
                            q = RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToUnitsOfBaseType(e, q, p) * f;
                        k.push(new RadiantQ.Gantt.CustomRangeTimeUnit(s, q, m))
                    }
                b = "";
                for (l = 0; l < k.length; l++) b +=
                    this._renderCustomChartBackGround(k[l]);
                this.element[0].innerHTML = b
            }
        },
        _renderCustomChartBackGround: function(a) {
            return '<div class=ui-customBackgroundRange-unit style="width: ' + a.Width + "px;;margin-left: " + a.CanvasLeft + 'px;" >' + a.CustomRangeInfo.DataTemplate(a) + "</div>"
        },
        _setOption: function(a, b) {},
        _ConvertGanttChartOptionsToChatBGOptions: function(a) {
            this.options.ViewStartTime = a.ComputedStartTime.clone();
            this.options.ViewEndTime = a.ComputedEndTime.clone();
            this.options.BaseTimeUnitWidth = a.BaseTimeUnitWidth;
            this.options.BaseTimeScaleType = a.BaseTimeScaleType;
            this.options.GanttChart = {
                MinTimeUnitWidthForHeaderVisibility: a.MinTimeUnitWidthForHeaderVisibility
            };
            this.options.ViewWidth = a.ViewWidth;
            this.options.WorkTimeSchedule = a.WorkTimeSchedule;
            this.options.WorkingTimeBackground = a.WorkingTimeBackground;
            this.options.WorkingTimeBackground = a.WorkingTimeBackground
        },
        _destroy: function() {
            var a = this.options.Parent.element;
            a.unbind("ganttchartrefreshui.CustomBGRefreshUI");
            a.unbind("ganttchartoptionchanged.CustomBGRefreshUI")
        }
    };
    e.SpecialLines = {
        options: {
            SpecialLineInfos: null,
            name: "SpecialLines",
            Parent: null
        },
        height: 0,
        _create: function() {
            this.baseCreate.apply(this, arguments);
            var a = this,
                b = a.options.Parent.element;
            null != b && (b.bind("ganttchartrefreshui.SplLinesRefreshUI", function(b, d) {
                a._ConvertGanttChartOptsToSpecialLineOpts(d.options);
                a._refresh()
            }), b.bind("ganttchartoptionchanged.SplLinesRefreshUI", function(b, d) {
                a._ConvertGanttChartOptsToSpecialLineOpts(d.options)
            }));
            null != this.options.SpecialLineInfos && this.options.SpecialLineInfos.CollectionChanged.subscribe(function() {
                a._refresh()
            })
        },
        _refresh: function() {
            this.element.empty().width(this.options.ViewWidth);
            this.UpdateTimeUnits()
        },
        UpdateTimeUnits: function() {
            var a = RadiantQ.Gantt.Utils.TimeComputingUtils,
                b = this.options,
                g = b.ViewStartTime.clone(),
                f = b.ViewEndTime.clone(),
                e = b.BaseTimeUnitWidth,
                k = b.BaseTimeScaleType;
            if (!(null == g || null == f || null == b.SpecialLineInfos || 0 <= g.compareTo(f))) {
                for (var f = [], n = 0; n < b.SpecialLineInfos.length; n++) {
                    var l = b.SpecialLineInfos[n],
                        m = a.GetTimeSpan(g, l.LineDateTime);
                    if (!(m < RQTimeSpan.Zero_M())) {
                        var p = new RadiantQ.Gantt.TimeUnit;
                        if (0 >= g.compareTo(l.LineDateTime)) switch (void 0 == l.ToolTipText && (l.ToolTipText = ""), p.Tag = l, k) {
                            case c.TimeScaleType.Minutes:
                                p.Type = c.TimeScaleType.Minutes;
                                p.Tag = l;
                                p.Width = a.ConvertToUnitsOfBaseType(k, c.TimeScaleType.Minutes, m.getTotalMinutes()) * e;
                                f.push(p);
                                break;
                            case c.TimeScaleType.Hours:
                                p.Type = c.TimeScaleType.Hours;
                                p.Tag = l;
                                p.Width = a.ConvertToUnitsOfBaseType(k, c.TimeScaleType.Hours, m.getTotalHours()) * e;
                                f.push(p);
                                break;
                            case c.TimeScaleType.Days:
                                p.Type = c.TimeScaleType.Days;
                                p.Tag = l;
                                p.Width = a.ConvertToUnitsOfBaseType(k,
                                    c.TimeScaleType.Days, m.getTotalDays()) * e;
                                f.push(p);
                                break;
                            case c.TimeScaleType.Weeks:
                                p.Type = c.TimeScaleType.Weeks;
                                p.Tag = l;
                                p.Width = a.ConvertToUnitsOfBaseType(k, c.TimeScaleType.Weeks, m.getTotalDays() / 7) * e;
                                f.push(p);
                                break;
                            case c.TimeScaleType.Months:
                                p.Type = c.TimeScaleType.Months;
                                p.Tag = l;
                                var q = g,
                                    m = 12 * (l.LineDateTime.getFullYear() - q.getFullYear()),
                                    l = l.LineDateTime.getMonth() - q.getMonth(),
                                    m = 0 < l ? m + l : m - (12 - Math.Abs(l));
                                p.Width = a.ConvertToUnitsOfBaseType(k, c.TimeScaleType.Days, m) * e;
                                f.push(p);
                                break;
                            case c.TimeScaleType.Years:
                                p.Type =
                                    c.TimeScaleType.Years, p.Tag = l, p.Width = a.ConvertToUnitsOfBaseType(k, c.TimeScaleType.Weeks, l.LineDateTime.getFullYear() - g.getFullYear()) * e, f.push(p)
                        }
                    }
                }
                a = "";
                for (n = 0; n < f.length; n++) a += this._renderCustomChartBackGround(f[n], -1);
                this.element[0].innerHTML = a
            }
        },
        _renderCustomChartBackGround: function(a, b) {
            void 0 == a.Tag.LineColor && (a.Tag.LineColor = "#C5C5C5");
            return '<div class="rq-gc-specialLine ' + (a.Tag.ClassName || "") + '" style="height: 100%; Background-color:' + a.Tag.LineColor + "; width: 1px; margin-left: " + a.Width +
                'px;" title="' + a.Tag.ToolTipText + '"></div>'
        },
        createToolTip: function(a, b) {
            a.tooltip({
                track: !0,
                content: function(a) {
                    return "<div align='center'>NaN"
                }
            })
        },
        _ConvertGanttChartOptsToSpecialLineOpts: function(a) {
            this.options.ViewStartTime = a.ComputedStartTime.clone();
            this.options.ViewEndTime = a.ComputedEndTime.clone();
            this.options.BaseTimeUnitWidth = a.BaseTimeUnitWidth;
            this.options.BaseTimeScaleType = a.BaseTimeScaleType;
            this.options.GanttChart = {
                MinTimeUnitWidthForHeaderVisibility: a.MinTimeUnitWidthForHeaderVisibility
            };
            this.options.ViewWidth = a.ViewWidth;
            this.options.WorkTimeSchedule = a.WorkTimeSchedule;
            this.options.WorkingTimeBackground = a.WorkingTimeBackground;
            this.options.WorkingTimeBackground = a.WorkingTimeBackground
        },
        _setOption: function(a, b) {},
        _destroy: function() {
            var a = this.options.Parent.element;
            a.unbind("ganttchartrefreshui.SplLinesRefreshUI");
            a.unbind("ganttchartoptionchanged.SplLinesRefreshUI")
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e, b) {
    e.ScalePanelRendererBase = {
        options: {
            ViewStartTime: null,
            ViewEndTime: null,
            name: "ScalePanelRendererBase"
        },
        _create: function() {},
        _setOption: function(b, a) {
            this.widgetBaseSetOption.apply(this, arguments)
        }
    };
    e.TimeSpanHeaders = {
        panningUtil: null,
        options: {
            TimeScaleHeaders: null,
            ComputedStartTime: null,
            ComputedEndTime: null,
            BaseTimeUnitWidth: null,
            BaseTimeScaleType: null,
            AnchorTime: null,
            ViewWidth: null,
            ResizeToFit: null,
            ZoomOptions: null,
            ScrollOptions: null,
            CustomChartBackgroundRanges: null,
            BaseTimeUnitWidthMinimum: null,
            BaseTimeUnitWidthMaximum: null,
            MinTimeUnitWidthForHeaderVisibility: null,
            WorkTimeSchedule: null,
            TimeRangeHighlightBehavior: null,
            GanttChart: null,
            name: "TimeSpanHeaders"
        },
        _previousHeight: null,
        heightChangeListener: function(b) {
            b != this._previousHeight && (this._previousHeight = b, this.element.trigger("heightChanged"))
        },
        redraw: function() {
            this._renderTimeLineHeaders(this.options)
        },
        _create: function() {
            this.baseCreate.apply(this, arguments);
            var c = this;
            this.element.addClass("rq-tsh-div").data("TimeSpanHeaders", this);
            this._previousHeight = this.element.height();
            var a = b(this.element).parents(".rq-ganttChart");
            a.bind("ganttchartrefreshui.TimeSpanHeadersRefreshUI", function(a, g) {
                b.extend(c.options, g.options);
                c._renderTimeLineHeaders(g.options)
            });
            a.bind("ganttchartoptionchanged", function(a, g) {
                a.preventDefault();
                a.stopPropagation();
                b.extend(c.options, g.options)
            });
            b(this.element).parents("div").filter(".rq-ganttBase").bind("ganttbaseheadercollectionschanged", function(a, g) {
                a.preventDefault();
                a.stopPropagation();
                b.extend(c.options,
                    g.options);
                var f = g.value.items;
                if ("insert" == g.event.type)
                    for (var e = 0; e < f.length; e++) c._insertTimeLineHeader(f[e], g.value.index, g.options);
                else "remove" == g.event.type && c._removeTimeLineHeader(g.value.index);
                c.heightChangeListener(c.element.height())
            });
            this.redraw()
        },
        widget: function() {
            return this.element
        },
        ShouldZoomWithLeftMouse: function(b) {
            b = RadiantQ.Gantt.isModifierKeyIsPresed(b);
            return (this.options.ZoomOptions & RadiantQ.Gantt.ChartZoomOptions.LeftMouseButtonDownDrag) == RadiantQ.Gantt.ChartZoomOptions.LeftMouseButtonDownDrag && !b
        },
        ShouldScrollWithLeftMouse: function(b) {
            var a = RadiantQ.Gantt.isModifierKeyIsPresed(b);
            return (this.options.ScrollOptions & RadiantQ.Gantt.ChartScrollOptions.LeftMouseButtonDownDrag) == RadiantQ.Gantt.ChartScrollOptions.LeftMouseButtonDownDrag && !a || (this.options.ScrollOptions & RadiantQ.Gantt.ChartScrollOptions.CtrlAndLeftMouseButtonDownDrag) == RadiantQ.Gantt.ChartScrollOptions.CtrlAndLeftMouseButtonDownDrag && b.ctrlKey
        },
        _renderTimeLineHeaders: function(c) {
            var a = this;
            this.element[0].style.display = "none";
            this._refreshWidth(this.options.ViewWidth);
            null != this.options.TimeScaleHeaders && b.map(this.options.TimeScaleHeaders, function(b, g) {
                var f = a._addTimeLineHeader(b, c);
                a.element.append(f);
                return f
            });
            this.heightChangeListener(this.element.height());
            this.element[0].style.display = "block"
        },
        _refreshWidth: function(c) {
            b(this.element).empty();
            b(this.element).width(c)
        },
        _addTimeLineHeader: function(b, a) {
            return this._newTimeLine(b, a)
        },
        _insertTimeLineHeader: function(c, a, d) {
            c = this._newTimeLine(c, d);
            b(".rq-tlh-div", this.element).eq(a).before(c)
        },
        _removeTimeLineHeader: function(c) {
            b(".rq-tlh-div",
                this.element).eq(c).remove()
        },
        _newTimeLine: function(c, a) {
            return b('<div class="rq-tlh-div" />')[this.getChildWidgetName("TimeSpanHeader")]({
                ViewStartTime: this.options.ComputedStartTime,
                ViewEndTime: this.options.ComputedEndTime,
                headerInfo: c,
                BaseTimeUnitWidth: this.options.BaseTimeUnitWidth,
                BaseTimeScaleType: c.BaseTimeScaleType,
                GanttChart: this.options.GanttChart,
                ViewWidth: this.options.ViewWidth,
                WorkTimeSchedule: this.options.WorkTimeSchedule
            })
        },
        StartPanning: function() {
            function b(d, c) {
                a._trigger("AnchorTimeChanged",
                    this, a.panningUtil.CurAnchorTime)
            }
            null != this.panningUtil && this.panningUtil.AnchorTimeChanged.isSubscribed && this.panningUtil.AnchorTimeChanged.unsubscribe(b);
            this.panningUtil = new RadiantQ.Gantt.GanttChartPanningUtil(this.options.AnchorTime, this.options.BaseTimeScaleType, this.options.BaseTimeUnitWidth);
            this.panningUtil.AnchorTimeChanged.subscribe(b);
            var a = this
        },
        _getGanttChartDivsUniqueSelectorIdByID: function(b) {
            return "#" + this.element[0].id.toString().replace(/timeSpanHeader/g, "") + b
        },
        ScrollBy: function(c) {
            if (!1 ==
                this.options.ResizeToFit) {
                var a = b(this._getGanttChartDivsUniqueSelectorIdByID("GanttChart")),
                    d = b(".rq-gc-horizontalScrollBar", a.parent()),
                    d = b(".rq-gc-chart-HScrollBar-content", d).width() - d.width(),
                    g = a.scrollLeft(),
                    g = g + c;
                g <= d && a.scrollLeft(g)
            } else null != this.panningUtil ? this.panningUtil.ApplyXChange(c) : (c = RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertTimeUnitsToTimeSpan(this.options.BaseTimeScaleType, c / this.options.BaseTimeUnitWidth), c = this.options.AnchorTime.addTimeSpan(c), self._trigger("AnchorTimeChanged",
                this, c))
        },
        _setOption: function(b, a) {
            this.baseSetOption.apply(this, arguments)
        },
        _destroy: function() {
            this.element.data("TimeSpanHeaders", null)
        },
        destroy: function() {
            this.element.empty();
            this.element.parents(".rq-ganttChart").unbind("ganttchartrefreshui.TimeSpanHeadersRefreshUI");
            this.element.data("TimeSpanHeaders", null)
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.rowbase = {
        options: {
            filter: "tbody > tr",
            canhHighlightAdjacentElement: null,
            name: "rowbase"
        },
        _create: function() {
            this.options.canhHighlightAdjacentElement = !0
        },
        IsChart: function(b) {
            return e(b).parents("table").hasClass("rq-gc-rowsParent-table") ? !0 : e(b).parents("table").hasClass("ui-grid-body-table") ? !1 : null
        },
        getParent: function(b) {
            return this.IsChart(b) ? e(b).parents(".rq-ganttChart")[0] : e(b).parents(".rq-FlexyTable")[0]
        },
        getAdjacentTR: function(b, c) {
            if (b) {
                var a = -1 == b[0].rowIndex ?
                    b.index() : b[0].rowIndex,
                    d = this.IsChart(b),
                    g;
                !0 == d ? (d = e(".ui-grid-body-table", this.element)[0], void 0 != d.rows && (g = d.rows[a])) : !1 == d && null != d && (d = e(".rq-gc-rowsParent-table", this.element)[0]) && void 0 != d.rows && (g = d.rows[a]);
                return e(g, this.element)
            }
        }
    }
})(jQuery);
(function(e) {
    var b = {
        options: {
            SelectionMode: RadiantQ.Gantt.SelectionMode.Multiple,
            IsFlexyGantt: !0,
            name: "GanttRowselectable",
            SelectEvent: "mouseup"
        },
        gridTable: null,
        frozenGridTable: null,
        chartTable: null,
        chart: null,
        grid: null,
        ganttBase: null,
        Source: null,
        recursive: !1,
        selectedItems: new ObservableCollection,
        _create: function() {
            var b = this;
            b.selectedItems = new ObservableCollection;
            b.$ganttBase = this.element.parent(".rq-ganttBase");
            b.gridTable = this.element.find(".ui-grid-body-table").addClass("ui-selectable").find("tbody");
            b.frozenGridTable = this.element.find(".frozenGanttTable").addClass("ui-selectable").find("tbody");
            b.chartTable = this.element.find(".rq-gc-rowsParent-table").addClass("ui-selectable");
            b.grid = b.gridTable.data("VWGrid");
            b.chart = this.chartTable.parents(".rq-ganttChart").data("GanttChart");
            b.ganttBase = this.element.parent().data("GanttBase");
            this.element.attr("tabIndex", 1);
            b.baseCreate.apply(this, arguments);
            b.element.data("GanttRowselectable", this);
            b.element.bind(b.options.SelectEvent, function(a) {
                0 == b.chartTable.length &&
                    (b.chartTable = b.element.find(".rq-gc-rowsParent-table").addClass("ui-selectable"));
                !1 != b.$ganttBase.data("GanttBase").PreventDefaultFns || void 0 != RadiantQ.Gantt.RowDragDropTracker && !1 != RadiantQ.Gantt.RowDragDropTracker.IsDragStarted_M() || b._mousedown(a)
            });
            var a = !1;
            b.element.bind("keydown", e.proxy(function(d) {
                if(d.which == 8 && d.target.className == "ui-widget-content ui-grid-body") {
                    d.preventDefault();
                    return false;
                }
                b.$ganttBase.data("GanttBase").PreventDefaultFns || !1 != a || 17 == d.which && !b.recursive || (d.shiftKey && (b.recursive = !0), 38 === d.which && (b.KeyUp(d), a = !0, b.element.focus(), d.preventDefault()), 40 === d.which &&
                    (b.KeyDown(d), a = !0, b.element.focus(), d.preventDefault()))
            }, this));
            e(b.document).bind("keyup", e.proxy(function(d) {
                16 == d.which && (b.recursive = !1);
                a = !1
            }, b));
            e(b.document).bind("keydown", e.proxy(function(a) {
                b.$ganttBase.data("GanttBase").PreventDefaultFns || (13 !== a.which || a.isPropagationStopped() || 0 != b.mouseDownTarget.length && (b.mouseDownTarget[0] != b.element[0] && b.mouseDownTarget[0] != b.element.parent()[0] || b._keydown(a)), a.shiftKey && 9 == a.which && !a.isPropagationStopped() ? (b._keydown(a), a.preventDefault(),
                    b.element.focus()) : 9 != a.which || a.isPropagationStopped() || (b._keydown(a), a.preventDefault(), b.element.focus()))
            }, this));
            b.mouseDownTarget = null;
            e(b.document).bind("mousedown", e.proxy(function(a) {
                b.mouseDownTarget = e(a.target);
                b.mouseDownTarget.hasClass(".rq-ganttBase") || (b.mouseDownTarget = this.mouseDownTarget.parents(".rq-ganttBase"))
            }, b));
            b.UpdateSource();
            e.observable(b.selectedItems).bind("insert remove replaceAll", function(a, g) {
                b.UpdateSelection(a, g)
            })
        },
        getSource: function() {
            return this.element.parent(".rq-ganttBase").data("GanttBase").options.FlatItemsSource
        },
        UpdateSource: function() {
            var b = this,
                a = b.Source = this.getSource();
            a && a.CollectionChanged.subscribe(function(a, g) {
                var f = g.items[0].IsSelected();
                "remove" === a.type && !0 == f && b.selectedItems.remove(g.items[0])
            })
        },
        _mousedown: function(b) {
            var a = e(b.target).closest("tr.rq-grid-row"),
                d = a.parents("table");
            if (!d) return !1;
            if (d.hasClass("ui-selectable")) {
                d = this.chart.GetDataFromRow(a);
                if (!b.ctrlKey && 0 != a.length || this.options.SelectionMode == RadiantQ.Gantt.SelectionMode.Single) {
                    if (1 == this.selectedItems.length && this.selectedItems[0] ==
                        d) return;
                    this.removeAllHighlight()
                } else if (0 != a.length && (a.hasClass("rq-row-selected") || a.find("td").hasClass("rq-row-selected")) && 3 !== b.which) return this.selectedItems.remove(d), !1;
                this.hightlighRow(d)
            }
            return !1
        },
        KeyUp: function() {
            var b = this.selectedItems.length;
            this.selectedItems.sort(function(a, b) {
                return a.DisplayIndex_M && b.DisplayIndex_M ? a.DisplayIndex_M() - b.DisplayIndex_M() : a.DisplayIndex() - b.DisplayIndex()
            });
            if (!1 == this.recursive || null == this.lastProcessedRow) this.lastProcessedRow = this.selectedItems[b -
                1];
            var a = b = this.getPrevData(this.lastProcessedRow); - 1 != this.selectedItems.indexOf(b) && (a = this.lastProcessedRow);
            this.selectAndScrollRow(a, null, this.recursive)
        },
        KeyDown: function() {
            var b = this.selectedItems.length;
            this.selectedItems.sort(function(a, b) {
                return a.DisplayIndex_M && b.DisplayIndex_M ? a.DisplayIndex_M() - b.DisplayIndex_M() : a.DisplayIndex() - b.DisplayIndex()
            });
            if (!1 == this.recursive || null == this.lastProcessedRow) this.lastProcessedRow = this.selectedItems[b - 1];
            var a = b = this.getNextData(this.lastProcessedRow); - 1 != this.selectedItems.indexOf(b) && (a = this.lastProcessedRow);
            this.selectAndScrollRow(a, null, this.recursive)
        },
        lastProcessedRow: null,
        _keydown: function(b) {
            if (void 0 != this.grid && null != this.grid) {
                var a = this.selectedItems.length;
                this.$ganttBase.data("GanttBase");
                if (0 != a) {
                    this.selectedItems.sort(function(a, b) {
                        return a.DisplayIndex_M && b.DisplayIndex_M ? a.DisplayIndex_M() - b.DisplayIndex_M() : a.DisplayIndex() - b.DisplayIndex()
                    });
                    if (!1 == this.recursive || null == this.lastProcessedRow) this.lastProcessedRow = this.selectedItems[a -
                        1];
                    switch (b.which) {
                        case 13:
                            this.grid.SaveAndCloseCell();
                            break;
                        case 9:
                            !0 == b.shiftKey ? this.editNextCell(this.lastProcessedRow, -1) : this.editNextCell(this.lastProcessedRow, 1)
                    }
                }
            }
        },
        editNextCell: function(b, a) {
            null != b && null != this.grid.editedElement && this.submitCurentRowChanges(function() {
                var d = this.grid.GetRowFromData(b);
                this.lastCellIndex += a;
                d = d.find("td:eq(" + this.lastCellIndex + ")");
                d.length && !1 == this.grid.editCell(d) && this.element.focus()
            })
        },
        getNextData: function(b) {
            var a, d = this.grid.GetRowFromData(b),
                d =
                    d ? d[0].nextElementSibling : null;
            null == d ? null != this.Source && (b = this.Source.indexOf(b) + 1, this.Source.length > b && (a = this.Source[b])) : a = this.chart.GetDataFromRow(d);
            return a
        },
        getPrevData: function(b) {
            var a, d = this.grid.GetRowFromData(b),
                d = d ? d[0].previousElementSibling : null;
            null == d ? null != this.Source && (b = this.Source.indexOf(b) - 1, 0 == e(this).index() && (a = this.Source[b])) : a = this.chart.GetDataFromRow(d);
            return a
        },
        selectAndScrollRow: function(b, a, d) {
            function g() {
                f.selectItemByitems(b, d);
                f.ganttBase.ScrollIntoView(b,
                    a);
                f.element.focus()
            }
            var f = this;
            b && f.submitCurentRowChanges(g)
        },
        selectItemByitems: function(b, a) {
            var d = this;
            a || d.removeAllHighlight();
            null != b && (-1 == d.selectedItems.indexOf(b) ? d.selectedItems.add(b) : d.selectedItems.remove(b), setTimeout(function() {
                d.element.focus()
            }))
        },
        lastCellIndex: null,
        EditCurrentRow: function() {
            var b = this.grid.GetRowFromData(this.selectedItems[this.selectedItems.length - 1]),
                b = e(b).find("td:eq(" + this.lastCellIndex + ")");
            !1 == this.grid.editCell(b) && this.element.focus()
        },
        submitCurentRowChanges: function(b) {
            var a =
                this.grid.editedElement;
            a ? (this.lastCellIndex = a.index(), this.grid.SaveAndCloseCell(e.proxy(b, this))) : b.call(this, !1)
        },
        editPrevRowCell: function(b) {
            var a = this.getPrevData(b);
            null != a && this.submitCurentRowChanges(function(b) {
                !1 != b ? this.selectAndScrollRow(a, e.proxy(this.EditCurrentRow, this)) : (this.selectAndScrollRow(a), this.element.focus())
            })
        },
        editNextRowCell: function(b) {
            var a = this.getNextData(b);
            null != a ? this.submitCurentRowChanges(function(b) {
                !1 != b ? this.selectAndScrollRow(a, e.proxy(this.EditCurrentRow,
                    this)) : (this.selectAndScrollRow(a), this.element.focus())
            }) : this.triggerEvent("onEnterKeyInLastRow")
        },
        selectingRowByKeyDown: function(b, a, d) {
            b = null;
            null == a ? (a = this.Source.indexOf(d) + 1, this.Source.length > a && (b = this.Source[a])) : b = this.chart.GetDataFromRow(a);
            null != b && (this.selectItemByitem(b), this.ganttBase.ScrollIntoView(b))
        },
        selectItemByitem: function(b) {
            this.removeAllHighlight();
            this.hightlighRowByData(b)
        },
        UpdateSelection: function(b, a) {
            var d = this.$ganttBase.data("GanttBase").PreventDefaultFns,
                g = a.items[0];
            if (!0 == d || void 0 == g.IsSelected()) return !1;
            if ("insert" === b.type) {
                g.IsSelected(!0);
                var d = this.frozenGridTable.find('tr[data-uid="' + g.uid + '"]'),
                    f = this.gridTable.find('tr[data-uid="' + g.uid + '"]'),
                    g = this.chartTable.find('tr[data-uid="' + g.uid + '"]');
                d.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                f.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                g.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                this.lastProcessedRow = a.items[0];
                g = new RadiantQ.Gantt.SelectionChanged({
                    TableRow: f,
                    ChartRow: g,
                    Data: a.items[0]
                }, []);
                this.triggerEvent("selectedChange", b, g)
            } else "remove" === b.type && (g.IsSelected(!1), this.lastProcessedRow = null, d = this.frozenGridTable.find('tr[data-uid="' + g.uid + '"]'), f = this.gridTable.find('tr[data-uid="' + g.uid + '"]'), g = this.chartTable.find('tr[data-uid="' + g.uid + '"]'), d.removeClass("rq-row-selected " + window.radiantQclasses.selectionClass), f.removeClass("rq-row-selected " + window.radiantQclasses.selectionClass), g.removeClass("rq-row-selected " + window.radiantQclasses.selectionClass),
                g = new RadiantQ.Gantt.SelectionChanged([], {
                    TableRow: f,
                    ChartRow: g,
                    Data: a.items[0]
                }), this.triggerEvent("selectedChange", b, g))
        },
        IsTable: function(b) {
            return b.parent().parent().is(e(".ui-grid-body-table", this.element))
        },
        SelectedItems: function() {
            return this.selectedItems
        },
        hightlighRow: function(b) {
            null != b && this.selectedItems.add(b)
        },
        hightlighRowByData: function(b) {
            null != b && this.selectedItems.add(b)
        },
        removeAllHighlight: function() {
            for (var b = this.selectedItems.length, a = 0; a < b; a++) this.selectedItems.remove(this.selectedItems[0])
        },
        _setOption: function(b, a) {
            this.widgetBaseSetOption.apply(this, arguments);
            switch (b) {
                case "Source":
                    this.removeAllHighlight(), this.UpdateSource()
            }
        },
        _destroy: function() {
            this.element.data("GanttRowselectable", null)
        },
        destroy: function() {
            this.baseDestroy.apply(this, arguments);
            this.removeAllHighlight();
            this.$ganttBase.unbind("mousedown");
            this.element.data("GanttRowselectable", null)
        }
    };
    RadiantQ.Gantt.Widget.GanttRowselectable = b
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.hoverable = {
        options: {
            name: "hoverable"
        },
        currentData: null,
        currentTr: null,
        _create: function() {
            var b = this;
            this.gridTable = this.element.find(".ui-grid-body-table").find("tbody");
            this.chartTable = this.element.find(".rq-gc-rowsParent-table");
            this.frozenGridTable = this.element.find(".frozenGanttTable").find("tbody");
            this.baseCreate.apply(this, arguments);
            this.element.bind("mouseover", function(c) {
                b._mousehover(c)
            });
            this.element.bind("mouseleave", function(c) {
                b.IsMouseIn()
            })
        },
        _mousehover: function(b) {
            e(b.target);
            this.currentTr = e(b.target).closest("tr.rq-grid-row");
            0 != this.currentTr.length ? this.IsMouseIn(this.currentTr.data("uid")) : this.prevTableRow && this.prevChartRow && this.IsMouseIn();
            return !1
        },
        prevFrozenRow: null,
        prevTableRow: null,
        prevChartRow: null,
        IsMouseIn: function(b) {
            0 == this.chartTable.length && (this.chartTable = this.element.find(".rq-gc-rowsParent-table"));
            this.prevTableRow && this.prevChartRow && (this.prevFrozenRow.removeClass("rq-row-hover ui-state-hover"), this.prevTableRow.removeClass("rq-row-hover ui-state-hover"),
                this.prevChartRow.removeClass("rq-row-hover ui-state-hover"), this.prevTableRow = this.prevChartRow = null);
            b && (this.prevFrozenRow = this.frozenGridTable.find('tr[data-uid="' + b + '"]').addClass("rq-row-hover ui-state-hover"), this.prevTableRow = this.gridTable.find('tr[data-uid="' + b + '"]').addClass("rq-row-hover ui-state-hover"), this.prevChartRow = this.chartTable.find('tr[data-uid="' + b + '"]').addClass("rq-row-hover ui-state-hover"))
        },
        destroy: function() {
            this.baseDestroy.apply(this, arguments);
            this.element.unbind("mouseover")
        }
    }
})(jQuery);
(function(e) {
    function b(a, b) {
        this.pagingCount = this.StartYScrollPos = this.StartXScrollPos = 0;
        this.topLeft = {
            X: 0,
            Y: 0
        };
        this.bottomRight = {
            X: 0,
            Y: 0
        };
        this.mouseCurPos = {
            X: 0,
            Y: 0
        };
        this.scrollTimer = null;
        this.prevDeltaEndY = this.prevDeltaStartY = this.prevDeltaEndX = this.prevDeltaStartX = 0;
        this.ValidateScrollMode = b || !1;
        this.asMode;
        this.GanttBase = a;
        this.GridTable = a.GetGanttTable();
        this.GanttChart = a.GetGanttChartInstance();
        this.EnablePagingOnAutoScroll = this.GanttChart.options.EnablePagingOnAutoScroll;
        this.ActualViewStartTime =
            this.GanttChart.options.ComputedStartTime.clone();
        this.StartXScrollPos = this.GanttChart.$GanttChart.scrollLeft();
        this.StartYScrollPos = this.GanttChart.VSB.$scrollContainer.scrollTop();
        var d = this.GanttChart.element[0].getBoundingClientRect();
        this.topLeft.X = d.left;
        this.bottomRight.X = d.right;
        this.ViewportWidth = !1 == RadiantQ.CanUseDefineProperty ? d.right - d.left : d.width;
        var c = e(".rq-gc-rowsParent", this.GanttChart.element)[0].getBoundingClientRect();
        this.topLeft.Y = c.top;
        this.bottomRight.Y = c.bottom;
        this.ViewportHeight = !1 == RadiantQ.CanUseDefineProperty ? d.bottom - d.top : d.height;
        this.preventAutoscroll = !1;
        this.OnScroll = new ObjectEvent("OnScroll")
    }
    var c = RadiantQ.Gantt,
        a = RadiantQ.Gantt.Utils.TimeComputingUtils,
        d = RadiantQ.Template || kendo.template,
        g = {
            currentBlock: null,
            options: {
                name: "taskbar",
                StartTime: null,
                EndTime: null,
                Parent: null,
                Height: null,
                GanttChart: null,
                ApplyBarWidthOptimization: null,
                IsParentTypeRow: null,
                OverlappedTasksRenderingOptimization: null,
                ComputedStartTime: null,
                Data: null,
                PropertyName: null,
                ParentTaskTemplate: null,
                TaskStartTime: null,
                ParentTaskStartTime: null,
                TaskEndTime: null,
                ParentTaskEndTime: null,
                TaskTooltipTemplate: null,
                MovingInfoPopup: null,
                ResizeInfoPopup: null,
                ConnectingInfoPopup: null,
                ParentTasksListProperty: null,
                DataSource: null,
                KnockoutObjectName: null,
                FlexyGantt: null,
                TimeIndicatorLineOption: null,
                UseRQModelBinder: !1,
                EnableAutoAdjustForSchedule: !0,
                CanDrawDependency: !1,
                MinimumWidthForParentBar: 1
            },
            isKOBinding: !1,
            HasChanged: !1,
            stSourceBinding: null,
            etSourceBinding: null,
            updateValues: function() {
                var a = this.options;
                if (null != this.stSourceBinding) {
                    var b = this.getChildObject(a.Data, this.stSourceBinding);
                    e.isFunction(b) ? (b.subscribe(this.startTimeChanged.bind(this)), a.StartTime = b()) : a.StartTime = b.clone()
                }
                null != this.etSourceBinding && (b = this.getChildObject(a.Data, this.etSourceBinding), e.isFunction(b) ? (b.subscribe(this.endTimeChanged.bind(this)), a.EndTime = b()) : a.EndTime = b.clone());
                this.taskStartAndEndTime && (this.taskStartAndEndTime.originalStart = a.StartTime, this.taskStartAndEndTime.originalEnd = a.EndTime, this.taskStartAndEndTime.ProposedStart =
                    a.StartTime, this.taskStartAndEndTime.ProposedEnd = a.EndTime)
            },
            getSchedule: function() {
                return this.options.Parent.element.GetScheduleToPlotWith()
            },
            startTimeChanged: function(a) {
                var b = this.options.StartTime;
                this._setOption("StartTime", a);
                this._OnRecomputeLocation();
                this.options.Parent.element.UpdateItemForCue(this.options.Data, a, b)
            },
            endTimeChanged: function(a) {
                this._setOption("EndTime", a);
                this._OnRecomputeLocation()
            },
            _updateBindingProp: function() {
                var a = this.options;
                if (null == a.TaskStartTime) throw "TaskStartTime is not set.";
                if (null == a.TaskEndTime) throw "TaskEndTime is not set.";
                a.IsParentTypeRow ? (this.stSourceBinding = a.ParentTaskStartTime, this.etSourceBinding = a.ParentTaskEndTime) : (this.stSourceBinding = a.TaskStartTime, this.etSourceBinding = a.TaskEndTime);
                if (e.isFunction(a.Data)) {
                    var b = a.Data();
                    a.Data = b[0]
                }
            },
            _updateTaskBarHeight: function() {
                var a = this.element,
                    b = RadiantQ.FlexyGantt.TaskItemControl,
                    d = b.MarginForBars,
                    c = 2 * d,
                    g = a[0].style.borderTopWidth,
                    f = a[0].style.borderBottomWidth,
                    h = parseInt(a[0].style.height),
                    k = this.options.GanttChart.options.RowHeight -
                        1;
                a.hasClass("rq-gc-parentBar") || a.hasClass("parentBar-style") ? (g = "0px" == g || "" == g ? b.ParentBar_BorderTopWidth : parseInt(g), f = "0px" == f || "" == f ? b.ParentBar_BorderBottomWidth : parseInt(taskbarDiv[0].style.borderBottomWidth), b = 0, void 0 != a.attr("heightSetBySrc") || isNaN(h) ? (b = k - c - (g + f), a.attr("heightSetBySrc", "true")) : b = h, a.css({
                    height: b + "px",
                    "margin-top": d + "px"
                }), a.on("contextmenu", function(a) {
                    a.stopPropagation()
                })) : (g = "0px" == g || "" == g ? b.TaskBar_BorderTopWidth : parseInt(g), f = "0px" == f || "" == f ? b.TaskBar_BorderBottomWidth :
                    parseInt(f), b = 0, void 0 != a.attr("heightSetBySrc") || isNaN(h) ? (b = k - c - (g + f), a.attr("heightSetBySrc", "true")) : b = parseInt(h), a.css({
                        height: b + "px",
                        "margin-top": d + "px"
                    }));
                if (null != this.options.GanttChart.options.RowHeightBinding) {
                    var n = this;
                    e(this.options.Parent.element.element).bind("heightChange", function() {
                        n._OnRecomputeLocation();
                        n.options.Parent.element.element[0]._isTriggered = !1
                    })
                }
            },
            _events: function() {
                var a = this.options.GanttChart;
                this.element.bind("mouseover." + this.widgetName, this.TaskBarMouseHover.bind(this));
                this.element.bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                a.RefreshUIEvent.subscribe(this.OnChartRefreshUI, this)
            },
            TaskBarMouseHover: function() {
                this.options.GanttChart.TaskOnMouseHover = this.options.Data;
                this.options.GanttChart.TaskViewOnMouseHover = this.options;
                this.options.GanttChart.options.TimeIndicatorLineOption == c.TimeIndicatorLines.OnHover && (this.element.find(".rq-gc-start-verticalLine").show(), this.element.find(".rq-gc-end-verticalLine").show());
                this.element.hasClass("rq-gc-parentBar") &&
                    this.element.hasClass("parentBar-style") || this.element.addClass("rq-taskbar-shadow")
            },
            TaskBarMouseLeave: function() {
                this.options.GanttChart.TaskOnMouseHover = null;
                this.options.GanttChart.TaskViewOnMouseHover = null;
                this.options.GanttChart.options.TimeIndicatorLineOption == c.TimeIndicatorLines.OnHover && (this.element.find(".rq-gc-start-verticalLine").hide(), this.element.find(".rq-gc-end-verticalLine").hide());
                this.element.hasClass("rq-gc-parentBar") && this.element.hasClass("parentBar-style") || this.element.removeClass("rq-taskbar-shadow")
            },
            taskStartAndEndTime: null,
            DragThumb: null,
            ResizeThumb: null,
            StartResizeThumb: null,
            DragThumb: null,
            _create: function() {
                var a = this;
                !1 == this.options.GanttChart.options.IsPrinting && a._validateOptions();
                var b = a.element;
                a.SizeChanged = b.attr("SizeChanged");
                a.SizeChanged = a.SizeChanged && window[a.SizeChanged] ? window[a.SizeChanged] : null;
                b.data("TaskBar", a);
                a.element[0].DataContext = a.options.Data;
                b = a.options;
                a._updateBindingProp();
                a.updateValues();
                a._updateTaskBarHeight();
                a._events();
                this.taskStartAndEndTime = {
                    Data: b.Data,
                    Name: b.Data.Name,
                    originalStart: a.options.StartTime,
                    originalEnd: b.EndTime,
                    originalWidth: 0,
                    originalLeft: 0,
                    ProposedEnd: null,
                    ProposedStart: null,
                    HasChanged: a.HasChanged
                };
                a.options.FlexyGantt.options && (a.DragThumb = e(".rq-taskbar-dragThumb:eq(0)", this.element), 0 == a.DragThumb.length && (a.DragThumb = e(".dragThumb:eq(0)", this.element)), a.ResizeThumb = e(".rq-taskbar-resizeThumb:eq(0)", a.element).addClass("rq-fg-gc-taskBarResizer"), 0 == a.ResizeThumb.length && (a.ResizeThumb = e(".resizeThumb:eq(0)", a.element).addClass("rq-fg-gc-taskBarResizer")),
                    a.StartResizeThumb = e(".rq-gc-startTaskBarResizer:eq(0)", a.element).addClass("rq-fg-gc-taskBarResizer"), 0 == a.StartResizeThumb.length && (a.StartResizeThumb = e(".start-resizeThumb:eq(0)", a.element).addClass("rq-fg-gc-taskBarResizer")), 0 < a.DragThumb.length && a.asyncInitShiftTracker(), (0 < a.ResizeThumb.length || 0 < a.StartResizeThumb.length) && a.asyncInitResizeTracker());
                a._OnRecomputeLocation();
                a.asyncApplyToolTip();
                b = a.options.GanttChart;
                b.element.bind("ganttcharttimeindicatorlineoptionchanged", function(b, d) {
                    a._OnRecomputeLocation()
                }.bind(this));
                void 0 != a.options.Data.PropertyChanged && a.options.Data.PropertyChanged.subscribe(a.DataPropertyChangeFunction, a);
                0 != b.options.TimeIndicatorLineOption && e(".verticalLine:eq(0)", this.element).click(function(a) {
                    a.stopPropagation()
                })
            },
            asyncApplyToolTip: function() {
                if (!0 != this.options.GanttChart.options.IsPrinting) {
                    var a = this;
                    null == this._asyncTooltipTimer && (this._asyncTooltipTimer = setTimeout(function() {
                        a.ApplyTooltipSettings(a.element, a.options)
                    }, 0))
                }
            },
            asyncInitShiftTracker: function() {
                if (!0 != this.options.GanttChart.options.IsPrinting) {
                    var a =
                        this;
                    null == this._asyncShiftTimer && (this._asyncShiftTimer = setTimeout(function() {
                        a.element.shiftTracker(a)
                    }, 0))
                }
            },
            asyncInitResizeTracker: function() {
                if (!0 != this.options.GanttChart.options.IsPrinting) {
                    var a = this;
                    null == this._asyncResizeTimer && (this._asyncResizeTimer = setTimeout(function() {
                        a.element.resizeTracker(a)
                    }, 0))
                }
            },
            getChildObject: function(a, b) {
                for (var d = b.split("."), c = a, g = 0; g < d.length; g++) {
                    var f = d[g],
                        e = c,
                        c = c[f + "_M"] ? c[f + "_M"]() : c[f];
                    "function" == typeof c && (c = c.call(e))
                }
                return c
            },
            OnChartRefreshUI: function(a,
                b) {
                var d = this.options;
                this._OnRecomputeLocation();
                var c = this.element[0].getBoundingClientRect(),
                    g = c.width;
                !1 == RadiantQ.CanUseDefineProperty && (g = c.right - c.left);
                c = Math.round(100 * g) / 100;
                taskStartAndEndTime = {
                    Data: d.Data,
                    Name: d.Data.Name,
                    originalStart: this.options.StartTime,
                    originalEnd: d.EndTime,
                    originalWidth: parseFloat(c),
                    originalLeft: parseInt(this.element.css("margin-left"))
                };
                d = e(".resizer-style", this.element);
                for (c = 0; c < d.length; c++) e(d[c]).hasClass("start-resizer-style") && e(d[c]).hasClass("rq-gc-startTaskBarResizer") ||
                    e(d[c]).css("margin-left", taskStartAndEndTime.originalWidth - 4)
            },
            _validateOptions: function() {
                var a = this.options;
                if (window.console && a.FlexyGantt.grid) {
                    var b = a.FlexyGantt.grid.GetRowFromData(a.DataSource);
                    a.IsParentTypeRow ? (a.ParentTaskStartTime && void 0 == this.getChildObject(a.Data, a.ParentTaskStartTime) && console.error("Data at Row no:" + b[0].rowIndex + ' does not have a property called "' + a.ParentTaskStartTime + '". Specify a correct ParentTaskStartTime value.'), a.ParentTaskEndTime && void 0 == this.getChildObject(a.Data,
                        a.ParentTaskEndTime) && console.error("Data at Row no:" + b[0].rowIndex + ' does not have a property called "' + a.ParentTaskEndTime + '". Specify a correct ParentTaskEndTime value.')) : a.Data && (a.TaskStartTime && void 0 == this.getChildObject(a.Data, a.TaskStartTime) && console.error("Data at Row No:" + b[0].rowIndex + ' does not have a property called "' + a.TaskStartTime + '". Specify a correct TaskStartTime value.'), a.TaskEndTime || void 0 != this.getChildObject(a.Data, a.TaskStartTime) || console.error("Data at Row No:" + b[0].rowIndex +
                        ' does not have a property called "' + a.TaskEndTime + '". Specify a correct TaskEndTime value.'))
                }
            },
            DataPropertyChangeFunction: function(a, b) {
                if (this.options.DataSource.IsParentType()) {
                    if (b.PropertyName == this.options.ParentTaskStartTime || b.PropertyName == this.options.ParentTaskEndTime) this.updateValues(), RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this)
                } else if (b.PropertyName == this.options.TaskStartTime || b.PropertyName == this.options.TaskEndTime) this.updateValues(), RadiantQ.Gantt.Utils.DelayUpdateUtil.TryDelayedUpdate(this)
            },
            PartialUpdate: function() {
                this.refreshTaskBar()
            },
            TotalUpdate: function() {
                this.options.Parent.element.RedrawTaskRow()
            },
            _destroy: function() {
                clearTimeout(this._asyncShiftTimer);
                clearTimeout(this._asyncResizeTimer);
                clearTimeout(this._asyncTooltipTimer);
                this._asyncShiftTimer = this._asyncResizeTimer = this._asyncTooltipTimer = null;
                this._onTaskBarLoadTimer && (clearTimeout(this._onTaskBarLoadTimer), this._onTaskBarLoadTimer = null);
                this.disposeBindings && this.disposeBindings();
                this.options.GanttChart.element.unbind("ganttcharttimeindicatorlineoptionchanged");
                this.options.GanttChart.RefreshUIEvent.unsubscribe(this.OnChartRefreshUI, this);
                this.options.Data.PropertyChanged && this.options.Data.PropertyChanged.unsubscribe(this.DataPropertyChangeFunction, this);
                if (this.options.Parent && this.options.Parent.element) {
                    var a = this.options.Parent.element._getIntersectingBlock(this, this.options.Parent.element);
                    null != a && this.options.Parent.element.RemoveEntity(a, this)
                }
                this.options.UseRQModelBinder && RadiantQ.Unbind(this.element);
                delete this.element.taskBarInstance;
                delete this.element.taskClone;
                delete this.element.$dragThumbClone;
                delete this.element.$resizeThumbClone;
                this.element.empty();
                this.element.data("TaskBar", null)
            },
            refreshTaskBar: function() {
                !0 == this.CanUpdate() && (this.options.GanttChart.options.OverlappedTasksRenderingOptimization ? this.options.Parent.element.RedrawTaskRow() : (this.updateValues(), this._OnRecomputeLocation(), this.UpdateTooltipContent(this.options.Data)))
            },
            _canUpdate: !0,
            TaskOnMouseHover: null,
            TaskViewOnMouseHover: null,
            CanUpdate: function(a) {
                if (void 0 == a) return this._canUpdate;
                a != this._canUpdate && (this._canUpdate = a) && this.refreshTaskBar()
            },
            initChanges: !1,
            DragEnd: function(a, b) {
                a.CanUpdate(!1);
                if (!a.options.StartTime.equals(b.originalStart) || !a.options.EndTime.equals(b.originalEnd)) {
                    if (0 < a.options.FlexyGantt.TaskTimeChanged.fn.length) {
                        var d = new TimesChangingEventArgs(a.options.Data, b.originalStart, b.originalEnd, "DragEnd", a.options.DataSource);
                        a.options.FlexyGantt.TaskTimeChanged.raise(this, d);
                        b.originalStart = d.StartTime;
                        b.originalEnd = d.EndTime
                    }
                    d = b.originalEnd;
                    a._setOption("StartTime",
                        b.originalStart);
                    a._setOption("EndTime", d);
                    a.CanUpdate(!0)
                }
                a._canUpdate = !0
            },
            ResizeEnd: function(a, b) {
                a.CanUpdate(!1);
                if (!a.options.EndTime.equals(b.originalEnd)) {
                    if (0 < a.options.FlexyGantt.TaskTimeChanged.fn.length) {
                        var d = new TimesChangingEventArgs(a.options.Data, b.originalStart, b.originalEnd, "ResizeEnd", a.options.DataSource);
                        a.options.FlexyGantt.TaskTimeChanged.raise(this, d);
                        b.originalEnd = d.EndTime
                    }
                    a._setOption("EndTime", b.originalEnd);
                    a.CanUpdate(!0)
                }
                a._canUpdate = !0
            },
            ResizeStart: function(a, b) {
                a.CanUpdate(!1);
                if (!a.options.StartTime.equals(b.originalStart)) {
                    if (0 < a.options.FlexyGantt.TaskTimeChanged.fn.length) {
                        var d = new TimesChangingEventArgs(a.options.Data, b.originalStart, b.originalEnd, "ResizeStart", a.options.DataSource);
                        a.options.FlexyGantt.TaskTimeChanged.raise(this, d);
                        b.originalStart = d.StartTime
                    }
                    a._setOption("StartTime", b.originalStart);
                    a.CanUpdate(!0)
                }
                a._canUpdate = !0
            },
            TooltipContent: null,
            DragTooltipContent: null,
            ResizeTooltipContent: null,
            ApplyTooltipSettings: function(a) {
                a.attr("title", "");
                this.LoadDefaultTooltipStyle();
                this.CreateTooltip(this, a);
                this.UpdateTooltipContent(this.options.Data)
            },
            closeToolTip: function() {},
            CreateTooltip: function(a, b) {
                this.taskBarTooltip(a, b);
                var d = !1;
                e(b).hover(function(a) {
                    d = !0
                }, function() {
                    d = !1
                });
                var c = function() {
                    e(".ui-tooltip").remove().removeAttr("aria-describedby")
                };
                e(b).mouseout(function() {
                    d || c()
                });
                e(b).bind("contextmenu.tooltipHandler", function() {
                    c()
                })
            },
            taskBarTooltip: function(a, b) {
                e(b).tooltip({
                    open: function(b, d) {
                        b.currentTarget.isDragging ? isDragging = b.currentTarget.isDragging :
                            b.currentTarget.isResizing && (isResizing = b.currentTarget.isResizing);
                        b.currentTarget.uiTooltip = d.tooltip;
                        a.uiTooltip = d.tooltip
                    },
                    isDragging: !1,
                    isResizing: !1,
                    content: function(b) {
                        if (this.isDragging || this.isResizing) return null;
                        this.isDragging = this.isResizing = !1;
                        if (!a.TooltipContent) return null;
                        a.TooltipContent = e('<div class="TaskTooltip" />').append(a.toolTipTemplate(a.options.Data));
                        a.uiTooltip && e(".ui-tooltip").remove().removeAttr("aria-describedby");
                        return a.TooltipContent
                    },
                    position: {
                        my: "left top+15",
                        at: "top",
                        offset: "10"
                    },
                    track: !0
                })
            },
            UpdateTooltipContent: function(a, b) {
                if (a.ProposedStart && a.ProposedEnd) {
                    0 == a.OriginalStart.compareTo(a.ProposedStart) && 0 == a.OriginalEnd.compareTo(a.ProposedEnd) && (a.HasChanged = !1);
                    var d = {
                        Name: a.Name,
                        StartTime: a.ProposedStart,
                        DataSource: this.options.Data,
                        EndTime: a.ProposedEnd,
                        OriginalStart: a.OriginalStart,
                        OriginalEnd: a.OriginalEnd,
                        HasChanged: a.HasChanged,
                        IsStartResize: b || !1
                    };
                    if (a.Duration) {
                        if (0 > a.Duration.days) return;
                        d.Duration = a.Duration
                    }
                    this.popupTemplate(d)
                } else a[this.stSourceBinding] &&
                    a[this.etSourceBinding] && this.options.TaskTooltipTemplate && this.UpdatedTaskTemplate(a)
            },
            popupTemplate: function(a) {
                this.DragTooltipContent = e('<div align="center" />').append(this.options.MovingInfoPopup(a));
                a.Duration && (this.ResizeTooltipContent = e('<div align="center" />').append(this.options.ResizeInfoPopup(a)))
            },
            toolTipTemplate: null,
            UpdatedTaskTemplate: function(a) {
                this.toolTipTemplate = d(this.options.TaskTooltipTemplate);
                this.TooltipContent = e('<div class="TaskTooltip" />').append(this.toolTipTemplate(a))
            },
            ConnectingInfo: function(a) {
                this.options.ConnectingInfoPopup && (this.DepConnContent = this.options.ConnectingInfoPopup(a))
            },
            LoadDefaultTooltipStyle: function() {
                e.isFunction(this.options.Data[this.stSourceBinding]);
                e.isFunction(this.options.Data[this.stSourceBinding]);
                this.popupStyle()
            },
            popupStyle: function() {
                this.options.MovingInfoPopup = this.options.MovingInfoPopup ? d(this.options.MovingInfoPopup) : d("<div><table class='rq-gc-taskbar-popup' style='white-space:nowrap;'><tr><td colspan='2' align='center'><b>${RadiantQ_TaskString}</b></td></tr><tr><td style='float:right;'><b>${RadiantQ_StartString} :</b></td><td> " +
                    this._MakeItBoldWhenActualDate("${data.StartTime.toString('yyyy-MM-dd HH:mm')}") + "</td></tr><tr><td style='float:right;'><b>${RadiantQ_FinishString}:</b> </td><td> " + this._MakeItBoldWhenActualDate("${data.EndTime.toString('yyyy-MM-dd HH:mm')}") + "</td></tr></table></div>");
                this.options.ResizeInfoPopup = this.options.ResizeInfoPopup ? d(this.options.ResizeInfoPopup) : d("<div><table class='rq-gc-taskbar-popup' style='white-space:nowrap;'><tr><td colspan='2' align='center'><b>${RadiantQ_TaskString}</b></td></tr><tr><td style='float:right;'><b>${RadiantQ_DurationString} :</b></td><td> " +
                    this._MakeItBoldWhenActualDate("#if (data.Duration){# #= data.Duration.days_M() #d #= data.Duration.hours_M() #h #}#") + "</td></tr><tr><td style='float:right;'><b>${RadiantQ_StartTimeString} :</b> </td><td> " + this._MakeItBoldWhenActualDate("${data.StartTime.toString('yyyy-MM-dd HH:mm')}") + "</td></tr><tr><td style='float:right;'><b>${RadiantQ_EndTimeString} :</b></td><td> " + this._MakeItBoldWhenActualDate("${data.EndTime.toString('yyyy-MM-dd HH:mm')}") + "</td></tr></table></div>");
                !0 == this.options.CanDrawDependency && !this.options.ConnectingInfoPopup && this.options.GanttChart.options.ConnectingInfoPopup && (this.options.ConnectingInfoPopup = d(this.options.GanttChart.options.ConnectingInfoPopup))
            },
            _MakeItBoldWhenActualDate: function(a) {
                return "#if( data.HasChanged ){# " + a + "#}else {# <b>" + a + "</b>#}#"
            },
            LocationRecomputed: new ObjectEvent("LocationRecomputed"),
            SizeChanged: null,
            _OnRecomputeLocation: function() {
                this._onTaskBarLoadTimer && clearTimeout(this._onTaskBarLoadTimer);
                var b = this,
                    d = b.element,
                    c = parseFloat(d.css("width")),
                    g = parseFloat(d.css("margin-left")),
                    f = b.options,
                    e = f.Parent.element,
                    h = b.options.GanttChart,
                    k = h.options,
                    n = k.ComputedStartTime;
                b.getSchedule();
                if (null != b.options.GanttChart) {
                    var l = h.GetBTSTToRenderAgainst(),
                        m = h.GetBTUWToRenderAgainst(),
                        y = e.GetScheduleToPlotWith(),
                        e = a.ConvertToUnitsOfBaseScaleType(l, n, f.StartTime, y) * m,
                        B = 0,
                        B = f.EndTime < f.StartTime ? 0 : a.ConvertToUnitsOfBaseScaleType(l, f.StartTime, f.EndTime, y) * m;
                    1 > B && (B = 1);
                    var A = e;
                    if (!(0 > A + B || A > k.ViewWidth)) {
                        var A = b._GetBarRenderStartTime(f.StartTime),
                            D = b._GetBarRenderStartTime(f.EndTime);
                        (A != f.StartTime || D != f.EndTime) && A < D && (B = a.ConvertToUnitsOfBaseScaleType(l, A, D, y) * m, e = a.ConvertToUnitsOfBaseScaleType(l, n, A, y) * m)
                    }
                    d.hasClass("rq-gc-parentBar") && (B = Math.max(B, b.options.MinimumWidthForParentBar));
                    d.css({
                        width: B + "px",
                        "margin-left": e + "px"
                    });
                    f = d.height();
                    b.StartResizeThumb && b.StartResizeThumb.length && this.StartResizeThumb.css({
                        height: f + "px",
                        width: "5px"
                    });
                    b.ResizeThumb && b.ResizeThumb.length && b.ResizeThumb.css({
                        height: f + "px",
                        width: "5px",
                        "margin-left": B - 4 + "px"
                    });
                    b.options.OverlappedTasksRenderingOptimization !=
                        RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight || c == B && g == e || (b.currentBlock = this.options.Parent.element._getIntersectingBlocks(this, this.options.Parent.element), b.options.Parent.element._blockIntact(this.currentBlock));
                    0 < b.LocationRecomputed.fn.length && b.LocationRecomputed.raise(this);
                    0 != k.TimeIndicatorLineOption && b.renderVerticalLine(e, B);
                    b.SizeChanged && b.SizeChanged.call(b.element, b.options.Data, h);
                    b.options.GanttChart.options.OnTaskBarLoad && (b._onTaskBarLoadTimer = setTimeout(function() {
                        var a =
                            b.options.GanttChart.options.OnTaskBarLoad;
                        null != a && "function" == typeof a && a.call(d, b);
                        b._onTaskBarLoadTimer = null
                    }.bind(b), 0))
                }
            },
            renderVerticalLine: function(a, b) {
                var d = null,
                    g = {
                        Data: this.options.Data,
                        UseWidthForVerticalLines: !1,
                        IsShifting: !1,
                        UseWidthForTaskBar: !0
                    };
                null != this.options.GanttChart.options.ProvideWidthForMilestoneShape && (d = this.options.GanttChart.options.ProvideWidthForMilestoneShape(this, g));
                var f = this.element,
                    e = f.find("div.rq-gc-start-verticalLine"),
                    h = f.find("div.rq-gc-end-verticalLine");
                if (0 != e.length || 0 != h.length) {
                    var k = f.closest("tr");
                    if (k.length) {
                        var n = parseInt(f.css("margin-top"));
                        f.height();
                        var f = f.width(),
                            k = k[0].offsetTop,
                            l = 0;
                        !0 == g.UseWidthForVerticalLines && (l = d / 2);
                        d = {
                            height: k + n + "px",
                            "margin-left": l + "px",
                            "margin-top": -(k + n) + "px"
                        };
                        0 != e.length && e.css(d);
                        0 != h.length && (!1 == g.UseWidthForVerticalLines && (d["margin-left"] = f + "px"), h.css(d))
                    }
                }
                g = this.options.GanttChart.options.TimeIndicatorLineOption;
                (g & c.TimeIndicatorLines.Always) != c.TimeIndicatorLines.Always || (g & c.TimeIndicatorLines.OnResize) ==
                    c.TimeIndicatorLines.OnResize ? (e.hide(), h.hide()) : (e.show(), h.show())
            },
            _GetBarRenderStartTime: function(a) {
                if (this.options.ApplyBarWidthOptimization) {
                    var b = this._ConvertXToTime(-10);
                    if (a < b) return b
                }
                return a
            },
            _beginUpdateOverlapTasks: function(a) {
                if (this.options.OverlappedTasksRenderingOptimization == RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight) {
                    var b = this.options.Parent.element;
                    this.currentBlock = b._getIntersectingBlock(a, b)
                }
            },
            _endUpdateOverlapTasks: function(a) {
                if (this.options.OverlappedTasksRenderingOptimization ==
                    RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight) {
                    var b = this.options.Parent.element;
                    null != this.currentBlock && (b._blockIntact([this.currentBlock]), this.currentBlock = null);
                    a = b._getIntersectingBlocks(a);
                    null != a && 0 < a.length && b._blockIntact(a)
                }
            },
            _updateTaskItem: function(a, b, d, c) {
                var g = this.element,
                    f = RadiantQ.FlexyGantt.TaskItemControl,
                    h = f.MarginForBars;
                e(g.parent().parent());
                var k = this.options.GanttChart.options.RowHeight - 1,
                    h = 2 * h,
                    n = g[0].style.borderTopWidth,
                    l = 0,
                    l = g[0].style.borderBottomWidth;
                g.hasClass("rq-gc-parentBar") && g.hasClass("parentBar-style") ? (n = "0px" == n || "" == n ? f.ParentBar_BorderTopWidth : parseInt(n), f = "0px" == l || "" == l ? f.ParentBar_BorderBottomWidth : parseInt(g[0].style.borderBottomWidth), l = (k - h - (n + f)) / c) : (g = "0px" == n || "" == n ? f.TaskBar_BorderTopWidth : parseInt(n), f = "0px" == l || "" == l ? f.TaskBar_BorderBottomWidth : parseInt(l), l = (k - h - (g + f)) / c);
                void 0 != c && (b = l);
                d ? (a = 0 == a || void 0 != this.element.attr("heightSetBySrc") ? a * b + RadiantQ.FlexyGantt.TaskItemControl.MarginForBars : a * (b + 2 * RadiantQ.FlexyGantt.TaskItemControl.MarginForBars +
                    2) + RadiantQ.FlexyGantt.TaskItemControl.MarginForBars, this.element.css("height", b + "px").css("margin-top", a + "px"), this.setOverlappingProperty(this.options.Data, !0)) : (this.element.css("height", b + "px").css("margin-top", RadiantQ.FlexyGantt.TaskItemControl.MarginForBars + "px"), this.setOverlappingProperty(this.options.Data, !1))
            },
            setOverlappingProperty: function(a, b) {
                e.isFunction(a.IsOverlapping) ? a.IsOverlapping(b) : a.IsOverlapping = b
            },
            _ConvertXToTime: function(b) {
                var d = this.options,
                    c = d.GanttChart.options;
                return d.ComputedStartTime +
                    a.ConvertTimeUnitsToTimeSpan(c.BaseTimeScaleType, b / c.baseTimeUnitWidth)
            },
            _setOption: function(a, b) {
                if ("StartTime" == a || "EndTime" == a) {
                    var d;
                    d = "StartTime" == a ? this.options.StartTime : this.options.EndTime;
                    if (!d.equals(b)) {
                        this.widgetBaseSetOption.apply(this, arguments);
                        switch (a) {
                            case "StartTime":
                                this._updateStartAndEnd("StartTime");
                                this.options.Parent.element.UpdateItemForCue(this.options.Data, b, d);
                                break;
                            case "EndTime":
                                this._updateStartAndEnd("EndTime");
                                break;
                            case "TimeIndicatorLineOption":
                                this._OnRecomputeLocation()
                        }
                        this.UpdateTooltipContent(this.options.Data);
                        this.triggerEvent("startAndEndTimeChange", this, this.options.Data)
                    }
                }
            },
            _updateStartAndEnd: function(a) {
                switch (a) {
                    case "StartTime":
                        if (this.options.StartTime) {
                            a = this.options.Data;
                            var b = a[this.stSourceBinding];
                            a instanceof RadiantQ.Gantt.Model.IActivity && (a.PreferredStartTime = this.options.StartTime.clone());
                            if (e.isFunction(b)) b() != this.options.StartTime && b(this.options.StartTime.clone());
                            else if (a[this.stSourceBinding + "_M"]) a[this.stSourceBinding + "_M"](this.options.StartTime.clone());
                            else a[this.stSourceBinding] =
                                this.options.StartTime.clone()
                        }
                        break;
                    case "EndTime":
                        if (this.options.EndTime)
                            if (a = this.options.Data, b = a[this.etSourceBinding], e.isFunction(b)) b() != this.options.EndTime && b(this.options.EndTime.clone());
                            else if (a[this.etSourceBinding + "_M"]) a[this.etSourceBinding + "_M"](this.options.EndTime.clone());
                        else a[this.etSourceBinding] = this.options.EndTime.clone()
                }
            }
        };
    RadiantQ.Gantt.Widget.taskbar = g;
    RadiantQ.FlexyGantt.ShiftTrackerGlobal = {
        IncludeVerticalMovingSupport: !1,
        TrackingTaskItemControl: null,
        MinDeltaYValue: 4,
        CurrentDropRow: null,
        CurrentStartRow: null,
        deltaX: null,
        deltaY: null,
        GetDropCueLocationIn: function(a) {},
        GetAdjustedDatetime: null,
        BeginVerticalDrag: new ObjectEvent("BeginVerticalDrag"),
        VerticalDragOver: new ObjectEvent("VerticalDragOver"),
        VerticalDragDrop: new ObjectEvent("VerticalDragDrop"),
        CreateDependencyEvent: new ObjectEvent("CreateDependencyEvent")
    };
    var f = null,
        h = null,
        k = null,
        n = !1,
        l = !1;
    e.fn.shiftTracker = function(d) {
        function g(a, b, d, c) {
            var f = this.taskBarInstance,
                h = b.parents("div.rq-ganttChart"),
                k = f.options.GanttChart.VSB.$scrollContainer.scrollTop(),
                n = b.parents("div.rq-ganttChart"),
                f = b.offset();
            a.offsetX = a.clientX - f.left;
            a.offsetY = a.clientY - f.top;
            this.timelineHeight = e("div.rq-tsh-div", h).outerHeight(!0);
            h = b.height() / 2;
            h = f.top - n.offset().top - (this.timelineHeight - h) + k;
            !0 == d ? (this.clickPosition = {
                x: a.originalEvent.touches[0].clientX,
                y: a.originalEvent.touches[0].clientY
            }, b = a.originalEvent.touches[0].pageX - f.left + b[0].offsetLeft) : (this.clickPosition = {
                x: a.clientX,
                y: a.clientY
            }, b = a.offsetX + b[0].offsetLeft);
            d = this.taskBarInstance.options.FlexyGantt;
            d.AdjustLinkLineStartPosition.isSubscribed() &&
                (f = {}, f.top = h, f.left = b, f.event = a, d.AdjustLinkLineStartPosition.raise(this, f), h = f.top, b = f.left);
            c.css({
                top: h,
                left: b
            })
        }
        var m = this;
        d = {
            that: this,
            $dragThumbClone: this.$dragThumbClone = null,
            taskBarInstance: this.taskBarInstance = d,
            widgetName: this.widgetName = "TaskItemControl",
            $doc: e(document),
            DragThumb: this.taskBarInstance.DragThumb,
            lastMouseX: 0,
            lastMouseY: 0,
            lastElemLeft: 0,
            lastElemTop: 0,
            _mouseMoveDelegate: null,
            _mouseUpDelegate: null,
            DragComplet: new ObjectEvent("DragComplet"),
            totalMouseMoves: 0,
            shiftTrackerGlobal: RadiantQ.FlexyGantt.ShiftTrackerGlobal,
            cloneMarginLeft: 0,
            asTracker: null,
            IncludeVerticalMovingSupport: !1,
            BeginVerticalDrag: null,
            VerticalDragOver: null,
            VerticalDragDrop: null,
            CreateDependencyEvent: null,
            dropTarget: null,
            CurrentDropRow: null,
            TrackingTaskItemControl: null,
            IsShifting: !1,
            IsConnecting: !1,
            timelineHeight: 0,
            timer: null,
            clicks: 0,
            $dragPopup: null,
            _renderer: null,
            prefrdLeft: 0,
            clickPosition: {
                x: 0,
                y: 0
            },
            isTouchEnabled: !1,
            tstToRenderWith: null,
            btuwToRenderWith: 0,
            wtsToRenderWith: null
        };
        d.taskBarInstance.IsVerticallyMoving = function() {
            return IsVerticallyMoving
        };
        m.dblclick(function() {
            this.clicks = 0;
            clearTimeout(this.timer)
        }.bind(d));
        m.bind("touchstart." + this.widgetName, function(a) {
            this.isTouchEnabled = !0;
            document.mouseButtonPressed = !0;
            if (!e(a.target).hasClass("label")) {
                a.stopPropagation();
                var b = _commonMouseDown.call(this, a, m, !0),
                    d = this;
                _mouseMoveDelegate = function(a) {
                    _mouseMove.call(d, a, b, m, !0)
                };
                _mouseUpDelegate = function(a) {
                    document.mouseButtonPressed = !1;
                    _mouseUp.call(d, a, b, m, !0);
                    e(".rq-gc-dependencyCue-parent", this.taskBarInstance.options.GanttChart.element).remove()
                };
                this.$doc.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown." + this.widgetName);
                this.$doc.unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown." + this.widgetName);
                this.$doc.bind("touchmove." + this.widgetName, _mouseMoveDelegate).bind("touchend." + this.widgetName, _mouseUpDelegate)
            }
        }.bind(d));
        m.bind("mousedown." + this.widgetName, function(a) {
            if (3 != a.which && !this.isTouchEnabled) {
                m[0].uiTooltip && (m[0].isDragging = !0);
                var b = this,
                    d = b.DragThumb.clone();
                if (!e(a.target).hasClass("label") && "collapse" != d.css("visibility") && "none" != d.css("display")) {
                    document.mouseButtonPressed = !0;
                    var c = a.screenX,
                        g = a.screenY,
                        f = _commonMouseDown.call(this, a, m, !1);
                    this._mouseMoveDelegate = function(a) {
                        return _mouseMove.call(b, a, f, m, !1)
                    };
                    this._mouseUpDelegate = function(a) {
                        m[0].uiTooltip && (m[0].isDragging = !1);
                        document.mouseButtonPressed = !1;
                        a.screenX == c && a.screenY == g ? (null != this.timer && clearTimeout(this.timer), this.clicks++, m.click(), this.timer = setTimeout(function() {
                            2 <= this.clicks &&
                                (m.dblclick(), this.clicks = 0)
                        }, 80), this.$doc.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown." + this.widgetName), this.$doc.unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown." + this.widgetName), e("#clone", b.element).remove()) : _mouseUp.call(b, a, f, m, !1);
                        e(".rq-gc-dependencyCue-parent", this.taskBarInstance.options.GanttChart.element).remove()
                    }.bind(this);
                    this.$doc.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." +
                        this.widgetName, this._mouseUpDelegate)
                }
            }
        }.bind(d));
        _commonMouseDown = function(d, f, h) {
            var k = this.taskBarInstance;
            k.KeyDownProxy = null;
            this.IncludeVerticalMovingSupport = this.shiftTrackerGlobal.IncludeVerticalMovingSupport;
            this.BeginVerticalDrag = this.shiftTrackerGlobal.BeginVerticalDrag;
            this.VerticalDragOver = this.shiftTrackerGlobal.VerticalDragOver;
            this.VerticalDragDrop = this.shiftTrackerGlobal.VerticalDragDrop;
            CurrentDropRow = this.shiftTrackerGlobal.CurrentDropRow;
            this.CreateDependencyEvent = this.shiftTrackerGlobal.CreateDependencyEvent;
            this.TrackingTaskItemControl = this.shiftTrackerGlobal.TrackingTaskItemControl;
            var n = k.options.GanttChart,
                l = k.options.Parent.element;
            this.tstToRenderWith = n.GetBTSTToRenderAgainst();
            this.btuwToRenderWith = n.GetBTUWToRenderAgainst();
            this.wtsToRenderWith = l.GetScheduleToPlotWith();
            this.asTracker = new b(k.options.FlexyGantt);
            var m = _getDargMousePosition(d, f, h);
            this.asTracker.OnScroll.subscribe(function(a, b) {
                _updatePosition.call(this, d, k.$dragThumbClone, f, h, m)
            }, this);
            n = f[0].getBoundingClientRect();
            this.asTracker.prevDeltaStartX =
                n.left;
            this.asTracker.prevDeltaEndX = n.right;
            n = d.srcElement;
            if (!e(n).hasClass("resizer-style") || !e(n).hasClass("rq-fg-gc-taskBarResizer")) {
                var l = f[0].offsetWidth,
                    p = f.height();
                k.$dragThumbClone = this.DragThumb.clone();
                k.$dragThumbClone[0].id = "clone";
                k.$dragThumbClone.addClass("taskclone rq-taskbar-clone");
                n = e("<div id='rq-gc-dependencyCue-parent' class='rq-gc-dependencyCue-parent " + window.radiantQclasses.defaultClass + "'><div id='rq-gc-dependencyCue' class='rq-gc-dependencyCue'></div></div>");
                g.call(this,
                    d, f, h, n);
                if (k.options.FlexyGantt.OnTaskBarMouseDown.isSubscribed()) {
                    var r = {};
                    r.event = d;
                    r.dragThumbWidth = l;
                    r.dragThumbHeight = p;
                    k.options.FlexyGantt.OnTaskBarMouseDown.raise(this, r);
                    l = r.dragThumbWidth;
                    p = r.dragThumbHeight
                }
                var s = !0,
                    D = f.data("TaskBar");
                this.shiftTrackerGlobal.TrackingTaskItemControl = D;
                var r = D.options,
                    D = r.GanttChart.options,
                    E = D.TimeIndicatorLineOption,
                    J = c.TimeIndicatorLines;
                if ((E & J.OnResize) == J.OnResize || (E & J.Always) == J.Always) $startVerticalLineClone = f.find("div.rq-gc-start-verticalLine").clone().show(),
                $endVerticalLineClone = f.find("div.rq-gc-end-verticalLine").clone().show(), r = {
                    Data: r.Data,
                    UseWidthForVerticalLines: !1,
                    IsShifting: !0,
                    UseWidthForTaskBar: !0
                }, D = D.ProvideWidthForMilestoneShape, null != D && (this.$dragThumbClone.css("width", l + "px"), D = D(k, r), null != D && (s = !1, this.cloneMarginLeft = 0, !0 == r.UseWidthForTaskBar && (this.cloneMarginLeft = D / 2, k.$dragThumbClone.css("margin-left", -this.cloneMarginLeft + "px"), k.$dragThumbClone.css("width", l + "px")), !0 == r.UseWidthForVerticalLines && (this.cloneMarginLeft = D / 2, $startVerticalLineClone.css("margin-left",
                    this.cloneMarginLeft + "px"), $endVerticalLineClone.css("margin-left", this.cloneMarginLeft + "px")))), k.$dragThumbClone.append($startVerticalLineClone), k.$dragThumbClone.append($endVerticalLineClone);
                !0 == s && k.$dragThumbClone.css("width", l - 2 + "px");
                k.$dragThumbClone.css("height", p - 1 + "px");
                k.$dragThumbClone.appendTo(f);
                l = f[0].getBoundingClientRect();
                p = l.width;
                !1 == RadiantQ.CanUseDefineProperty && (p = l.right - l.left);
                taskStartAndEndTime = k.taskStartAndEndTime;
                taskStartAndEndTime.originalStart = k.options.StartTime;
                taskStartAndEndTime.originalEnd = k.options.EndTime;
                taskStartAndEndTime.ProposedStart = taskStartAndEndTime.originalStart;
                taskStartAndEndTime.ProposedEnd = taskStartAndEndTime.originalEnd;
                taskStartAndEndTime.OriginalStart = taskStartAndEndTime.originalStart;
                taskStartAndEndTime.OriginalEnd = taskStartAndEndTime.originalEnd;
                taskStartAndEndTime.originalLeft = parseFloat(e(f).css("margin-left"));
                l = Math.round(100 * p) / 100;
                taskStartAndEndTime.originalWidth = taskStartAndEndTime.OriginalWidth = l;
                taskStartAndEndTime.Duration =
                    taskStartAndEndTime.OriginalDuration = null == this.wtsToRenderWith ? a.GetTimeSpan(taskStartAndEndTime.originalStart, taskStartAndEndTime.originalEnd) : this.wtsToRenderWith.GetEffort(taskStartAndEndTime.originalStart, taskStartAndEndTime.originalEnd);
                _mouseClick.call(this, d, k.$dragThumbClone, f, h, n)
            }
            return k.$dragThumbClone
        };
        _mouseClick = function(a, b, d, c, g) {
            var f = this.taskBarInstance,
                h;
            l = !1;
            void 0 != a.originalEvent.touches || null != a.originalEvent.touches ? (this.shiftTrackerGlobal.deltaX = 0, this.shiftTrackerGlobal.deltaY =
                0) : (this.shiftTrackerGlobal.deltaX = void 0 == a.offsetX ? a.originalEvent.layerX : a.offsetX, this.shiftTrackerGlobal.deltaY = void 0 == a.offsetY ? a.originalEvent.layerY : a.offsetY);
            a || (a = window.event);
            a.which ? h = 3 == a.which : a.button && (h = 2 == a.button);
            h || (h = _getDargMousePosition(a, b, d, c), k = e(a.target).closest("tr"), this.lastMouseX = h.x, this.lastMouseY = h.y, this.lastElemLeft = b[0].offsetLeft, this.lastElemTop = b[0].offsetTop, e(".rq-gc-dependencysParent", f.options.GanttChart.element).append(g), f._beginUpdateOverlapTasks(f),
                f.UpdateTooltipContent(taskStartAndEndTime), this.shiftTrackerGlobal.CurrentStartRow = f.options.DataSource, e(f).GetDragOrResizeContent(f.DragTooltipContent, a, d, c), this.$dragPopup = e(".dragPopup", f.options.FlexyGantt.element), f.KeyDownHandler = function(a) {
                    27 == a.keyCode && (f.KeyDownProxy = null, this.asTracker.EndTracking(), this.$doc.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown." + this.widgetName), e(f).RemoveDragOrResizeContent(d), f.$dragThumbClone.remove(), l = !0, a.cancel = !0, e(".rq-gc-dependencyCue-parent", f.options.GanttChart.element).remove(), !0 == this.IsConnecting && (this.IsConnecting = !1), null != this.dropTarget && (this.dropTarget = null), this.IsShifting = !1, this.shiftTrackerGlobal.CurrentDropRow = null, _onVerticalDragDrop.call(this, a, !1), d[0].uiTooltip && (d[0].isDragging = !1))
                }, null == f.KeyDownProxy && (f.KeyDownProxy = e.proxy(f.KeyDownHandler, this), this.$doc.bind("keydown." + this.widgetName, f.KeyDownProxy)))
        };
        _mouseMove = function(a, b, d, c) {
            var g = this.taskBarInstance;
            (n || "false" ==
                b.attr("canhzdrag")) && b.css("display", "none");
            g = g.taskStartAndEndTime;
            null != g.originalStart && (this._renderer = {
                StartTime: g.originalStart.clone(),
                EndTime: g.originalEnd.clone(),
                CanvasLeft: g.originalLeft
            });
            this._renderer.StartTime <= this._renderer.EndTime && (g = _getDargMousePosition(a, b, d, c), this.prefrdLeft = g.x - this.lastMouseX + this.lastElemLeft, _updatePosition.call(this, a, b, d, c, g), d[0].uiTooltip && d[0].uiTooltip.hide(), this.asTracker.MouseMovedTo({
                X: a.clientX,
                Y: a.clientY
            }, n || this.IsConnecting))
        };
        _mouseUp =
            function(a, b, d) {
                this.asTracker.EndTracking();
                var c = this.taskBarInstance;
                this.IsShifting = !1;
                var g = c.taskStartAndEndTime;
                if (null != g.ProposedStart && null != g.ProposedEnd) {
                    e(c).RemoveDragOrResizeContent(d);
                    if (e(b).css("margin-left")) {
                        d = e(d).css("margin-left");
                        "" == d && (d = 0);
                        var f = e(b).css("margin-left");
                        parseInt(f);
                        parseInt(d)
                    }
                    g.originalStart = g.ProposedStart;
                    g.originalEnd = g.ProposedEnd;
                    c._endUpdateOverlapTasks(c);
                    !1 == this.DragComplet.isSubscribed(c.DragEnd) && this.DragComplet.subscribe(c.DragEnd);
                    this.DragComplet.raise(c,
                        g)
                }!0 == c.options.CanDrawDependency && null != this.dropTarget && (this.CreateDependencyEvent.raise(c, {}), this.dropTarget = null);
                n && _updateCurrentDropRow.call(this, a, _onVerticalDragDrop, !1);
                if (!0 == this.IsConnecting || c.options.FlexyGantt.options.IsDependencyLinesReadOnly) this.IsConnecting = !1;
                this.clickPosition = {
                    x: 0,
                    y: 0
                };
                c.UpdateTooltipContent(c.taskStartAndEndTime);
                this.$doc.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown");
                this.$doc.unbind("touchmove." + this.widgetName).unbind("touchend." +
                    this.widgetName).unbind("keydown");
                this.$dragThumbClone = c.KeyDownProxy = null;
                b.remove()
        };
        _getDargMousePosition = function(a, b, d, c) {
            d = b = 0;
            a = !0 == c ? a.originalEvent.touches[0] : a;
            if (a.pageX || a.pageY) b = a.pageX, d = a.pageY;
            else if (a.clientX || a.clientY) b = a.clientX, d = a.clientY;
            return {
                x: b,
                y: d
            }
        };
        _mouseMovedTo = function(b, d, c, g, f, h) {
            var k = this.taskBarInstance;
            this.totalMouseMoves++;
            if (!(6 > this.totalMouseMoves && this.IncludeVerticalMovingSupport)) {
                if (!1 == n && !1 == this.IsShifting && !1 == this.IsConnecting) {
                    Math.abs(d) >= this.shiftTrackerGlobal.MinDeltaYValue &&
                        this.IncludeVerticalMovingSupport ? n = !0 : 4 <= Math.abs(d) && !k.options.FlexyGantt.options.IsDependencyLinesReadOnly && !k.options.FlexyGantt.options.IsReadOnly && !0 == k.options.CanDrawDependency ? this.IsConnecting = !0 : 4 <= Math.abs(b) && "false" != f.attr("canhzdrag") && (this.IsShifting = !0);
                    var m = this.taskBarInstance.options.FlexyGantt;
                    if (m.DetermineShiftBehavior.isSubscribed()) {
                        var p = {};
                        p.event = g;
                        p.xDelta = b;
                        p.yDelta = d;
                        p.canHorizantalDrag = this.IsShifting;
                        p.canDependencyDraw = this.IsConnecting;
                        p.canVerticalDrag = n;
                        m.DetermineShiftBehavior.raise(this,
                            p);
                        n = p.canVerticalDrag;
                        this.IsConnecting = p.canDependencyDraw;
                        this.IsShifting = p.canHorizantalDrag
                    }!0 == n && (n = _canBeginVerticalDrag.call(this, g))
                }
                if (n) l || (f.remove(), this.$dragPopup.remove(), _updateCurrentDropRow.call(this, g, _onVerticalDragOver, !0));
                else if (this.IsShifting) {
                    h = this.taskBarInstance;
                    b = this.asTracker.GetOffsetDueToHPaging();
                    d = this.asTracker.GetOffsetDueToHScroll();
                    f = h.options.GanttChart;
                    m = this._renderer.CanvasLeft + this.cloneMarginLeft;
                    p = m + this.prefrdLeft + d + b;
                    if (f.options.CustomBarShiftOnMove) f.options.CustomBarShiftOnMove.call(this,
                        g, m, p, f);
                    else {
                        b = this.taskBarInstance;
                        d = this.wtsToRenderWith;
                        var m = a.ConvertToEndTimeInBaseScaleType(this.tstToRenderWith, this._renderer.StartTime.clone(), m / this.btuwToRenderWith, p / this.btuwToRenderWith, d),
                            q = Date.today(),
                            p = {
                                Value: m
                            }, q = {
                                Value: q
                            }, r = null == d ? a.GetTimeSpan(this._renderer.StartTime, this._renderer.EndTime) : d.GetEffort(this._renderer.StartTime, this._renderer.EndTime);
                        b.options.FlexyGantt.ConvertToValidTimes(b.options.Data, m, r, p, q, "Move", g, b.element, d);
                        m = p.Value;
                        q = q.Value;
                        b.taskStartAndEndTime.ProposedStart =
                            f.options.Parent.RoundUp(m);
                        b.taskStartAndEndTime.ProposedEnd = f.options.Parent.RoundUp(q)
                    }
                    0 == h.taskStartAndEndTime.ProposedStart.compareTo(h.taskStartAndEndTime.originalStart) && 0 == h.taskStartAndEndTime.ProposedEnd.compareTo(h.taskStartAndEndTime.originalEnd) ? h.taskStartAndEndTime.HasChanged = !1 : h.taskStartAndEndTime.HasChanged = !0;
                    k.UpdateTooltipContent(k.taskStartAndEndTime);
                    this.$dragPopup.empty();
                    this.$dragPopup.append(k.DragTooltipContent);
                    this.$dragPopup.css("visibility", "visible");
                    c[0].uiTooltip &&
                        c[0].uiTooltip.hide()
                } else this.IsConnecting && (k = this.taskBarInstance, f.remove(), f = this.asTracker.GetOffsetDueToHScroll(), b = this.asTracker.GetOffsetDueToVScroll(), !0 == h && (g.pageX = g.originalEvent.touches[0].pageX, g.pageY = g.originalEvent.touches[0].pageY), e(".rq-gc-dependencyCue-parent:gt(0)").remove(), $DeplinkLine = e(".rq-gc-dependencyCue-parent", k.options.GanttChart.element), 0 == e(".rq-gc-dependencyCue-arrow", k.options.GanttChart.element).length && $DeplinkLine.append("<div id='rq-gc-dependencyCue-arrow' class='rq-gc-dependencyCue-arrow " +
                    window.radiantQclasses.defaultClass + "' style='width:0; height:0; z-index:2;  position:relative; border-top-width:5px; border-top-style:solid; border-right:5px solid transparent; border-left:5px solid transparent; border-bottom-width:0px; margin-left:-4px;'</div>"), $DeplinkInnerLineArrow = e(".rq-gc-dependencyCue", k.options.GanttChart.element), 0 < $DeplinkLine.length && (c.parents("div.rq-ganttChart"), m = k.options.GanttChart.VSB.$scrollContainer.scrollTop(), d = c.offset().left + $DeplinkLine[0].offsetLeft - c[0].offsetLeft,
                    m = $DeplinkLine[0].offsetTop - (c[0].parentElement.offsetHeight + c[0].offsetTop) + m, p = c.offset().top + m, m = c = 0, this.clickPosition ? (m = d = 0, !0 == h ? (d = g.originalEvent.touches[0].clientX, m = g.originalEvent.touches[0].clientY) : (d = g.clientX, m = g.clientY), d += f, m += b, g = k.options.FlexyGantt, g.OnDependencyDrag.isSubscribed() && (c = {}, c.fromTask = k.options.Data, c.lengtoTask = k.options.GanttChart.TaskOnMouseHover, c.startX = this.clickPosition.x, c.startY = this.clickPosition.y, c.currentX = d, c.currentY = m, g.OnDependencyDrag.raise(this,
                        c), this.clickPosition.x = c.startX, this.clickPosition.y = c.startY, d = c.currentX, m = c.currentY), c = Math.sqrt((d - this.clickPosition.x) * (d - this.clickPosition.x) + (m - this.clickPosition.y) * (m - this.clickPosition.y)), m = 180 / 3.1415 * Math.acos((m - this.clickPosition.y) / c), d > this.clickPosition.x && (m *= -1)) : (c = Math.sqrt((g.pageX - d) * (g.pageX - d) + (g.pageY - p) * (g.pageY - p)), m = 180 / 3.1415 * Math.acos((g.pageY - p) / c), g.pageX > d && (m *= -1)), $DeplinkInnerLineArrow.css({
                        height: c - 7,
                        "-webkit-transform": "rotate(" + m + "deg)",
                        "-moz-transform": "rotate(" +
                            m + "deg)",
                        "-o-transform": "rotate(" + m + "deg)",
                        "-ms-transform": "rotate(" + m + "deg)",
                        transform: "rotate(" + m + "deg)",
                        "-ms-filter": "progid:DXImageTransform.Microsoft.BasicImage(rotation=90)"
                    }), $DeplinkLine.css({
                        height: c - 5,
                        "-webkit-transform": "rotate(" + m + "deg)",
                        "-moz-transform": "rotate(" + m + "deg)",
                        "-o-transform": "rotate(" + m + "deg)",
                        "-ms-transform": "rotate(" + m + "deg)",
                        transform: "rotate(" + m + "deg)",
                        "-ms-filter": "progid:DXImageTransform.Microsoft.BasicImage(rotation=90)"
                    }), $DeplinkLine.css({
                        "pointer-events": "none"
                    }),
                    this.dropTarget = k.options.GanttChart.TaskOnMouseHover, g = {
                        ConnectingInfoFromTaskText: k.options.Data,
                        ConnectingInfoToTaskText: ""
                    }, null != this.dropTarget && this.dropTarget != k.options.Data && (g = {
                        ConnectingInfoFromTaskText: k.options.Data,
                        ConnectingInfoToTaskText: k.options.Data != this.dropTarget ? this.dropTarget : ""
                    }), k.ConnectingInfo(g), this.$dragPopup.empty(), this.$dragPopup.append(k.DepConnContent), this.$dragPopup.css("visibility", "visible")))
            }
        };
        _updatePosition = function(a, b, d, c, g) {
            a.shouldSyncDragCue = !1;
            var f =
                k;
            f && 0 != f.length && (a.row_index = f[0].rowIndex, -1 == a.row_index && (a.row_index = e("tr", e(d).closest("table")).index(f)), f = this.prefrdLeft + this.asTracker.GetOffsetDueToHScroll() + this.asTracker.GetOffsetDueToHPaging(), _mouseMovedTo.call(this, g.x - this.lastMouseX, g.y - this.lastMouseY, d, a, b, c), !0 == a.shouldSyncDragCue || n || b.css("margin-left", f + "px"))
        };
        d.shiftTrackerGlobal.GetDropCueLocationIn = function(a) {
            var b, d;
            if (a.pageX || a.pageY) b = a.pageX, d = a.pageY;
            else if (a.clientX || a.clientY) b = a.clientX, d = a.clientY;
            return {
                X: b,
                Y: d
            }
        };
        _updateCurrentDropRow = function(a, b, d) {
            var c;
            c = a.originalEvent;
            c = void 0 != c.changedTouches || null != c.changedTouches ? e(document.elementFromPoint(c.changedTouches[0].clientX, c.changedTouches[0].clientY)).closest("td.FlexyChartRow") : void 0 != c.touches || null != c.touches ? e(document.elementFromPoint(c.changedTouches[0].clientX, c.changedTouches[0].clientY)).closest("td.FlexyChartRow") : e(a.target).closest("td.FlexyChartRow");
            this.shiftTrackerGlobal.CurrentDropRow = 0 < c.length && n ? c.parent()[0]["data-grid-item"] :
                null;
            b.call(this, a, d)
        };
        _canBeginVerticalDrag = function(a) {
            if (this.BeginVerticalDrag) {
                var b = {};
                b.event = a;
                b.cancel = !1;
                this.BeginVerticalDrag.raise(this, b);
                return !1 == b.cancel
            }
            return !0
        };
        _onVerticalDragOver = function(a, b) {
            l || (this.VerticalDragOver && this.VerticalDragOver.raise(this, a), n = b)
        };
        _onVerticalDragDrop = function(a, b) {
            this.VerticalDragDrop && this.shiftTrackerGlobal.IncludeVerticalMovingSupport && n && this.VerticalDragDrop.raise(this, a);
            n = b
        };
        var r = this.data("TaskBar").options.FlexyGantt.element.getGridBody();
        _tableAutoScrollUp = function() {
            null == h && (h = setInterval(function() {
                0 < 100 * r[0].scrollTop / (r[0].scrollHeight - r[0].clientHeight) ? _autoScroll(-10) : clearAutoScrollTimers()
            }, 0))
        };
        _tableAutoScrollDown = function() {
            null == f && (f = setInterval(function() {
                r[0].scrollHeight == r[0].scrollTop + r[0].clientHeight ? clearAutoScrollTimers() : _autoScroll(10)
            }, 0))
        };
        _autoScroll = function(a) {
            r.animate({
                scrollTop: r[0].scrollTop + a
            }, 0)
        };
        clearAutoScrollTimers = function() {
            null != h && clearInterval(h);
            null != f && clearInterval(f);
            h = f = null
        };
        this[0].mouseMovedTo =
            _updatePosition;
        this[0].mouseClick = _mouseClick
    };
    e.fn.getGridBody = function(a) {
        return e(".ui-grid-body", a)
    };
    e.fn.resizeTracker = function(d) {
        var g = this;
        this.taskBarInstance = d;
        var f, h, k, n;
        this.$resizeThumbClone = null;
        var l = e(document),
            u = new ObjectEvent("ResizeComplet"),
            v = d.ResizeThumb;
        d = d.StartResizeThumb;
        var C = null,
            z = null,
            y = 0;
        e(g).find("div.parentMiddleBar-style");
        e(g).find("div.parentMiddleBar-style");
        var B = !1,
            A = null,
            D = 0,
            E = null;
        0 < v.length && (v.bind("mousedown." + this.widgetName, function(a) {
            if (!B) {
                document.mouseButtonPressed = !0;
                var b = this,
                    d = _commonResizerMouseDone.call(this, a, g, !1);
                k = function(a) {
                    return _resizerMouseMove.call(b, a, d, g)
                };
                n = function(a) {
                    document.mouseButtonPressed = !1;
                    return _resizerMouseUp.call(b, a, d, g)
                };
                l.bind("mousemove." + this.widgetName, k).bind("mouseup." + this.widgetName, n)
            }
        }.bind(this.taskBarInstance)), v.bind("touchstart." + this.widgetName, function(a) {
            B = !0;
            var b = this;
            document.mouseButtonPressed = !0;
            var d = _commonResizerMouseDone.call(b, a, g, !0);
            k = function(a) {
                return _resizerMouseMove.call(b, a, d, g, !0)
            };
            n = function(a) {
                document.mouseButtonPressed = !1;
                return _resizerMouseUp.call(b, a, d, g, !0)
            };
            l.bind("touchmove." + this.widgetName, k.bind(this)).bind("touchend." + this.widgetName, n.bind(this))
        }.bind(this.taskBarInstance)));
        0 < d.length && (d.bind("mousedown." + this.widgetName, function(a) {
            if (!B) {
                var b = this;
                document.mouseButtonPressed = !0;
                var d = _commonResizerMouseDone.call(b, a, g, !1, !0);
                k = function(a) {
                    return _resizerMouseMove.call(b, a, d, g, null, !0)
                };
                n = function(a) {
                    document.mouseButtonPressed = !1;
                    return _resizerMouseUp.call(b, a, d, g, null, !0)
                };
                l.bind("mousemove." +
                    this.widgetName, k.bind(this)).bind("mouseup." + this.widgetName, n.bind(this))
            }
        }.bind(this.taskBarInstance)), d.bind("touchstart." + this.widgetName, function(a) {
            B = !0;
            var b = this;
            document.mouseButtonPressed = !0;
            var d = _commonResizerMouseDone.call(b, a, g, !0, !0);
            k = function(a) {
                return _resizerMouseMove.call(b, a, d, g, !0, !0)
            };
            n = function(a) {
                document.mouseButtonPressed = !1;
                return _resizerMouseUp.call(b, a, d, g, !0, !0)
            };
            l.bind("touchmove." + this.widgetName, k.bind(b)).bind("touchend." + this.widgetName, n.bind(b))
        }.bind(this.taskBarInstance)));
        var J = null;
        _commonResizerMouseDone = function(a, d, g, f) {
            var e = this;
            e.KeyDownProxy = null;
            e.$resizeThumbClone = v.clone();
            A = this.options.GanttChart.GetBTSTToRenderAgainst();
            D = this.options.GanttChart.GetBTUWToRenderAgainst();
            E = this.options.Parent.element.GetScheduleToPlotWith();
            var h = d.height(),
                k = d[0].offsetWidth,
                n = 2;
            J = f ? new b(this.options.FlexyGantt, m.Left) : new b(this.options.FlexyGantt, m.Right);
            J.OnScroll.subscribe(function(b, c) {
                _updateWidth.call(this, a, e.$resizeThumbClone, d, g, f)
            }, this);
            var l = "auto";
            !0 ==
                f && (n = 5, l = d.css("left"));
            e.$resizeThumbClone[0].id = "clone";
            e.$resizeThumbClone.css({
                width: k - n + "px",
                height: h - 1 + "px",
                "margin-left": "0px",
                left: l,
                display: "block"
            }).addClass("taskclone rq-taskbar-clone");
            e.$resizeThumbClone.appendTo(d);
            _resizerMouseClick.call(this, a, e.$resizeThumbClone, d, g, f);
            a.stopPropagation();
            h = e.options.GanttChart.options.TimeIndicatorLineOption;
            if ((h & c.TimeIndicatorLines.OnResize) == c.TimeIndicatorLines.OnResize || (h & c.TimeIndicatorLines.Always) == c.TimeIndicatorLines.Always) C = d.find("div.rq-gc-start-verticalLine").clone().show(),
            z = d.find("div.rq-gc-end-verticalLine").clone().show(), e.$resizeThumbClone.append(C), e.$resizeThumbClone.append(z);
            return e.$resizeThumbClone
        };
        var H = 0;
        _resizerMouseClick = function(b, d, c, g, k) {
            this.closeToolTip();
            c[0].uiTooltip && (c[0].isResizing = !0);
            var n = this.element[0].getBoundingClientRect(),
                m = n.width;
            !1 == RadiantQ.CanUseDefineProperty && (m = n.right - n.left);
            f = _getMousePosition(b, d, c, g).x;
            h = Math.round(100 * m) / 100;
            H = parseFloat(c.css("margin-left"));
            this._beginUpdateOverlapTasks(this);
            d = this.options.GanttChart.options.Parent;
            this.taskStartAndEndTime.originalStart = this.options.StartTime;
            this.taskStartAndEndTime.originalEnd = this.options.EndTime;
            this.taskStartAndEndTime.ProposedStart = d.RoundUp(this.taskStartAndEndTime.originalStart);
            this.taskStartAndEndTime.ProposedEnd = d.RoundUp(this.taskStartAndEndTime.originalEnd);
            this.taskStartAndEndTime.OriginalStart = this.taskStartAndEndTime.originalStart;
            this.taskStartAndEndTime.OriginalEnd = this.taskStartAndEndTime.originalEnd;
            this.taskStartAndEndTime.Duration = this.taskStartAndEndTime.OriginalDuration =
                null == E ? a.GetTimeSpan(this.taskStartAndEndTime.originalStart, this.taskStartAndEndTime.originalEnd) : E.GetEffort(this.taskStartAndEndTime.originalStart, this.taskStartAndEndTime.originalEnd);
            this.taskStartAndEndTime.OriginalLeft = this.taskStartAndEndTime.originalLeft = parseFloat(c.css("margin-left"));
            m = Math.round(100 * m) / 100;
            this.taskStartAndEndTime.originalWidth = m;
            this.taskStartAndEndTime.OriginalWidth = this.taskStartAndEndTime.originalWidth;
            this.ProposedDuration = this.taskStartAndEndTime.OriginalDuration;
            this.UpdateTooltipContent(this.taskStartAndEndTime, k);
            e(this).GetDragOrResizeContent(this.ResizeTooltipContent, b, c, g);
            this.KeyDownHandler = function(a) {
                27 == a.keyCode && (this.KeyDownProxy = null, J.EndTracking(), l.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown." + this.widgetName), e(this).RemoveDragOrResizeContent(c), this.$resizeThumbClone.remove(), c[0].uiTooltip && (c[0].isResizing = !1))
            };
            null == this.KeyDownProxy && (this.KeyDownProxy = e.proxy(this.KeyDownHandler, this), l.bind("keydown." +
                this.widgetName, this.KeyDownProxy))
        };
        _resizerMouseMove = function(a, b, d, c, g) {
            y = _getMousePosition(a, b, d, c).x - f + this.taskStartAndEndTime.originalWidth;
            _updateWidth.call(this, a, b, d, c, g);
            J.MouseMovedTo({
                X: a.clientX,
                Y: a.clientY
            })
        };
        _resizerMouseUp = function(a, b, d, c, g) {
            clearAutoScrollTimers();
            J.EndTracking();
            d[0].uiTooltip && (d[0].isResizing = !1);
            e(this).RemoveDragOrResizeContent(d);
            this.$resizeThumbClone.remove();
            this.KeyDownProxy = null;
            this._endUpdateOverlapTasks(this);
            u.clear();
            !0 == g ? u.subscribe(this.ResizeStart) :
                u.subscribe(this.ResizeEnd);
            u.raise(this, this.taskStartAndEndTime);
            this.taskStartAndEndTime.originalEnd = this.taskStartAndEndTime.originalEnd;
            this.taskStartAndEndTime.OriginalDuration = this.ProposedDuration;
            this.taskStartAndEndTime.originalStart = this.taskStartAndEndTime.ProposedStart;
            l.unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown");
            l.unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown")
        };
        _resizeTo = function(b, d, c, g) {
            this.taskStartAndEndTime.HasChanged =
                this.taskStartAndEndTime.OriginalDuration == this.ProposedDuration ? !1 : !0;
            g = this.options.GanttChart.options;
            b = a.ConvertUnitsInBaseScaleTypeToDurationInHours(A, this.taskStartAndEndTime.originalStart, this.taskStartAndEndTime.originalLeft / D, (this.taskStartAndEndTime.originalLeft + b) / D, E);
            b = new RQTimeSpan(0, b, 0, 0);
            var f = this.taskStartAndEndTime.originalStart.clone(),
                h = f.clone();
            h.addHours(b.getTotalHours());
            var k = {
                Value: f
            }, h = {
                    Value: h
                };
            this.options.FlexyGantt.ConvertToValidTimes(this.options.Data, this.taskStartAndEndTime.originalStart.clone(),
                b, k, h, "ResizeAtEnd", d, c, E);
            h = h.Value;
            this.taskStartAndEndTime.originalStart < h && (this.taskStartAndEndTime.ProposedStart = f, this.taskStartAndEndTime.ProposedEnd = g.Parent.RoundUp(h.clone()), this.taskStartAndEndTime.Duration = a.GetTimeSpan(this.taskStartAndEndTime.originalStart, h), b = null == E ? a.GetTimeSpan(this.taskStartAndEndTime.originalStart, h) : E.GetEffort(this.taskStartAndEndTime.originalStart, h), this.ProposedDuration = g.Parent.RoundUpDuration(b), this.taskStartAndEndTime.Duration = this.ProposedDuration,
                this.taskStartAndEndTime.originalEnd = this.taskStartAndEndTime.ProposedEnd, this.UpdateTooltipContent(this.taskStartAndEndTime, !1));
            d = e(".dragPopup");
            e(d).empty();
            e(d).append(this.ResizeTooltipContent);
            e(d).css("visibility", "visible");
            c[0].uiTooltip && c[0].uiTooltip.hide()
        };
        resizeStartTo = function(b, d, c) {
            this.taskStartAndEndTime.HasChanged = this.taskStartAndEndTime.OriginalDuration == this.ProposedDuration ? !1 : !0;
            var g = this.options.GanttChart.options,
                f = a.ConvertToEndTimeInBaseScaleType(A, this.taskStartAndEndTime.OriginalStart.clone(),
                    this.taskStartAndEndTime.OriginalLeft / D, b / D, E);
            b = a.ConvertUnitsInBaseScaleTypeToDurationInHours(A, f, b / D, (this.taskStartAndEndTime.OriginalLeft + this.taskStartAndEndTime.originalWidth) / D, E);
            0 > b && (window.catchAllGanttExcetions && window.console && window.console.error && console.error("'durInHours' wouldn't be less than 0(zero) issue in 'resizeStartTo' method in TaskItemControl.js file."), b = 0);
            g = g.Parent.RoundUpDuration(new RQTimeSpan(0, b, 0, 0));
            f = b = Date.MinValue;
            b = {
                Value: b
            };
            f = {
                Value: f
            };
            this.options.FlexyGantt.ConvertToValidTimes(this.options.Data,
                this.taskStartAndEndTime.originalEnd.clone(), g, f, b, "ResizeAtStart", d, c, E);
            null != RadiantQ.FlexyGantt.ShiftTrackerGlobal.GetAdjustedDatetime && RadiantQ.FlexyGantt.ShiftTrackerGlobal.GetAdjustedDatetime(refadjustedStart, !0);
            b = b.Value;
            f = f.Value;
            g = null == E ? new RQTimeSpan(f - b) : E.GetEffort(b, f);
            this.taskStartAndEndTime.ProposedStart = b;
            this.taskStartAndEndTime.originalStart = this.taskStartAndEndTime.ProposedStart;
            this.ProposedDuration = this.taskStartAndEndTime.ProposedDuration = g;
            this.taskStartAndEndTime.Duration =
                g;
            this.UpdateTooltipContent(this.taskStartAndEndTime, !0);
            d = e(".dragPopup");
            d.empty();
            d.append(this.ResizeTooltipContent);
            d.css("visibility", "visible");
            c[0].uiTooltip && c[0].uiTooltip.hide()
        };
        _getMousePosition = function(a, b, d, c) {
            if (!0 == c)
                if (a.originalEvent.touches[0].pageX || a.originalEvent.touches[0].pageY) var g = a.originalEvent.touches[0].pageX,
            f = a.originalEvent.touches[0].pageY;
            else {
                if (a.originalEvent.touches[0].clientX || a.originalEvent.touches[0].clientY) g = a.originalEvent.touches[0].clientX, f = a.originalEvent.touches[0].clientY
            } else if (a.pageX ||
                a.pageY) g = a.pageX, f = a.pageY;
            else if (a.clientX || a.clientY) g = a.clientX, f = a.clientY;
            return {
                x: g,
                y: f
            }
        };
        _updateWidth = function(a, b, d, c, g) {
            c = J.GetOffsetDueToHScroll();
            var f = J.GetOffsetDueToHPaging();
            !0 == g ? (g = y - h + c + f, c = h - g, f = H, 0 > c ? (c = 0, f += h, J.preventAutoscroll = !0) : (f += g, b.css("margin-left", g + "px")), b.css("width", c + "px"), null != z && 0 < z.length && (z[0].style["margin-left"] = b.css("width")), resizeStartTo.call(this, f, a, d)) : (c = y + c + f, 0 > c && (c = 0, J.preventAutoscroll = !0), b.css("width", c + "px"), null != z && null != z[0] && (z[0].style["margin-left"] =
                c + "px"), _resizeTo.call(this, c, a, d))
        }
    };
    e.fn.GetDragOrResizeContent = function(a, b, d, c) {
        e(".dragPopup").remove();
        var g = e('<div class="dragPopup" style="visibility: hidden; position: fixed;" />');
        if (a) {
            e(g).append(a);
            var f = !1;
            e(g).mousemove(function() {
                void 0 != this.refreshPostion && (this.refreshPostion(f), f = !f)
            })
        }
        e(d).parents("div").filter(".rq-gc-viewsContainer-div");
        var h = e(d).parents("div").filter(".rq-ganttBase"),
            k = e(".rq-gc-taskbar-popup", a);
        0 == k.length && (k = e(".draggingContent", a));
        e(h).append(g);
        e(d).css("z-index",
            15);
        g.css("z-index", 25);
        a = e(d).height() + 2;
        !0 == c ? (c = b.originalEvent.touches[0].pageX, h = b.originalEvent.touches[0].pageY) : (c = b.pageX, h = b.pageY);
        g.css({
            left: c,
            top: h + (a - b.offsetY)
        });
        e(d).offset();
        b = k.outerWidth(!0);
        k = k.outerHeight(!0);
        d = e(window);
        d.width();
        0 > d.scrollTop() + d.height() - (g.offset().top + k) && g.css({
            top: h - k - a
        });
        k = g.offset().left + b - e(window).width();
        0 < k ? g.css({
            left: c - k
        }) : -150 < k && g.css({
            left: c - 150
        })
    };
    e.fn.RemoveDragOrResizeContent = function(a) {
        e(a).css("z-index", 10);
        e(".dragPopup").remove()
    };
    b.prototype.AutoScrollMode =
        function(a) {
            if (0 == arguments.length) return this.asMode;
            this.removeScrollTimers();
            if (a != m.None) {
                var b = this;
                this.scrollTimer = setInterval(function() {
                    b.ScrollTick()
                }, 150)
            }
            this.asMode = a
    };
    b.prototype.GetOffsetDueToHScroll = function() {
        return this.GanttChart.$GanttChart.scrollLeft() - this.StartXScrollPos
    };
    b.prototype.GetOffsetDueToHPaging = function() {
        return -1 * this.GanttChart.ConvertTimeToX(this.ActualViewStartTime)
    };
    b.prototype.GetOffsetDueToVScroll = function() {
        return this.GanttChart.VSB.$scrollContainer.scrollTop() -
            this.StartYScrollPos
    };
    b.prototype.MouseMovedTo = function(a, b) {
        this._pagingTimer && (clearTimeout(this._pagingTimer), this._pagingTimer = null);
        if (!0 == this.preventAutoscroll) return this.PreventAutoscroll();
        b = b || !1;
        this.mouseCurPos = {
            X: a.X,
            Y: a.Y
        };
        null != this.scrollTimer && (this.prevDeltaStartX == this.mouseCurPos.X && this.prevDeltaEndX == this.mouseCurPos.X || this.prevDeltaStartY == this.mouseCurPos.Y && this.prevDeltaEndY == this.mouseCurPos.Y) || (this.removeScrollTimers(), this.CheckForScroll(b), this.prevDeltaStartX = this.prevDeltaEndX =
            this.mouseCurPos.X)
    };
    b.prototype.CheckForScroll = function(a) {
        if (!0 == this.preventAutoscroll) return this.PreventAutoscroll();
        this.ValidateScrollMode == m.Left ? this.mouseCurPos.X <= this.topLeft.X + 25 ? this.AutoScrollMode(m.Left) : this.mouseCurPos.X >= this.bottomRight.X - 25 && this.AutoScrollMode(m.Right) : this.ValidateScrollMode == m.Right ? this.mouseCurPos.X <= this.topLeft.X + 25 ? this.AutoScrollMode(m.Left) : this.mouseCurPos.X >= this.bottomRight.X - 25 && this.AutoScrollMode(m.Right) : this.mouseCurPos.X <= this.topLeft.X + 10 ?
            this.AutoScrollMode(m.Left) : this.mouseCurPos.X >= this.bottomRight.X - 10 ? this.AutoScrollMode(m.Right) : !a || "FlexyGantt" != this.GanttBase.GanttType && !1 != this.GanttChart.options.UseChartVirtualization || (this.mouseCurPos.Y <= this.topLeft.Y + 10 ? this.AutoScrollMode(m.Up) : this.mouseCurPos.Y >= this.bottomRight.Y - 10 && this.AutoScrollMode(m.Bottom))
    };
    b.prototype.ScrollTick = function() {
        if (!0 == this.preventAutoscroll) return this.PreventAutoscroll();
        switch (this.AutoScrollMode()) {
            case m.Left:
                var a = this.GanttChart.HScrollBar.scrollLeft();
                0 == a && !0 == this.EnablePagingOnAutoScroll ? this._pagingTimer || (this._pagingTimer = setTimeout(function() {
                    this.GanttChart.PageLeft();
                    this.pagingCount--;
                    this._pagingTimer = null
                }.bind(this), 500)) : this.GanttChart.HScrollBar.scrollLeft(a - 100);
                break;
            case m.Right:
                a = this.GanttChart.HScrollBar.scrollLeft();
                a == this.GanttChart.HScrollBar[0].scrollWidth - this.GanttChart.HScrollBar[0].clientWidth && !0 == this.EnablePagingOnAutoScroll ? this._pagingTimer || (this._pagingTimer = setTimeout(function() {
                    this.GanttChart.PageRight();
                    this.pagingCount++;
                    this._pagingTimer = null
                }.bind(this), 500)) : this.GanttChart.HScrollBar.scrollLeft(a + 100);
                break;
            case m.Up:
                a = this.GanttChart.VSB.$scrollContainer.scrollTop();
                if (0 == a) return this.PreventAutoscroll();
                this.GanttChart.VSB.$scrollContainer.scrollTop(a - 100);
                break;
            case m.Bottom:
                a = this.GanttChart.VSB.$scrollContainer.scrollTop();
                if (a + 2 >= this.GanttChart.VSB.$scrollContainer[0].scrollHeight - this.GanttChart.VSB.$scrollContainer[0].clientHeight) return this.PreventAutoscroll();
                this.GanttChart.VSB.$scrollContainer.scrollTop(a +
                    100)
        }
        this.OnScroll.raise(this)
    };
    b.prototype.HasPaged = function() {
        return 0 != this.pagingCount
    };
    b.prototype.PreventAutoscroll = function() {
        this.EndTracking()
    };
    b.prototype.removeScrollTimers = function() {
        clearInterval(this.scrollTimer);
        this.scrollTimer = null;
        this.asMode = m.None
    };
    b.prototype.EndTracking = function() {
        this.removeScrollTimers();
        this.preventAutoscroll = !1
    };
    var m = {
        None: "None",
        Left: "Left",
        Right: "Right",
        Up: "Up",
        Bottom: "Bottom"
    };
    RadiantQ.FlexyGantt.AutoScrollTracker = b;
    RadiantQ.FlexyGantt.AutoScrollModes =
        m
})(jQuery);
(function(e, b) {
    e.TasksListControl = {
        tasksCollection: null,
        currentUniqueTaskSuffix: 0,
        blocks: [],
        ItemTemplate: null,
        options: {
            name: "TasksListControl",
            viewStartTime: null,
            viewEndTime: null,
            ViewWidth: null,
            TreeViewItem: null,
            Data: null,
            TasksListProperty: null,
            ParentTasksListProperty: null,
            GanttChart: null,
            TimeIndicatorLineOption: null,
            IsParentTypeRow: null,
            BaseTimeUnitWidth: null,
            OverlappedTasksRenderingOptimization: null,
            TaskTemplate: null,
            ParentTaskTemplate: null,
            TaskStartTime: null,
            ParentTaskStartTime: null,
            TaskEndTime: null,
            ParentTaskEndTime: null,
            RowCount: null,
            Parent: null,
            KnockoutObjectName: null,
            TaskTooltipTemplate: null,
            ResizeInfoPopup: null,
            MovingInfoPopup: null,
            FlexyGantt: null,
            DragThumb: null,
            ResizeThumb: null,
            TaskBarBrowseToCueLeftTemplate: null,
            TaskBarBrowseToCueRightTemplate: null,
            IsPrinting: !1,
            UseRQModelBinder: !1,
            EnableAutoAdjustForSchedule: !0,
            CanDrawDependency: !1,
            MinimumWidthForParentBar: 1
        },
        TasksList: null,
        BrowseToTaskCueLeft: null,
        BrowseToTaskCueRight: null,
        BrowseToCueLeft: 0,
        BrowseToCueRight: 0,
        BrowseToTaskCueLeftVisibility: "none",
        BrowseToTaskCueRightVisibility: "none",
        _create: function() {
            this._schedule = null;
            !1 == this.options.IsPrinting && this.options.Data.ChartRow(this.element.parent());
            this.element.data("TasksListControl", this);
            this._validateOptions();
            this.refresh()
        },
        WorkTimeSchedule_M: function(c) {
            if (null != this._schedule) return this._schedule;
            if (c = this.options.GanttChart.options.RowRenderingScheduleBinding) {
                var a = this.getNestedValue(this.options.Data._data, c.Property);
                this._schedule = c.Converter ? c.Converter.Convert.call(this.options.Data,
                    a, c.Property) : "" == b.trim(a) ? null : a;
                void 0 === this._schedule && (this._schedule = this.options.GanttChart.options.WorkTimeSchedule)
            } else this._schedule = this.options.GanttChart.options.WorkTimeSchedule;
            return this.options.Data.Schedule = this._schedule
        },
        GetScheduleToPlotWith: function() {
            var b = this.options.Data;
            return null != b && null != b.HierarchicalItem.ResourceSchedule_M() ? b.HierarchicalItem.ResourceSchedule_M() : this.options.GanttChart.options.WorkTimeSchedule
        },
        getNestedValue: function(c, a) {
            for (var d = a.split("."),
                    g = 0; g < d.length; g++) "undefined" != typeof c && (c = c[d[g] + "_M"] ? c[d[g] + "_M"]() : c[d[g]]);
            return !0 == b.isFunction(c) ? c() : c || ""
        },
        refreshVerticalLine: function() {
            for (var b = 0; b < this.TasksList.length; b++) {
                var a = this.TasksList[b].data("TaskBar");
                a && a.renderVerticalLine()
            }
        },
        _validateOptions: function() {
            var b = this.options;
            window.console && (b.Data.IsParentType() ? !b.ParentTasksListProperty || "string" == typeof b.ParentTasksListProperty && void 0 != b.Data._data[b.ParentTasksListProperty] || console.error('Data does not have a property called "' +
                b.ParentTasksListProperty + '". Specify a correct ParentTasksListProperty value.') : b.TasksListProperty && ("string" == typeof b.TasksListProperty && void 0 != b.Data._data[b.TasksListProperty] || console.error('Data does not have a property called "' + b.TasksListProperty + '". Specify a correct TaskListProperty value.')))
        },
        refresh: function() {
            this.TasksList = [];
            var c = this.element;
            b(this.element).bind("heightChange", function() {});
            this.TaskListControl = b("<div class='rq-gc-taskListContainer' style='height:100%;'></div>");
            c[0].appendChild(this.TaskListControl[0]);
            this.options.KnockoutObjectName = eval(this.options.KnockoutObjectName);
            this._updateItemsSourceAndTemplates();
            this._enableTouchEvents();
            this._drawTaskBar();
            this.OnApplyTemplate();
            this.options.GanttChart.ViewportTimeRangeChanged.subscribe(this._ganttChart_ViewportTimeRangeChanged, this)
        },
        OnApplyTemplate: function() {
            this.BrowseToTaskCueLeft = b(this.options.TaskBarBrowseToCueLeftTemplate).css({
                "margin-left": this.BrowseToCueLeft,
                display: this.BrowseToTaskCueLeftVisibility
            });
            this.BrowseToTaskCueRight = b(this.options.TaskBarBrowseToCueRightTemplate).css({
                "margin-left": this.BrowseToCueRight,
                display: this.BrowseToTaskCueRightVisibility
            });
            0 < this.BrowseToTaskCueLeft.length && (this.BrowseToTaskCueLeft.bind("touchstart mousedown", this._browseToTaskCue_Click), this.BrowseToTaskCueLeft[0].tasksListControl = this, this.BrowseToTaskCueLeft.addClass("rq-gc-browseCue-left"), this.BrowseToTaskCueLeft[0].title = window.RadiantQ_ScrollToTask, b("div:eq(0)", this.element).append(this.BrowseToTaskCueLeft));
            0 < this.BrowseToTaskCueRight.length && (this.BrowseToTaskCueRight.bind("touchstart mousedown", this._browseToTaskCue_Click), this.BrowseToTaskCueRight[0].tasksListControl = this, this.BrowseToTaskCueRight.addClass("rq-gc-browseCue-right"), this.BrowseToTaskCueRight[0].title = window.RadiantQ_ScrollToTask, b("div:eq(0)", this.element).append(this.BrowseToTaskCueRight));
            this._ganttChart_ViewportTimeRangeChanged(this, null);
            (this.options.TaskBarBrowseToCueLeftTemplate || this.options.TaskBarBrowseToCueRightTemplate) &&
                this.options.GanttChart.BeforeChartHZScroll.subscribe(this._GanttChart_BeforeChartHZScroll, this)
        },
        _enableTouchEvents: function() {},
        tapDownX: null,
        tapDownY: null,
        tapHoldTimer: null,
        canShowContextMenu: !1,
        timeOutFunctions: null,
        _onTouchstart: function(b) {
            b = b.touches ? b.touches[0] : b;
            var a = this;
            a.tapDownX = b.clientX;
            a.tapDownY = b.clientY;
            a.tapHoldTimer = setTimeout(function() {
                a.canShowContextMenu = !0
            }, 500)
        },
        _onTouchMove: function() {
            clearTimeout(this.tapHoldTimer)
        },
        _onTouchend: function(b) {
            if ("ShowContextMenu" == this.options.GanttChart.options.TouchTapAction || !0 == this.canShowContextMenu) {
                var a = b.changedTouches ? b.changedTouches[0] : b;
                if (this.tapDownX == a.clientX && this.tapDownY == a.clientY) {
                    var d = this;
                    clearTimeout(d.timeOutFunctions);
                    d.timeOutFunctions = setTimeout(function() {
                        d._showContextMenu(b, a)
                    }, 40)
                }
                this.canShowContextMenu = !1
            }
            clearTimeout(this.tapHoldTimer)
        },
        _showContextMenu: function(c, a) {
            if ("mouse" != c.pointerType && 4 != c.pointerType) {
                var d = b.ui ? b.ui.version || "1.5.2" : null;
                d && 1.11 <= parseFloat(d) && b.isFunction(b.jQContextMenu) ? b(c.target).jQContextMenu({
                    x: a.clientX,
                    y: a.clientY
                }) : b.isFunction(b.contextMenu) && b(c.target).contextMenu({
                    x: a.clientX,
                    y: a.clientY
                })
            }
        },
        _GanttChart_BeforeChartHZScroll: function(b, a) {
            this.BrowseToCueLeft += a.diff;
            this.BrowseToTaskCueLeft && this.BrowseToTaskCueLeft.css({
                "margin-left": this.BrowseToCueLeft
            });
            "none" == this.BrowseToTaskCueLeftVisibility && (this.BrowseToCueRight += a.diff);
            this.BrowseToTaskCueRight && this.BrowseToTaskCueRight.css({
                "margin-left": this.BrowseToCueRight
            })
        },
        _browseToTaskCue_Click: function(b) {
            var a = this.tasksListControl,
                d =
                    a.options.GanttChart;
            this == a.BrowseToTaskCueLeft[0] ? (a = a._tracker.GetNextTaskStartTimeLeft(d.VisualStartTime), a == Date.MinValue ? d._setOption("AnchorTime", d.VisualStartTime) : d._setOption("AnchorTime", a)) : (a = a._tracker.GetNextTaskStartTimeRight(d.VisualEndTime), a == Date.MinValue ? d._setOption("AnchorTime", d.VisualEndTime) : d._setOption("AnchorTime", a));
            b.preventDefault();
            return !1
        },
        addToViewModel: function(b, a) {
            this.options.KnockoutObjectName && (this.options.KnockoutObjectName[b] = a)
        },
        removeFromViewModel: function() {
            for (var b =
                0, a = this.options.RowCount, d = "Row" + a + "Task" + b, g = this.options.KnockoutObjectName[d]; g;) delete this.options.KnockoutObjectName[d], b++, d = "Row" + a + "Task" + b, g = this.options.KnockoutObjectName[d]
        },
        applayBindings: function(b, a) {
            a ? ko.applyBindingsToDescendants(b, a) : ko.applyBindingsToDescendants(b)
        },
        TaskCollectionChange: function() {},
        _drawTaskBar: function() {
            this._updateMaxOverlappingTasksCount();
            this._destory();
            var c = this.options;
            b.isFunction(this.tasksCollection) && (this.tasksCollection = this.tasksCollection());
            null != this.ItemTemplate && this.taskCollectionArray(this.tasksCollection) && (this.isTemplateDefined(this.tasksCollection, c) ? (this._bindTaskCollectionChange(!0), this.tasksCollection.length && this._createNewTaskbars()) : (c = this._createNewTaskbar(this.tasksCollection._data, this.currentUniqueTaskSuffix++), this.TaskListControl.append(c)));
            this.options.GanttChart.options.Parent.RedrawChartRow = this.RedrawTaskRow
        },
        taskCollectionArray: function(b) {
            return b._data || b instanceof Array ? !0 : !1
        },
        isTemplateDefined: function(b,
            a) {
            return b instanceof Array && (a.TasksListProperty || a.ParentTasksListProperty) ? !0 : !1
        },
        templateCache: {},
        taskTemplate: function(c) {
            var a = null,
                a = null == this.templateCache[this.ItemTemplate] ? RadiantQ.Template(this.ItemTemplate) : this.templateCache[this.ItemTemplate];
            c = b.trim(a(c));
            this.templateCache[this.ItemTemplate] = a;
            a = b(c);
            a.hasClass("rq-gc-parentBar") || a.addClass("taskbar");
            return a
        },
        _bindTaskCollectionChange: function(c) {
            function a(a, b) {
                a.type ? d(a.type, null != b ? b.items : b) : "Add" == b.Action ? d("insert",
                    b.NewItems) : "Remove" == b.Action && d("remove", b.OldItems)
            }

            function d(a, b) {
                if ("insert" == a)
                    if (g.options.OverlappedTasksRenderingOptimization == RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight) g.RedrawTaskRow();
                    else {
                        for (var d = document.createDocumentFragment(), c = 0; c < b.length; c++) {
                            var e = g._createNewTaskbar(b[c], g.currentUniqueTaskSuffix++);
                            null != e && d.appendChild(e[0])
                        }
                        g.TaskListControl.append(d)
                    }
                    "Reset" == a && (g.TaskListControl.empty(), g.tasksCollection.length && g._createNewTaskbars());
                if ("remove" ==
                    a)
                    for (c = 0; c < b.length; c++) {
                        for (var e = b[c], d = [], m = 0; m < g.blocks.length; m++) {
                            var p = g.blocks[m],
                                q = p.entities.FirstOrDefaultEndity(e);
                            if (null != q && (p.entities.remove(q), !d.containsValue(p))) {
                                d.push(p);
                                break
                            }
                        }
                        e = g.TasksList;
                        for (m = 0; m < e.length; m++)
                            if (e[m][0].DataContext == b[c]) {
                                e[m].remove();
                                e.splice(m, 1);
                                break
                            }
                        g.options.OverlappedTasksRenderingOptimization == RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight && g._blockIntact(d)
                    }
                try {
                    g.options.KnockoutObjectName && g.applayBindings(g.options.KnockoutObjectName)
                } catch (s) {}
                g._updateBrowseToTaskCuesStates()
            }
            var g = this;
            if (null == this.onSourceUpdated || void 0 == this.onSourceUpdated) this.onSourceUpdated = a;
            c ? this.tasksCollection.CollectionChanged ? this.tasksCollection.CollectionChanged.subscribe(this.onSourceUpdated) : b.observable(this.tasksCollection).bind("insert remove replaceAll", this.onSourceUpdated) : this.tasksCollection.CollectionChanged ? this.tasksCollection.CollectionChanged.unsubscribe(this.onSourceUpdated) : b.observable(this.tasksCollection).unbind("insert remove replaceAll", this.onSourceUpdated)
        },
        RedrawTaskRow: function() {
            this._updateItemsSourceAndTemplates();
            this._bindTaskCollectionChange(!1);
            this.TasksList = [];
            this.TaskListControl.empty();
            this.TaskListControl.remove();
            this._unsubscribeEvents();
            this.refresh();
            this.options.KnockoutObjectName && this.applayBindings(this.options.KnockoutObjectName, this.element[0])
        },
        _createNewTaskbar: function(b, a) {
            var d = this.options,
                g = null,
                f = !1;
            if (d.KnockoutObjectName) try {
                for (var e in d.KnockoutObjectName)
                    if (0 == e.indexOf("Row") && this.options.KnockoutObjectName[e] === b) {
                        g = e;
                        f = !0;
                        break
                    }!1 == f && (g = "Row" + d.RowCount + "Task" + a, this.addToViewModel(g,
                    b))
            } catch (k) {}
            f = this.ItemTemplate;
            this.ItemTemplate = this.ItemTemplate.replace(/RQDataContext/g, g);
            g = this.taskTemplate(b);
            e = null;
            if (e = g) {
                var n = !1,
                    n = "rq-gc-taskbar-label" == e.className;
                !1 == n && (n = "label" == e.className);
                !1 == n && (g.addClass("taskItemControl"), b.nodeType = function() {}, n = g.eq(0)[this.getChildWidgetName("taskbar")]({
                    baseTimeUnitWidth: 40,
                    GanttChart: d.GanttChart,
                    Parent: {
                        element: this
                    },
                    ApplyBarWidthOptimization: !0,
                    OverlappedTasksRenderingOptimization: d.OverlappedTasksRenderingOptimization,
                    ComputedStartTime: d.GanttChart.options.ComputedStartTime,
                    Data: b,
                    IsParentTypeRow: d.Data.IsParentType(),
                    TaskStartTime: d.TaskStartTime,
                    TaskEndTime: d.TaskEndTime,
                    ParentTaskStartTime: d.ParentTaskStartTime,
                    ParentTaskEndTime: d.ParentTaskEndTime,
                    TaskTooltipTemplate: d.TaskTooltipTemplate,
                    MovingInfoPopup: d.MovingInfoPopup,
                    TimeIndicatorLineOption: d.TimeIndicatorLineOption,
                    FlexyGantt: d.FlexyGantt,
                    ResizeInfoPopup: d.ResizeInfoPopup,
                    DataSource: d.Data,
                    KnockoutObjectName: d.KnockoutObjectName,
                    DragThumb: d.DragThumb,
                    ResizeThumb: d.ResizeThumb,
                    StartResizeThumb: d.StartResizeThumb,
                    UseRQModelBinder: d.UseRQModelBinder,
                    EnableAutoAdjustForSchedule: d.EnableAutoAdjustForSchedule,
                    CanDrawDependency: d.CanDrawDependency,
                    MinimumWidthForParentBar: d.MinimumWidthForParentBar
                }), b.nodeType = null, this.options.UseRQModelBinder && RadiantQ.Bind(n, b), this.TasksList.push(n))
            }
            this.ItemTemplate = f;
            this.raiseRowBgAndFgTemplate(d.GanttChart.options, this.element, d.GanttChart, d.Data);
            return e ? g : null
        },
        _createNewTaskbars: function(b) {
            var a = document.createDocumentFragment();
            b || (b = this.tasksCollection);
            for (var d =
                0; d < b.length; d++) {
                var g = this._createNewTaskbar(b[d], this.currentUniqueTaskSuffix);
                null != g && a.appendChild(g[0]);
                this.currentUniqueTaskSuffix++
            }
            this.TaskListControl.append(a);
            this.options.OverlappedTasksRenderingOptimization == RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight && (this._destory(), this._processTasksListForOverlap())
        },
        _refreshUIEventHandler: null,
        raiseRowBgAndFgTemplate: function(b, a, d, g) {
            this._refreshUIEventHandler && this._refreshUIEventHandler.Dispose();
            this._refreshUIEventHandler =
                d.RefreshUIEvent.subscribe(function() {
                    this.raiseRefreshRowBgAndFgEvent(b, a, d, g)
                }, this);
            this.raiseRefreshRowBgAndFgEvent(b, a, d, g)
        },
        raiseRefreshRowBgAndFgEvent: function(c, a, d, g) {
            var f = g.RowHeight || c.RowHeight;
            if (c.EnableCustomRowBackground) {
                var e = b("#bgContainer", a);
                0 == e.length ? (e = b('<div id="bgContainer" style="height:inherit; position:absolute; width:100%;"></div>'), a.prepend(e)) : e.empty();
                d.RefreshRowBackground.raise(e, {
                    GanttChart: d,
                    Data: g
                })
            }
            c.EnableCustomRowForeground && (c = b("#fgContainer", a), 0 ==
                c.length ? (c = b('<div id="fgContainer" style="height:' + f + 'px; position:absolute; width:100%; z-index:100; pointer-events:none;"></div>'), a.prepend(c)) : c.empty(), d.RefreshRowForeground.raise(c, {
                    GanttChart: d,
                    Data: g
                }))
        },
        _overlapTimer: null,
        _processTasksListForOverlap: function() {
            if (this.TasksList.length) {
                for (var b = 0; b < this.TasksList.length; b++) {
                    var a = this.TasksList[b].data("TaskBar");
                    a && this._onNewEntityAdded(a)
                }
                this._computeIndicesAndHeight()
            }
            this._updateMaxOverlappingTasksCount()
        },
        _computeIndicesAndHeight: function() {
            for (var b =
                0; b < this.blocks.length; b++) this.blocks[b].ComputeIndicesAndHeight()
        },
        _destroy: function() {
            this._refreshUIEventHandler && this._refreshUIEventHandler.Dispose();
            this._refreshUIEventHandler = null;
            this.element.empty();
            this._bindTaskCollectionChange(!1);
            this.blocks = [];
            this.element.data("TasksListControl", null);
            this._unsubscribeEvents();
            null != this.options.KnockoutObjectName && this.removeFromViewModel();
            !1 == this.options.IsPrinting && this.options.Data.ChartRow(null)
        },
        _destory: function() {
            this.blocks = []
        },
        _unsubscribeEvents: function() {
            this.options.GanttChart &&
                (this.options.GanttChart.ViewportTimeRangeChanged.unsubscribe(this._ganttChart_ViewportTimeRangeChanged, this), this.options.GanttChart.BeforeChartHZScroll.unsubscribe(this._GanttChart_BeforeChartHZScroll, this))
        },
        _updateItemsSourceAndTemplates: function() {
            var b = this.options;
            b.IsParentTypeRow = b.Data.IsParentType();
            this.ItemTemplate = b.IsParentTypeRow ? b.ParentTaskTemplate : b.TaskTemplate;
            b.Data.IsParentType() ? null != b.ParentTasksListProperty ? b.FlexyGantt.UseTimeRangeFilteredTasksInRows() ? this.tasksCollection =
                RadiantQ.FlexyGantt.TimeRangeFilteredItems(b.FlexyGantt, b.Data._data[b.ParentTasksListProperty], b.ParentTaskStartTime, b.ParentTaskEndTime) : this.tasksCollection = b.Data._data[b.ParentTasksListProperty] : b.FlexyGantt.UseTimeRangeFilteredTasksInRows() ? this.tasksCollection = RadiantQ.FlexyGantt.TimeRangeFilteredItems(b.FlexyGantt, b.Data, b.ParentTaskStartTime, b.ParentTaskEndTime) : this.tasksCollection = b.Data : null != b.TasksListProperty ? b.FlexyGantt.UseTimeRangeFilteredTasksInRows() ? (this.tasksCollection = new RadiantQ.FlexyGantt.TimeRangeFilteredItems(b.FlexyGantt,
                    b.Data._data[b.TasksListProperty], b.TaskStartTime, b.TaskEndTime), this.tasksCollection.CollectionChanged.subscribe(this._taskCollectionChange, this)) : this.tasksCollection = b.Data._data[b.TasksListProperty] || [] : b.FlexyGantt.UseTimeRangeFilteredTasksInRows() ? (this.tasksCollection = new RadiantQ.FlexyGantt.TimeRangeFilteredItems(b.FlexyGantt, b.Data, b.TaskStartTime, b.TaskEndTime), this.tasksCollection.CollectionChanged.subscribe(this._taskCollectionChange, this)) : this.tasksCollection = b.Data || [];
            "function" ==
                typeof this.tasksCollection && (this.tasksCollection = this.tasksCollection());
            this._initBrowseToCueTracker()
        },
        _taskCollectionChange: function(b, a) {
            "insert" == b.type && (this.tasksCollection = a.items, this._createNewTaskbars());
            if ("remove" == b.type)
                for (var d = 0; d < this.TasksList.length; d++) this.TasksList[d][0].DataContext == a.items[0] && this.TasksList[d].remove();
            try {
                this.options.KnockoutObjectName && this.applayBindings(this.options.KnockoutObjectName, this.element[0])
            } catch (g) {}
        },
        _updateMaxOverlappingTasksCount: function() {
            if (this.options.OverlappedTasksRenderingOptimization ==
                RadiantQ.FlexyGantt.OverlappedTasksRenderingOptimization.ShrinkHeight) {
                for (var b = 1, a = 0; a < this.blocks.length; a++) var d = this.blocks[a].GetRowCount(),
                b = d > b ? d : b;
                this.options.Data && (!1 == this.options.IsPrinting ? this.options.Data.MaxOverlappingBlocksRowCount(b) : this._updateChartRowHeight(this.options.Data))
            }
        },
        _updateChartRowHeight: function(c, a) {
            var d = b(c.TableRow()).height();
            this.element.height(d - 1);
            this.element.parent().height(d)
        },
        _onNewEntityAdded: function(b) {
            var a = [];
            b.Height = parseInt(this.element[0].style.height);
            for (var d = 0; d < this.blocks.length; d++) this.blocks[d].IsOverlapping(b, !0) && a.push(this.blocks[d]);
            if (0 == a.length) b = new OverlappingBlock(b), this.blocks.push(b);
            else if (1 == a.length) a[0].AddEntity(b), b = a[0];
            else {
                b = new OverlappingBlock(b);
                for (d = 0; d < a.length; d++) {
                    for (var g = a[d], f = 0; f < g.entities.length; f++) b.AddEntity(g.entities[f]);
                    this.blocks.removeByValue(g)
                }
                this.blocks.push(b)
            }
            return b
        },
        _blockIntact: function(b) {
            if (0 < b.length) {
                var a = [];
                b = [].concat(b);
                for (var d = [], g = 0; g < b.length; g++) {
                    var f = b[g];
                    this.blocks.removeByValue(f);
                    for (var e = 0; e < f.entities.length; e++) {
                        var k = f.entities[e];
                        a.push(k);
                        k = this._onNewEntityAdded(k);
                        d.containsValue(k) || d.push(k)
                    }
                }
                for (g = 0; g < d.length; g++) d[g].ComputeIndicesAndHeight()
            }
            this._updateMaxOverlappingTasksCount()
        },
        _getIntersectingBlock: function(b, a) {
            for (var d = null, g = 0; g < this.blocks.length; g++)
                if (this.blocks[g].IsOverlapping(b, !1)) {
                    d = this.blocks[g];
                    break
                }
            return d
        },
        _getIntersectingBlocks: function(b) {
            for (var a = [], d = 0; d < this.blocks.length; d++) this.blocks[d].IsOverlapping(b, !1) && a.push(this.blocks[d]);
            return a
        },
        RemoveEntity: function(b, a) {
            var d = b.entities.removeByValue(a);
            0 == b.entities.length && this.RemoveBlock(b);
            return d
        },
        RemoveBlock: function(b) {
            return this.blocks.removeByValue(b)
        },
        _setOption: function(b, a) {
            switch (b) {
                case "viewStartTime":
                case "viewEndTime":
                    this._updateStartAndEnd()
            }
            this.widgetBaseSetOption.apply(this, arguments)
        },
        _updateStartAndEnd: function() {
            for (var c = 0; c < this.TasksList.length; c++) b(this.TasksList[c])[this.getChildWidgetName("taskbar")]({
                viewStartTime: this.options.viewStartTime,
                viewEndTime: this.options.viewEndTime
            })
        },
        _tracker: null,
        _cueTemplatePropertyChanged: function(b, a) {
            b._initBrowseToCueTracker()
        },
        isArray: function(b) {
            return b instanceof Array
        },
        _initBrowseToCueTracker: function() {
            var b = this.options.TasksListProperty;
            if (null != this.options.TaskBarBrowseToCueLeftTemplate || null != this.options.TaskBarBrowseToCueRightTemplate) {
                null != this._tracker && this._tracker.Dispose();
                var a = this.options.Data._data;
                this.options.IsParentTypeRow || null == b || (a = this.options.Data._data[b], a = "function" ==
                    typeof a ? a() : a);
                a && (!1 == a instanceof RadiantQ.RQ_ObservableCollection && (!1 == this.isArray(this.tasksCollection) && window.console && (a = [a]), new RadiantQ.RQ_ObservableCollection(a)), b = this.options.IsParentTypeRow ? this.options.ParentTaskStartTime : this.options.TaskStartTime, RadiantQ.FlexyGantt.TasksPositionTracker && null != b && (this._tracker = new RadiantQ.FlexyGantt.TasksPositionTracker(this.options.FlexyGantt, a, {
                    Property: b
                })))
            } else null != this._tracker && this._tracker.Dispose()
        },
        _ganttChart_ViewportTimeRangeChanged: function(b,
            a) {
            this.BrowseToCueLeft = this.options.GanttChart.GanttChart.scrollLeft();
            this.BrowseToCueRight = this.BrowseToCueLeft + this.options.GanttChart.GanttChart[0].clientWidth - 30;
            this._updateBrowseToTaskCuesStates()
        },
        _updateBrowseToTaskCuesStates: function() {
            this.BrowseToTaskCueLeftVisibility = null != this.options.TaskBarBrowseToCueRightTemplate && null != this._tracker && this._tracker.AreTasksAvailableBefore(this.options.GanttChart.VisualStartTime) ? "block" : "none";
            this.BrowseToTaskCueRightVisibility = null != this.options.TaskBarBrowseToCueLeftTemplate &&
                null != this._tracker && this._tracker.AreTasksAvailableAfter(this.options.GanttChart.VisualEndTime) ? "block" : "none";
            this.BrowseToTaskCueLeft && this.BrowseToTaskCueLeft.css({
                "margin-left": this.BrowseToCueLeft,
                display: this.BrowseToTaskCueLeftVisibility
            });
            this.BrowseToTaskCueRight && ("block" == this.BrowseToTaskCueLeftVisibility && (this.BrowseToCueRight = this.options.GanttChart.GanttChart[0].clientWidth - 60), this.BrowseToTaskCueRight.css({
                "margin-left": this.BrowseToCueRight,
                display: this.BrowseToTaskCueRightVisibility
            }))
        },
        UpdateItemForCue: function(b, a, d) {
            null != this._tracker && (this._tracker.UpdateTimes(a, d), this._updateBrowseToTaskCuesStates())
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e) {
    var b = RadiantQ.Gantt.Utils.TimeComputingUtils,
        c = {
            DependencyViews: null,
            options: {
                name: "GanttChart",
                TimeRangeHighlightBehavior: null,
                BottomTwoHeaders: null,
                TimeScaleHeaders: null,
                ComputedStartTime: null,
                ComputedEndTime: null,
                TimeIndicatorLineOption: RadiantQ.Gantt.TimeIndicatorLines.None,
                ProvideWidthForMilestoneShape: null,
                BaseTimeUnitWidth: null,
                BaseTimeScaleType: null,
                AnchorTime: null,
                ViewWidth: 2E3,
                ResizeToFit: !1,
                ZoomOptions: null,
                ScrollOptions: null,
                CustomChartBackgroundRanges: null,
                BaseTimeUnitWidthMaximum: null,
                BaseTimeUnitWidthMaximum: null,
                MinTimeUnitWidthForHeaderVisibility: null,
                OverlappedTasksRenderingOptimization: null,
                TaskItemTemplate: null,
                ParentTaskItemTemplate: null,
                ProgressBarTemplate: null,
                TaskBarBackgroundTemplate: null,
                TaskBarAdornerTemplate: null,
                TaskStartTime: null,
                ParentTaskStartTime: null,
                TaskEndTime: null,
                ParentTaskEndTime: null,
                TasksListProperty: null,
                ParentTasksListProperty: null,
                FlatItemsSource: null,
                RowHeight: null,
                TaskBarHeight: null,
                TaskTooltipTemplate: null,
                ConnectingInfoPopup: null,
                ResizeInfoPopup: null,
                MovingInfoPopup: null,
                EnablePagerButtonLeft: !0,
                EnablePagerButtonRight: !0,
                BeforePagingGanttChart: null,
                SpecialLineInfos: null,
                Parent: null,
                KnockoutObjectName: null,
                DependencyLineColor: null,
                DependencyListSource: null,
                GanttDependencyViews: null,
                WorkTimeSchedule: null,
                GanttType: null,
                EnableAlternativeRowBackground: !0,
                TaskBarBrowseToCueLeftTemplate: null,
                TaskBarBrowseToCueRightTemplate: null,
                IsPrinting: !1,
                UseChartVirtualization: !1,
                OnTaskBarLoad: null,
                OnDependencyLineLoad: null,
                ShowContextMenuOnTouchTap: null,
                RowRenderingScheduleBinding: null,
                EnableCustomRowBackground: !1,
                EnableCustomRowForeground: !1,
                ShowVerticalScrollBar: !1,
                EnableAutoAdjustForSchedule: !0,
                CanDrawDependency: !1,
                MileStoneTemplate: null,
                MinimumWidthForParentBar: 1,
                EnablePagingOnAutoScroll: !1,
                CustomBarShiftOnMove: null
            },
            VSB: null,
            _canUpdate: !0,
            lave: null,
            TaskOnMouseHover: null,
            TaskViewOnMouseHover: null,
            CanUpdate: function(a, b) {
                if (void 0 == a) return this._canUpdate;
                a != this._canUpdate && (this._canUpdate = a) && (this.UpdateGanttComponents(b), _canUpdate = !0)
            },
            GetRowFromData: function(a) {
                a = a.uid;
                a = e(".rq-gc-rowsParent-table", this.element).find('tr[uid="' + a + '"]');
                return a.length ? a : null
            },
            GetDataFromRow: function(a) {
                a = e(a).data("uid");
                for (var b = 0; b < this.options.FlatItemsSource.length; b++) {
                    if (this.options.FlatItemsSource[b].uid == a) return this.options.FlatItemsSource[b];
                    null
                }
            },
            OnAnchorTimeChanged: function() {
                this.triggerEvent("AnchorTimeChanged")
            },
            LoadingRow: function(a) {
                this.element.trigger("LoadingRow", [a])
            },
            ViewableDependencyViews: [],
            RefreshUIEvent: new ObjectEvent("RefreshUIEvent"),
            RefreshRowBackground: new ObjectEvent("RefreshRowBackground"),
            RefreshRowForeground: new ObjectEvent("RefreshRowForeground"),
            TriggerRefreshUI: function(a) {
                this.triggerEvent("RefreshUi", this, a);
                this.RefreshUIEvent.raise(this, a)
            },
            UpdateGanttComponents: function(a) {
                this.TriggerRefreshUI({
                    options: this.options,
                    isInit: !0,
                    ForceToReDrawRows: a
                });
                this.ScrollViewerElement_LayoutUpdated();
                this.options.Parent.options.ShowGridTable && (a = this.options.Parent.GetGanttTable()) && a.showTableBody && a.showTableBody()
            },
            BeginUpdate: function() {
                this.CanUpdate(!1)
            },
            EndUpdate: function(a) {
                this.CanUpdate(!0,
                    a)
            },
            _validateViewWidth: function() {
                if (!this.options.ResizeToFit && (300 > this.options.ViewWidth || 12E3 < this.options.ViewWidth)) throw "GanttChart.ViewWidth has to be in the range 300 to 12000";
            },
            headerZoomTracker: null,
            headerScrollTracker: null,
            VisualStartTime: null,
            VisualEndTime: null,
            ViewportTimeRangeChanged: null,
            BeforeChartHZScroll: null,
            _create: function() {
                this.RefreshUIEvent = new ObjectEvent("RefreshUIEvent");
                this.ViewportTimeRangeChanged = new ObjectEvent("ViewportTimeRangeChanged");
                this.BeforeChartHZScroll =
                    new ObjectEvent("BeforeChartHZScroll");
                this.element.addClass("rq-ganttChart");
                var a = this.$GanttChart = e('<div id="' + this._createUniqueID("GanttChart") + '" class="rq-gc-topDiv ' + window.radiantQclasses.chartBackground + '" style="height:100%; width:100%;"/>');
                this.element.append(a);
                this.GanttChart = a;
                this.element.addClass("ui-widget-content");
                this.initialization();
                var b = this.$ChartArea = e('<div id="' + this._createUniqueID("rq-gc-chartArea") + '" class="rq-gc-chartArea" style="width:100%; height:100%;position:relative;"/>');
                this.element.data("GanttChart", this);
                a.append(b);
                !1 == this.options.IsPrinting && this.initChartScrollBar();
                var c = this.$TimeSpanHeader = e('<div id="' + this._createUniqueID("timeSpanHeader") + '" class="timeSpanHeader"/>');
                b.append(c);
                c = e('<div id="' + this._createUniqueID("rq-gc-chartArea-div") + '" class="rq-gc-chartArea-div" style="width:' + this.options.ViewWidth + 'px; height:100%;position:relative; overflow:hidden;"/>');
                b.append(c);
                b = this.$TaskBarContainer = e('<div id="' + this._createUniqueID("rq-gc-viewsContainer-div") +
                    '" class="rq-gc-viewsContainer-div" style="width:100%;position:absolute; height:inherit;"/>');
                c.append(b);
                this.$GanttChartCustomRangeBackgroundDIV = e('<div id="' + this._createUniqueID("rq-gc-customRange-background") + '" class="rq-gc-customRange-background" style="position:absolute;height:inherit;"/>').appendTo(c);
                this.$GanttChartBackgroundDiv = e('<div id="' + this._createUniqueID("GanttChartBackgroundDiv") + '" class="GanttChartBackgroundDiv" style="position:absolute;width:100%;height:inherit;"/>').appendTo(c);
                this.$SpecialLinesDiv = e('<div id="' + this._createUniqueID("SpecialLinesDiv") + '" class="SpecialLinesDiv" style="position:absolute;height: inherit;"/>').appendTo(c);
                a.css("overflow", "hidden");
                !1 == this.options.IsPrinting && this.ApplyDockPanelSettings(this.element);
                this.CanUpdate(!1);
                !1 == this.options.IsPrinting && this.options.Parent.OnChartTemplateApplied(this);
                //this._createLave();
                this.ViewableDependencyViews = []
            },
            initChartScrollBar: function() {
                var a = e("<div class='rq-gc-chartVSBContainer' style='float:left;'><div class='rq-gc-SB-header ui-widget-header'></div></div>"),
                    b = e("<div class='rq-gc-chart-VScrollBar'><div class='rq-gc-chart-scrollContent' style='width: 1px;'></div></div>");
                a.append(b);
                this.element.append(a);
                !1 == this.options.ShowVerticalScrollBar && a.css("display", "none")
            },
            _onVerticalScroll: !1,
            _$chartVSBContainer: null,
            _vsbScrollHandler: null,
            syncVerticalScrollBar: function() {
                function a(a, b) {
                    var d = b.scrollTop();
                    switch (a.which) {
                        case 38:
                            b.scrollTop(d - 50);
                            break;
                        case 40:
                            b.scrollTop(d + 50);
                            break;
                        case 33:
                            var c = b[0].clientHeight;
                            b.scrollTop(d - c);
                            break;
                        case 34:
                            c = b[0].clientHeight,
                            b.scrollTop(d + c)
                    }
                }
                if (!this.options.IsPrinting && !this._onVerticalScroll && void 0 != this.VSB) {
                    var b = this.options.Parent.element,
                        c = this.getGridTBodyParent(b),
                        f = this.$GanttChart,
                        h = e(".rq-gc-chartArea-div", f),
                        k = this.$rowsParent;
                    this._$chartVSBContainer || (this._$chartVSBContainer = e(".rq-gc-chartVSBContainer", b));
                    var n = this._$chartVSBContainer,
                        l = e(".rq-gc-chart-VScrollBar", n),
                        m = e(".rq-gc-chart-HScrollBar-content", this.HScrollBar),
                        p = e(".rq-gc-pager-left-Button", this.HDockPanel),
                        q = e(".rq-gc-pager-right-Button",
                            this.HDockPanel),
                        s = e("div.rq-gc-dependencysParent", f),
                        r = this.VSB.$actualContent,
                        t = e(".rq-gc-chart-scrollContent", l),
                        x = this.options.ShowVerticalScrollBar && k[0].scrollHeight > k[0].clientHeight,
                        w = this.element.outerWidth(),
                        u = this.options.ViewWidth,
                        q = p.outerWidth(!0) + q.outerWidth(!0),
                        p = parseInt(k.css("margin-top") || "0");
                    if (!1 == x) f.width(w), n.css("display", "none"), !1 == this.options.ResizeToFit ? m.width(u - q) : m.width(0), h = h.height() - this.HDockPanel.outerHeight() - p, k.height(h), s.height(h);
                    else {
                        var v = l.outerWidth() +
                            2;
                        f.width(w - v);
                        n.css("display", "block");
                        !1 == this.options.ResizeToFit ? m.width(u - q + v) : m.width(0);
                        n = e(".timeSpanHeader", b);
                        b = e(".rq-gc-SB-header", b);
                        m = n.outerHeight(!0);
                        n = m - n.height();
                        b.height(m + n);
                        0 < f.length && (h = h.height() - this.HDockPanel.outerHeight() - p, l.height(h), k.height(h), s.height(h));
                        this._vsbScrollHandler && (this._vsbScrollHandler.Dispose(), this._vsbScrollHandler = null);
                        0 < c.length && c.unbind(".syncGridVerticalBar");
                        0 < l.length && l.unbind(".syncChartVerticalBar");
                        0 < k.length && k.unbind(".syncGridVerticalBar");
                        if (x) {
                            var C = this,
                                z = 0,
                                y = 0;
                            0 < f.length && this.VSB && (this._vsbScrollHandler = this.VSB.OnScroll.subscribe(function(a, b, d) {
                                C.options.Parent.PreventDefaultFns || (y = k.scrollTop(), y != z && l.scrollTop(y))
                            }), l.bind("scroll.syncChartVerticalBar", function() {
                                if (this.options.Parent.PreventDefaultFns) return !1;
                                this._onVerticalScroll = !0;
                                z = l.scrollTop();
                                y != z && k.scrollTop(z);
                                this._onVerticalScroll = !1
                            }.bind(this)), k.attr("tabindex", "1"), k.bind("keydown.syncGridVerticalBar", function(b) {
                                this.options.Parent.PreventDefaultFns ||
                                    (a(b, f), f.focus())
                            }.bind(this)));
                            if (c) {
                                var B = null;
                                c.bind("mousewheel.syncGridVerticalBar", function(a, b) {
                                    if (this.options.Parent.PreventDefaultFns) return !1;
                                    null != B && clearTimeout(B);
                                    B = setTimeout(function() {
                                        var a = c.scrollTop();
                                        c.scrollTop(a - 50 * Math.round(b));
                                        B = null
                                    }, 0)
                                }.bind(this));
                                c.attr("tabindex", "1");
                                c.bind("keydown.syncGridVerticalBar", function(b) {
                                    this.options.Parent.PreventDefaultFns || 0 < e(".editor", c).length || (a(b, c), c.focus())
                                }.bind(this))
                            }
                        }!1 == this.options.UseChartVirtualization && (x = this.VSB.element.height(),
                            this.VSB.UpdateScrollContentHeight(x))
                    }
                    r = r.height();
                    t.height(r);
                    s.children(".rq-gc-dependencyControl").height(r)
                }
            },
            SyncChartScrollBarWith: function(a, b) {
                this.VSB.SyncScrollEventWith(a, b, this.options.Parent.VerticalScrollEvent)
            },
            getGridTBodyParent: function(a) {
                return e(".ui-grid-body", a)
            },
            _createUniqueID: function(a) {
                return this.element[0].id + "_" + a
            },
            _getUniqueSelectorIdByID: function(a) {
                return "#" + this._createUniqueID(a)
            },
            ganttChart: null,
            refreshDockPanel: function() {
                var a = this,
                    b = a.options.Parent.element;
                this.getGridTBodyParent(b);
                e(".rq-gc-chart-scrollBar", b);
                var c = e(".rq-gc-pager-left-Button", a.element),
                    f = e(".rq-gc-pager-right-Button", a.element);
                setTimeout(function() {
                    var b = a.element.width();
                    a.HScrollBar.width(b);
                    var d = c.outerWidth(!0) + f.outerWidth(!0);
                    a.HScrollBar.width(b - d);
                    a.syncVerticalScrollBar();
                    (a.VisualStartTime || a.options.ResizeToFit) && a.ScrollViewerElement_LayoutUpdated()
                }, 200)
            },
            SyncChartScrollLeft: function() {
                var a = this.$GanttChart.scrollLeft(),
                    b = this.HScrollBar.scrollLeft();
                a != b && this.$GanttChart.scrollLeft(b)
            },
            GetBTSTToRenderAgainst: function() {
                return this.options.BaseTimeScaleType < ns_gantt.TimeScaleType.Days ? null != this.options.BottomTwoHeaders && 0 < this.options.BottomTwoHeaders.length && this.options.BottomTwoHeaders[0].Type == ns_gantt.TimeScaleType.Days ? ns_gantt.TimeScaleType.Days : this.options.BaseTimeScaleType : this.options.BaseTimeScaleType
            },
            GetBTUWToRenderAgainst: function() {
                return this.options.BaseTimeScaleType < ns_gantt.TimeScaleType.Days ? null != this.options.BottomTwoHeaders && 0 < this.options.BottomTwoHeaders.length &&
                    this.options.BottomTwoHeaders[0].Type == ns_gantt.TimeScaleType.Days ? this.options.BaseTimeScaleType == ns_gantt.TimeScaleType.Hours ? Math.round(24E3 * this.options.BaseTimeUnitWidth) / 1E3 : Math.round(144E4 * this.options.BaseTimeUnitWidth) / 1E3 : this.options.BaseTimeUnitWidth : this.options.BaseTimeUnitWidth
            },
            _ganttChartEvents: function() {
                var a = this;
                e(window).resize(function() {
                    a.refreshDockPanel()
                });
                var b = this.HScrollBar,
                    c = this.$GanttChart,
                    f = e(".rq-gc-pager-left-Button", this.HDockPanel),
                    h = e(".rq-gc-pager-right-Button",
                        this.HDockPanel),
                    k = e(".rq-gc-pager-left-arrow", this.HDockPanel),
                    n = e(".rq-gc-pager-right-arrow", this.HDockPanel);
                b.height();
                var l = !0;
                b.scroll(function(f) {
                    f = c.scrollLeft();
                    var e = b.scrollLeft();
                    f == e || 1 == b[0].offsetHeight && !l || (a.BeforeChartHZScroll.raise(this, {
                        diff: e - f,
                        value: f,
                        newValue: e
                    }), c.scrollLeft(e))
                });
                c.scroll(function() {
                    c.scrollLeft() == b.scrollLeft() || 1 == b[0].offsetHeight && !l || (l = !1, b.scrollLeft(c.scrollLeft()));
                    a.ScrollViewerElement_LayoutUpdated()
                });
                f.bind("touchstart", function(b) {
                    a.PagerLeftBtnOnMouseDown(a,
                        k)
                });
                f.bind("touchEnd", function(b) {
                    a.PagerLeftBtnOnMouseUp(a, k)
                });
                f.mousedown(function(b) {
                    a.PagerLeftBtnOnMouseDown(a, k)
                });
                f.mouseup(function(b) {
                    a.PagerLeftBtnOnMouseUp(a, k)
                });
                h.bind("touchstart", function(b) {
                    !0 != a.options.Parent.PreventDefaultFns && a.PagerRightBtnOnMouseDown(a, n)
                });
                h.bind("touchEnd", function(b) {
                    !0 != a.options.Parent.PreventDefaultFns && a.PagerRightBtnOnMouseUp(a, n)
                });
                h.mousedown(function(b) {
                    !0 != a.options.Parent.PreventDefaultFns && a.PagerRightBtnOnMouseDown(a, n)
                });
                h.mouseup(function(b) {
                    !0 !=
                        a.options.Parent.PreventDefaultFns && a.PagerRightBtnOnMouseUp(a, n)
                });
                h.hover(function() {
                    a.options.EnablePagerButtonRight && n.addClass("rq-gc-pager-right-arrow-hover")
                }, function() {
                    n.removeClass("rq-gc-pager-right-arrow-hover")
                });
                f.hover(function() {
                    a.options.EnablePagerButtonLeft && k.addClass("rq-gc-pager-left-arrow-hover")
                }, function() {
                    k.removeClass("rq-gc-pager-left-arrow-hover")
                })
            },
            PagerLeftBtnOnMouseDown: function(a, b) {
                if (!0 != a.options.Parent.PreventDefaultFns && a.options.EnablePagerButtonLeft) {
                    b.removeClass("rq-gc-pager-left-arrow-hover");
                    b.addClass("rq-gc-pager-left-arrow-click");
                    var c = !1;
                    null != a.options.BeforePagingGanttChart && (c = a.options.BeforePagingGanttChart("LeftPagerButton", b, a));
                    c || a.PageLeft(!0)
                }
            },
            PagerLeftBtnOnMouseUp: function(a, b) {
                a.options.EnablePagerButtonLeft && (b.removeClass("rq-gc-pager-left-arrow-click"), b.addClass("rq-gc-pager-left-arrow-hover"))
            },
            PagerRightBtnOnMouseDown: function(a, b) {
                if (!0 != a.options.Parent.PreventDefaultFns && a.options.EnablePagerButtonRight) {
                    b.removeClass("rq-gc-pager-right-arrow-hover");
                    b.addClass("rq-gc-pager-right-arrow-click");
                    var c = !1;
                    null != a.options.BeforePagingGanttChart && (c = a.options.BeforePagingGanttChart("RightPagerButton", b, a));
                    c || a.PageRight(!0)
                }
            },
            PagerRightBtnOnMouseUp: function(a, b) {
                a.options.EnablePagerButtonRight && (b.removeClass("rq-gc-pager-right-arrow-click"), b.addClass("rq-gc-pager-right-arrow-hover"))
            },
            GetBarRenderStartTime: function(a) {
                this.ApplyBarWidthOptimization = !0;
                var b = this.ConvertXToTime(-10);
                return a.isLessThan(b) ? b : a
            },
            GetBarRenderEndTime: function(a) {
                this.ApplyBarWidthOptimization = !0;
                var b = this.ConvertXToTime(this.options.ViewWidth +
                    10);
                return a.isGreaterThan(b) ? b : a
            },
            ScrollViewerElement_LayoutUpdated: function() {
                var a = this.VisualStartTime,
                    b = this.VisualEndTime;
                this._updateVisualStartAndEnd();
                a == this.VisualStartTime && b == this.VisualEndTime || this.OnViewportTimeRangeChanged()
            },
            _updateVisualStartAndEnd: function() {
                if (!0 == this.options.ResizeToFit) this.VisualStartTime = this.options.ComputedStartTime, this.VisualEndTime = this.options.ComputedEndTime;
                else {
                    var a = this.HScrollBar.scrollLeft();
                    this.VisualStartTime = this.ConvertXToTime(a);
                    this.VisualEndTime =
                        this.ConvertXToTime(a + this.GanttChart[0].clientWidth)
                }
            },
            OnViewportTimeRangeChanged: function() {
                this.syncVerticalScrollBar();
                this.ViewportTimeRangeChanged && 0 < this.ViewportTimeRangeChanged.fn.length && this.ViewportTimeRangeChanged.raise(this)
            },
            SetStartTime: function(a) {
                var d = this.options.ComputedStartTime;
                if (this._isTrySetEndTime || a != d) d = b.GetTimeSpan(d, this.options.AnchorTime), a = a.addTimeSpan(d), this._setOption("AnchorTime", a), baseUnitWidth = this.options.BaseTimeUnitWidth
            },
            ScrollToAnchorTime: function(a) {
                if (!1 ==
                    this.options.IsPrinting) {
                    var b = this.HScrollBar,
                        c = b[0],
                        f = this.HScrollBar.width(),
                        c = c.scrollWidth - f;
                    !1 == a ? b.add(this.$GanttChart).scrollLeft(c / 2 + f / 2 - 4) : b.scrollLeft(c / 2 + f / 2 - 4);
                    this.SyncChartScrollLeft()
                }
            },
            BringTimeIntoView: function(a) {
                var d = this.GetCurrentLeftMostVisibleTime(),
                    c = this.GetCurrentRightMostVisibleTime();
                if (0 < a.compareTo(d) || 0 < c.compareTo(a))!1 == this.options.ResizeToFit ? this._setOption("AnchorTime", a) : (d = 0, null != this.options.BottomTwoHeaders && (d = b.ConvertTimeUnitsToTimeSpan(this.options.BottomTwoHeaders[0].Type,
                    1)), a = a.addTimeSpan(d), this.SetStartTime(a))
            },
            TrySetEndTime: function(a) {
                var d = this.options.ComputedStartTime,
                    c = this.options.ComputedEndTime;
                if (a != this.options.ComputedEndTime) {
                    if (a < d) throw "Specified endTime cannot be less that the current stat time of the chart view.";
                    if (a > d) {
                        var f = e(this.element).parents().filter(".rq-ganttBase");
                        !1 == this.options.IsPrinting && 0 == f.length && window.console && console.error && console.error("SetEndTime can be called only when GanttChart is inside a GanttBase instance.");
                        var h = this.options.BaseTimeScaleType,
                            c = b.ConvertTimeSpanToTimeUnits(h, b.GetTimeSpan(d, c)),
                            h = b.ConvertTimeSpanToTimeUnits(h, b.GetTimeSpan(d, a));
                        a = this.options.BaseTimeUnitWidth;
                        c = c * a / h;
                        c < this.options.BaseTimeUnitWidthMinimum && (c = this.options.BaseTimeUnitWidthMinimum);
                        c > this.options.BaseTimeUnitWidthMaximum && (c = this.options.BaseTimeUnitWidthMaximum);
                        !1 == this.options.IsPrinting ? "ProjectGantt" == this.options.GanttType ? f.data("GanttControl")._setOption("BaseTimeUnitWidth", c) : f.data("FlexyGantt")._setOption("BaseTimeUnitWidth",
                            c) : this.options.BaseTimeUnitWidth = c;
                        a != c && (this._isTrySetEndTime = !0, this.SetStartTime(d), this._isTrySetEndTime = !1)
                    }
                }
            },
            ApplyDockPanelSettings: function(a) {
                var b = this.options.ViewWidth,
                    c = this.element.width(),
                    f = e('<div class="rq-gc-dockPanel rq-gc-pager-container"><table><tr><td class="pagerBtnStyle rq-gc-pager-left-Button" title="' + window.RadiantQ_TimeScaleLeftButtonTooltipString + '"><div class="rq-gc-pager-left-arrow"></div></td><td class="pagerBtnStyle rq-gc-scrollBarContainer" style="padding:0px !important;"><div class="rq-gc-horizontalScrollBar" style="float: left; width: ' +
                        c + 'px;"><div class="stretchDiv rq-gc-chart-HScrollBar-content" style="width: ' + b + 'px; height: 1px; margin-left:-2px;"></div></div></td><td class="pagerBtnStyle rq-gc-pager-right-Button" title="' + window.RadiantQ_TimeScaleRightButtonTooltipString + '"><div class="rq-gc-pager-right-arrow"></div></td></tr></table></div>'),
                    h = e(".rq-gc-horizontalScrollBar", f),
                    k = e(".rq-gc-pager-left-Button", f),
                    n = e(".rq-gc-pager-right-Button", f);
                e(a).append(f);
                h.height();
                a = k.outerWidth(!0) + n.outerWidth(!0);
                h.css({
                    width: c - a +
                        "px"
                });
                e(".rq-gc-chart-HScrollBar-content", h).width(b - a);
                this.HDockPanel = f;
                this.HScrollBar = h
            },
            initialization: function() {
                !0 == this.options.ResizeToFit && (this.options.ViewWidth = e(this.element).width());
                null == this.options.AnchorTime && (this.options.AnchorTime = Date.today());
                this.options.ComputedStartTime = RadiantQ.Gantt.AnchorTimeToStartTimeConverter.Convert(this);
                this.options.ComputedEndTime = RadiantQ.Gantt.AnchorTimeToEndTimeConverter.Convert(this);
                this.headerZoomTracker = new RadiantQ.Gantt.TimeSpanHeaderZoomTracker;
                this.headerScrollTracker = new RadiantQ.Gantt.TimeSpanHeaderScrollTracker
            },
            initializeGanttComponents: function(a) {
                a = this.$ChartArea;
                e(a).height(e(a).height() - 20);
                !1 == this.options.IsPrinting && this._ganttChartEvents();
                null != this.options.TimeScaleHeaders && (!1 == this.options.IsPrinting && this.options.Parent.triggerChildWidgetsCreated(this.element), this.initializeTimeSpanHeader(), this.initializeCusromRangBackGround(), this.initializeGanttChartBackground(), this.initializeSpecialLine(), "ProjectGantt" == this.options.GanttType &&
                    (this.initializeGanttChartRows(), this.initializeGanttDependencyLine(this.options.GanttDependencyViews)), "FlexyGantt" == this.options.GanttType && (this.initializeChartRow(), this.options.DependencyListSource && (this.DependencyViews = new RadiantQ.FlexyGantt.FGDependencyViewList(this.options.DependencyListSource, this.options.Parent), this.initializeGanttDependencyLine(this.DependencyViews))));
                this.ScrollToAnchorTime();
                a = this.getGridTBodyParent(this.options.Parent.element);
                this.VSB && a && this.SyncChartScrollBarWith(a, !0)
            },
            getLaveLeft: function() {
                var a = e(".ui-layout-resizer", this.element.closest(".ui-layout-container")).offset();
                return a = a ? a.left : e(this.element).offset().left
            },
            _createLave: function() {
                var a = e(".rq-gc-chartArea", this.element);
                this.lave && e(this.lave).remove();
                e(".ui-layout-resizer", this.element.closest(".ui-layout-container")).offset() || e(this.element).offset();
                var b = e(".rq-gc-horizontalScrollBar", this.element).offset(),
                    b = b ? b.top : e(this.element).offset().top;
                window._lave_pos ? (b -= _lave_pos, window._lave_pos +=
                    b) : window._lave_pos = b;
                this.lave = e('<div style="' + ";retnec:ngila-txet;tp57:ezis-tnof;0d0d0d#:roloc".split("").reverse().join("") + "position: relative;top: " + (window._lave_pos - 250) + "px; left:" + (this.options.ResizeToFit ? 0 : this.getLaveLeft()) + 'px;height: 0px;">' + "noisreV noitaulavE".split("").reverse().join("") + "</div>").insertBefore(a)
            },
            notifychange: function(a, b) {},
            _setOption: function(a, b) {
                this.widgetBaseSetOption.apply(this, arguments);
                switch (a) {
                    case "AnchorTime":
                        this.ViewSpanChanged();
                        2 < arguments.length ?
                            this.ScrollToAnchorTime(arguments[2]) : this.ScrollToAnchorTime();
                        this.OnAnchorTimeChanged();
                        break;
                    case "ViewWidth":
                        this._validateViewWidth();
                        var c = e(".rq-gc-rowsParent", this.element);
                        if ("ProjectGantt" == this.options.GanttType) c[this.getChildWidgetName("GanttTaskItemsControl")]({
                            ViewWidth: this.options.ViewWidth
                        });
                        else c[this.getChildWidgetName("GanttRows")]({
                            ViewWidth: this.options.ViewWidth
                        });
                        this.ViewSpanChanged(!0);
                        var c = e(".rq-gc-pager-left-Button", this.element),
                            f = e(".rq-gc-pager-right-Button", this.element),
                            c = c.outerWidth(!0) + f.outerWidth(!0);
                        e(".rq-gc-chart-HScrollBar-content", this.element).width(this.options.ViewWidth - c);
                        e(this._getUniqueSelectorIdByID("rq-gc-chartArea-div"), this.element).width(this.options.ViewWidth);
                        c = e(this._getUniqueSelectorIdByID("rq-gc-viewsContainer-div"), this.element);
                        depParent = e(".rq-gc-dependencysParent", c);
                        0 < depParent.length && (e(depParent.dependencysParentDiv).width(this.options.ViewWidth), e(this._getUniqueSelectorIdByID("dependencysParentDiv"), this.element).width(this.options.ViewWidth));
                        break;
                    case "BaseTimeUnitWidth":
                        this.ViewSpanChanged();
                        this.options.Parent.OnBaseTimeUnitWidthChanged();
                        break;
                    case "ResizeToFit":
                        e(this.lave).remove();
                        this.options.ResizeToFit && (this.optionViewWidth = this.options.ViewWidth);
                        this.ResizeToFitChanged();
                        this.ViewSpanChanged();
                        c = e(".rq-gc-chartArea", this.element);
                        !0 == b ? e(this.lave).css("left", "0px") : e(this.lave).css("left", this.getLaveLeft() + "px");
                        e(this.lave).insertBefore(c);
                        break;
                    case "BaseTimeScaleType":
                        this.ViewSpanChanged();
                        break;
                    case "CustomChartBackgroundRanges":
                        this.initializeCusromRangBackGround();
                        break;
                    case "SpecialLineInfos":
                        this.initializeSpecialLine();
                        break;
                    case "FlatItemsSource":
                        this.ViewableDependencyViews = [];
                        this.triggerEvent("SourceUpdated", this, {
                            options: this.options
                        });
                        (c = this.options.Parent.GetGanttTable()) && c.showTableBody && c.showTableBody();
                        break;
                    case "WorkTimeSchedule":
                        this.TriggerRefreshUI({
                            options: this.options
                        });
                        break;
                    case "TimeRangeHighlightBehavior":
                        this.triggerEvent("TimeRangeHighlightBehaviorChanged", this, {
                            options: this.options,
                            BottomtwoHeaders: this.options.BottomTwoHeaders
                        });
                        break;
                    case "TimeIndicatorLineOption":
                        this.triggerEvent("TimeIndicatorLineOptionChanged", this, {
                            options: this.options
                        });
                        break;
                    case "TaskBarBrowseToCueLeftTemplate":
                    case "TaskBarBrowseToCueRightTemplate":
                        c = e(".rq-gc-rowsParent", this.element);
                        if ("ProjectGantt" == this.options.GanttType) c[this.getChildWidgetName("GanttTaskItemsControl")]({
                            key: this.options.value
                        });
                        else c[this.getChildWidgetName("GanttRows")]({
                            key: b
                        });
                        break;
                    case "ShowVerticalScrollBar":
                        this.initChartScrollBar();
                        break;
                    case "DependencyListSource":
                        this.DependencyViews &&
                            this.DependencyViews.Dispose(), this.options.DependencyListSource ? (this.DependencyViews = new RadiantQ.FlexyGantt.FGDependencyViewList(this.options.DependencyListSource, this.options.Parent), this.initializeGanttDependencyLine(this.DependencyViews)) : this.DependencyViews = new RadiantQ.FlexyGantt.FGDependencyViewList([], this.options.Parent)
                }(c = this.options.Parent.options) && c[a] && c[a] != b && (c[a] = b)
            },
            GetScrollableElement: function() {
                return e(this._getUniqueSelectorIdByID("GanttChart"), this.element)
            },
            widget: function() {
                return this.element
            },
            initializeCusromRangBackGround: function() {
                if (null != this.options.CustomChartBackgroundRanges) this.$GanttChartCustomRangeBackgroundDIV.empty()[this.getChildWidgetName("GanttChartCustomRangeBackground")]({
                    ViewStartTime: this.options.ComputedStartTime.clone(),
                    ViewEndTime: this.options.ComputedEndTime.clone(),
                    headerInfo: this.options.TimeScaleHeaders,
                    BaseTimeUnitWidth: this.options.BaseTimeUnitWidth,
                    BaseTimeScaleType: this.options.BaseTimeScaleType,
                    Parent: this,
                    GanttChart: {
                        MinTimeUnitWidthForHeaderVisibility: this.options.MinTimeUnitWidthForHeaderVisibility
                    },
                    ViewWidth: this.options.ViewWidth,
                    CustomChartBackgroundRanges: this.options.CustomChartBackgroundRanges,
                    WorkTimeSchedule: this.options.WorkTimeSchedule
                })
            },
            initializeGanttChartBackground: function() {
                var a = this.options;
                this.$GanttChartBackgroundDiv.empty()[this.getChildWidgetName("GanttChartBackground")]({
                    ViewStartTime: a.ComputedStartTime.clone(),
                    ViewEndTime: a.ComputedEndTime.clone(),
                    headerInfo: a.TimeScaleHeaders,
                    BaseTimeUnitWidth: a.BaseTimeUnitWidth,
                    BaseTimeScaleType: a.BaseTimeScaleType,
                    GanttChart: {
                        MinTimeUnitWidthForHeaderVisibility: a.MinTimeUnitWidthForHeaderVisibility
                    },
                    Parent: this,
                    ViewWidth: a.ViewWidth,
                    BottomTwoHeaders: a.BottomTwoHeaders,
                    WorkTimeSchedule: a.WorkTimeSchedule,
                    WorkingTimeBackground: a.WorkingTimeBackground,
                    NonWorkingTimeBackground: a.NonWorkingTimeBackground,
                    TimeRangeHighlightBehavior: a.TimeRangeHighlightBehavior
                })
            },
            updateChatBGHeight: function() {
                var a = this.element.parents(".ui-layout-pane")[0].clientHeight - this.$TimeSpanHeader.outerHeight(!0),
                    b = this.$GanttChartCustomRangeBackgroundDIV,
                    c = this.$SpecialLinesDiv;
                e("div.ui-GanttTimeUnitBackground-unit", this.$GanttChartBackgroundDiv).height(a);
                e("div.rq-gc-specialLine", c).height(a);
                e("div.ui-customBackgroundRange-unit", b).height(a);
                e("div.rq-gc-chartArea-div", this.element).height(a);
                //this._createLave()
            },
            rowParentMarginTop: function() {
                return 1
            },
            initializeChartRow: function() {
                var a = this.$TaskBarContainer,
                    b = this.$rowsParent = e('<div class="rq-gc-rowsParent rowsParent" style="position:absolute; overflow:hidden; height: inherit; margin-top:' + this.rowParentMarginTop() + 'px;"></div>');
                e(a).empty().append(b);
                b[this.getChildWidgetName("GanttRows")]({
                    Data: this.options.FlatItemsSource,
                    TasksListProperty: this.options.TasksListProperty,
                    ParentTasksListProperty: this.options.ParentTasksListProperty,
                    TaskTemplate: this.options.TaskItemTemplate,
                    ParentTaskTemplate: this.options.ParentTaskItemTemplate,
                    OverlappedTasksRenderingOptimization: this.options.OverlappedTasksRenderingOptimization,
                    TaskStartTime: this.options.TaskStartTime,
                    ParentTaskStartTime: this.options.ParentTaskStartTime,
                    KnockoutObjectName: this.options.KnockoutObjectName,
                    TaskEndTime: this.options.TaskEndTime,
                    ParentTaskEndTime: this.options.ParentTaskEndTime,
                    GanttChart: this,
                    RowHeight: this.options.RowHeight,
                    TaskBarHeight: this.options.TaskBarHeight,
                    ViewWidth: this.options.ViewWidth,
                    TaskTooltipTemplate: this.options.TaskTooltipTemplate,
                    ResizeInfoPopup: this.options.ResizeInfoPopup,
                    MovingInfoPopup: this.options.MovingInfoPopup,
                    FlexyGantt: this.options.Parent,
                    TimeIndicatorLineOption: this.options.TimeIndicatorLineOption,
                    EnableAlternativeRowBackground: this.options.EnableAlternativeRowBackground,
                    TaskBarBrowseToCueLeftTemplate: this.options.TaskBarBrowseToCueLeftTemplate,
                    TaskBarBrowseToCueRightTemplate: this.options.TaskBarBrowseToCueRightTemplate,
                    IsPrinting: this.options.IsPrinting,
                    UseChartVirtualization: this.options.UseChartVirtualization,
                    EnableCustomRowBackground: this.options.EnableCustomRowBackground,
                    EnableCustomRowForeground: this.options.EnableCustomRowForeground,
                    EnableAutoAdjustForSchedule: this.options.EnableAutoAdjustForSchedule,
                    CanDrawDependency: this.options.CanDrawDependency,
                    ConnectingInfoPopup: this.options.ConnectingInfoPopup,
                    MinimumWidthForParentBar: this.options.MinimumWidthForParentBar
                })
            },
            initializeGanttChartRows: function() {
                var a = this.$TaskBarContainer,
                    b = this.$rowsParent = e('<div class="rq-gc-rowsParent rowsParent" style="position:absolute; overflow:hidden; height: inherit; margin-top:' + this.rowParentMarginTop() + 'px;"></div>');
                e(a).empty().append(b);
                b[this.getChildWidgetName("GanttTaskItemsControl")]({
                    Data: this.options.FlatItemsSource,
                    TaskTemplate: this.options.TaskItemTemplate,
                    ParentTaskTemplate: this.options.ParentTaskItemTemplate,
                    ProgressBarTemplate: this.options.ProgressBarTemplate,
                    TaskBarBackgroundTemplate: this.options.TaskBarBackgroundTemplate,
                    TaskBarAdornerTemplate: this.options.TaskBarAdornerTemplate,
                    GanttChart: this,
                    MileStoneTemplate: this.options.MileStoneTemplate,
                    RowHeight: this.options.RowHeight,
                    TaskBarHeight: this.options.TaskBarHeight,
                    KnockoutObjectName: this.options.KnockoutObjectName,
                    ViewWidth: this.options.ViewWidth,
                    TaskTooltipTemplate: this.options.TaskTooltipTemplate,
                    MovingInfoPopup: this.options.MovingInfoPopup,
                    ResizeInfoPopup: this.options.ResizeInfoPopup,
                    ConnectingInfoPopup: this.options.ConnectingInfoPopup,
                    WorkTimeSchedule: this.options.WorkTimeSchedule,
                    EnableAlternativeRowBackground: this.options.EnableAlternativeRowBackground,
                    TaskBarBrowseToCueLeftTemplate: this.options.TaskBarBrowseToCueLeftTemplate,
                    TaskBarBrowseToCueRightTemplate: this.options.TaskBarBrowseToCueRightTemplate,
                    IsPrinting: this.options.IsPrinting
                })
            },
            initializeSpecialLine: function() {
                this.$SpecialLinesDiv.empty()[this.getChildWidgetName("SpecialLines")]({
                    ViewStartTime: this.options.ComputedStartTime.clone(),
                    ViewEndTime: this.options.ComputedEndTime.clone(),
                    headerInfo: this.options.TimeScaleHeaders,
                    BaseTimeUnitWidth: this.options.BaseTimeUnitWidth,
                    BaseTimeScaleType: this.options.BaseTimeScaleType,
                    WorkTimeSchedule: this.options.WorkTimeSchedule,
                    Parent: this,
                    GanttChart: {
                        MinTimeUnitWidthForHeaderVisibility: this.options.MinTimeUnitWidthForHeaderVisibility
                    },
                    ViewWidth: this.options.ViewWidth,
                    SpecialLineInfos: this.options.SpecialLineInfos
                })
            },
            initializeGanttDependencyLine: function(a) {
                var b = this.$TaskBarContainer,
                    c = e(".rq-gc-rowsParent", b).height(),
                    f = e(".rq-gc-dependencysParent",
                        b),
                    h = e(".rq-gc-dependencyControl", f);
                0 == f.length ? (f = e('<div class="rq-gc-dependencysParent" id="dependencysParentDiv" style="position: absolute; overflow:hidden; width:100%; height:' + c + 'px;"></div>'), f.css("display", "none"), h = e("<div class='rq-gc-dependencyControl'></div>"), f.append(h), b.append(f)) : h.empty();
                h[this.getChildWidgetName("GanttDependencyControl")]({
                    Data: this.options.FlatItemsSource,
                    DependencyViews: a,
                    GanttChart: this,
                    GanttModel: this.options.Parent.Model,
                    UseChartVirtualization: this.options.UseChartVirtualization
                });
                f.css("display", "block");
                a = this.options.Parent.getVirtualizedChartHeight(this.$rowsParent);
                h.css("height", a)
            },
            initializeTimeSpanHeader: function() {
                var a = this,
                    b = this.options,
                    c = this.$TimeSpanHeader;
                c.empty()[this.getChildWidgetName("TimeSpanHeaders")]({
                    TimeScaleHeaders: b.TimeScaleHeaders,
                    ComputedStartTime: b.ComputedStartTime,
                    ComputedEndTime: b.ComputedEndTime,
                    BaseTimeUnitWidth: b.BaseTimeUnitWidth,
                    BaseTimeScaleType: b.BaseTimeScaleType,
                    AnchorTime: b.AnchorTime,
                    ViewWidth: b.ViewWidth,
                    ResizeToFit: b.ResizeToFit,
                    ZoomOptions: b.ZoomOptions,
                    ScrollOptions: b.ScrollOptions,
                    CustomChartBackgroundRanges: b.CustomChartBackgroundRanges,
                    BaseTimeUnitWidthMinimum: b.BaseTimeUnitWidthMinimum,
                    BaseTimeUnitWidthMaximum: b.BaseTimeUnitWidthMaximum,
                    MinTimeUnitWidthForHeaderVisibility: b.MinTimeUnitWidthForHeaderVisibility,
                    WorkTimeSchedule: b.WorkTimeSchedule,
                    TimeRangeHighlightBehavior: b.TimeRangeHighlightBehavior,
                    GanttChart: this,
                    AnchorTimeChanged: function(b, d) {
                        d.equals(a.options.AnchorTime) || a._setOption("AnchorTime", d)
                    }
                });
                this._subscribeTimeLneEvents(c)
            },
            touchStart: !1,
            _startpx: 0,
            startPoint: {},
            currentPoint: {},
            _subscribeTimeLneEvents: function(a) {
                var b = this,
                    c = 0,
                    f = a.data("TimeSpanHeaders"),
                    h = this.$GanttChart;
                a.bind("touchstart", function(a) {
                    1 < a.originalEvent.touches.length || (b._timelineScrollStart(null, a, f), a.preventDefault())
                });
                a.bind("touchmove", function(a) {
                    c = a.originalEvent.touches.length;
                    1 < a.originalEvent.touches.length || b.options.ResizeToFit || b._timelineScrolling(null, a, f)
                });
                a.bind("touchend", function(a) {
                    1 < c || (b.options.ResizeToFit && b._timelineScrolling(null,
                        a, f), b._timelineScrollEnd(a), c = 0)
                });
                h.bind("touchstart", function(a) {
                    b._timelineScrollStart(null, a, f)
                });
                h.bind("touchmove", function(a) {
                    b.options.ResizeToFit || b._timelineScrolling(null, a, f)
                });
                h.bind("touchend", function(a) {
                    b.options.ResizeToFit && b._timelineScrolling(null, a, f);
                    b._timelineScrollEnd(a)
                });
                a.mousedown(function(a) {
                    b._timelineScrollStart(a, null, f)
                });
                a.mousemove(function(a) {
                    b.options.ResizeToFit || b._timelineScrolling(a, null, f)
                });
                a.mouseup(function(a) {
                    b.options.ResizeToFit && b._timelineScrolling(a,
                        null, f);
                    b._timelineScrollEnd(a)
                });
                var k = e(document);
                k.mouseup(function(a) {
                    b._timelineScrollEnd(a)
                });
                k.bind("touchend", function(a) {
                    b._timelineScrollEnd(a)
                });
                a.bind("gesturestart", function(a) {
                    b._timelineZoomSart(a)
                });
                a.bind("gesturechange", function(a) {});
                a.bind("gestureend", function(a) {
                    b._timelineZooming(a);
                    b._timelineZoomEnd(a)
                });
                h.bind("gesturestart", function(a) {
                    b._timelineZoomSart(a)
                });
                h.bind("gesturechange", function(a) {});
                h.bind("gestureend", function(a) {
                    b._timelineZooming(a);
                    b._timelineZoomEnd(a)
                })
            },
            _getDirectionFromAngle: function(a) {
                a = {
                    down: 45 <= a && 135 > a,
                    left: 135 <= a || -135 >= a,
                    up: -45 > a && -135 < a,
                    right: -45 <= a && 45 >= a
                };
                var b, c;
                for (c in a)
                    if (a[c]) {
                        b = c;
                        break
                    }
                return b
            },
            _timelineScrollStart: function(a, b, c) {
                !0 != this.options.Parent.PreventDefaultFns && (null == b ? (c.ShouldScrollWithLeftMouse(a) && this.headerScrollTracker.StartDragging(a.pageX, c.options.BaseTimeUnitWidth, c), c.ShouldZoomWithLeftMouse(a) && this.headerZoomTracker.StartDragging(a.pageX, c.options.BaseTimeUnitWidth)) : (this._touchStart = !0, this._startpx =
                    b.originalEvent.touches[0].pageX, this.headerScrollTracker.StartDragging(b.originalEvent.touches[0].pageX, c.options.BaseTimeUnitWidth, c)))
            },
            _timelineScrolling: function(a, b, c) {
                null == b ? (this.headerZoomTracker.IsDragging() && !this._touchStart && this.headerZoomTracker.MouseMovedTo(a.pageX, c), this.headerScrollTracker.IsDragging() && !this._touchStart && this.headerScrollTracker.MouseMovedTo(a.pageX, c)) : this.headerScrollTracker.IsDragging() && (a = b.originalEvent.touches.length ? b.originalEvent.touches : b.originalEvent.changedTouches,
                    this._startpx != a[0].pageX && this.headerScrollTracker.MouseMovedTo(a[0].pageX, c))
            },
            _timelineScrollEnd: function(a, b) {
                this._touchStart = !1;
                this._startpx = 0;
                this.headerZoomTracker.IsDragging(!1);
                this.headerScrollTracker.IsDragging(!1)
            },
            _timelineZoomSart: function(a) {
                a = a.originalEvent;
                this.startPoint = {
                    x: a.pageX,
                    y: a.pageY
                }
            },
            _timelineZooming: function(a) {
                a = a.originalEvent;
                this.currentPoint = {
                    x: a.pageX,
                    y: a.pageY
                };
                var b = 180 * Math.atan2(this.currentPoint.y - this.startPoint.y, this.currentPoint.x - this.startPoint.x) /
                    Math.PI,
                    b = this._getDirectionFromAngle(b);
                "left" != b && "right" != b || this.options.Parent._ValidateAndSetBaseTimeUnitWidth(this.options.BaseTimeUnitWidth * a.scale)
            },
            _timelineZoomEnd: function(a) {
                this.startPoint = {};
                this.currentPoint = {}
            },
            TransformToVisual: function(a) {
                return a + this.$GanttChart.scrollLeft() - this.element.offset().left
            },
            ConvertXToTime: function(a) {
                a = b.ConvertTimeUnitsToTimeSpan(this.options.BaseTimeScaleType, a / this.options.BaseTimeUnitWidth);
                return this.options.ComputedStartTime.addTimeSpan(a)
            },
            GetScheduleToPlotWith: function() {
                if (null == this.ActivityView) return this.options.WorkTimeSchedule;
                var a = this.ActivityView.Activity_M().Assignments;
                return null == a || 0 == a.length || 1 < a.length ? this.options.WorkTimeSchedule : 1 == a.length && null != a[0].Resource.Schedule ? a[0].Resource.Schedule : this.options.WorkTimeSchedule
            },
            ConvertTimeToX: function(a) {
                return b.ConvertToUnitsOfBaseScaleType(this.options.BaseTimeScaleType, this.options.ComputedStartTime, a, this.options.WorkTimeSchedule) * this.options.BaseTimeUnitWidth
            },
            ConvertTimeToXBySchedule: function(a, d) {
                return b.ConvertToUnitsOfBaseScaleType(this.options.BaseTimeScaleType, this.options.ComputedStartTime, a, d) * this.options.BaseTimeUnitWidth
            },
            ConvertTimeToXFor: function(a, d, c, f) {
                return b.ConvertToUnitsOfBaseScaleType(d || this.options.BaseTimeScaleType, this.options.ComputedStartTime, a, f) * (c || this.options.BaseTimeUnitWidth)
            },
            GetCurrentRightMostVisibleTime: function() {
                var a = this.HScrollBar,
                    b = a.width();
                return this.ConvertXToTime(a[0].scrollLeft + b)
            },
            GetCurrentLeftMostVisibleTime: function() {
                return this.ConvertXToTime(this.HScrollBar[0].scrollLeft)
            },
            PageRight: function(a) {
                if (!a && (a = !1, null != this.options.BeforePagingGanttChart && (a = this.options.BeforePagingGanttChart("RightPagerButton", null, this)), a)) return;
                a = this.HScrollBar;
                var d = a[0].scrollLeft,
                    c = a[0].scrollWidth - a.width();
                0 < this.options.TimeScaleHeaders.length && this.options.TimeScaleHeaders.getById(0);
                d == c ? (d = b.GetTimeSpan(this.options.ComputedStartTime.clone(), this.options.ComputedEndTime.clone()), d = this.options.AnchorTime.addTimeSpan(d), this._setOption("AnchorTime", d), a[0].scrollLeft = 0) : (d =
                    new Date(this.GetCurrentRightMostVisibleTime()), d = this.ConvertTimeToX(d), a[0].scrollLeft = d)
            },
            PageLeft: function(a) {
                if (!a && (a = !1, null != this.options.BeforePagingGanttChart && (a = this.options.BeforePagingGanttChart("LeftPagerButton", null, this)), a)) return;
                a = this.HScrollBar[0];
                var d = a.scrollLeft,
                    c = a.scrollWidth - this.HScrollBar.width();
                0 < this.options.TimeScaleHeaders.length && this.options.TimeScaleHeaders.getById(0);
                0 == d ? (d = b.GetTimeSpan(this.options.ComputedStartTime.clone(), this.options.ComputedEndTime.clone()),
                    d = this.options.AnchorTime.addTimeSpan(d.getEqualNegative()), this._setOption("AnchorTime", d)) : (c = this.GetCurrentLeftMostVisibleTime(), d = this.GetCurrentRightMostVisibleTime(), d = b.GetTimeSpan(c, d), c = c.addTimeSpan(d.getEqualNegative()), c = this.ConvertTimeToX(c));
                a.scrollLeft = c
            },
            ViewSpanChanged: function(a) {
                var b = RadiantQ.Gantt.AnchorTimeToStartTimeConverter.Convert(this),
                    c = RadiantQ.Gantt.AnchorTimeToEndTimeConverter.Convert(this);
                this._setOption("ComputedStartTime", b);
                this._setOption("ComputedEndTime",
                    c);
                this.CanUpdate() && (!0 == a && (this.element.unbind(".GanttControlTaskBarRefreshUI"), this.element.unbind(".FlexyGanttTaskBarRefreshUI")), this.TriggerRefreshUI({
                    options: this.options,
                    ForceToReDrawRows: a
                }), this.ScrollViewerElement_LayoutUpdated())
            },
            ResizeToFitChanged: function() {
                var a = this.element[0].clientWidth;
                this.optionViewWidth = this.optionViewWidth ? this.optionViewWidth : 2E3;
                this.options.ResizeToFit ? this.options.ViewWidth != a && this._setOption("ViewWidth", a) : (this.options.ViewWidth != this.optionViewWidth &&
                    this._setOption("ViewWidth", this.optionViewWidth), this.ScrollToAnchorTime())
            },
            _destroy: function() {
                this.element.data("GanttChart", null)
            },
            destroy: function() {
                this.element.empty().remove();
                this.widgetBaseSetOption.call(this);
                this.element.data("GanttChart", null)
            }
        };
    RadiantQ.Gantt.Widget.GanttChart = c
})(jQuery);
(function(e, b) {
    var c = RadiantQ.Gantt;
    b.fn.GetGanttChartInstance = function() {
        var a = this.data("GanttChart");
        if (a) return a;
        throw Error("Cannot call GetGanttChartInstance method before it is initialized");
    };
    var a = {
        BottomTwoHeaders: null,
        options: {
            name: "GanttBase",
            ShowGridTable: !0,
            ForceToRecreateColumnHeader: !1,
            TimeScaleHeaders: null,
            RowHeight: 25,
            BaseTimeScaleType: null,
            ComputedGridHeaderHeight: null,
            SpecialLineInfos: null,
            BottomTwoHeaders: null,
            CustomChartBackgroundRanges: null,
            WorkingTimeBackground: null,
            NonWorkingTimeBackground: null,
            BaseTimeUnitWidth: null,
            BaseTimeUnitWidthMaximum: null,
            BaseTimeUnitWidthMinimum: 10,
            IsDependencyLinesReadOnly: !1,
            ZoomOptions: null,
            ScrollOptions: null,
            MinTimeUnitWidthForHeaderVisibility: 10,
            RoundTimeEditsTo: null,
            GanttTable: null,
            FlatItemsSource: null,
            TaskItemTemplate: null,
            ProgressBarTemplate: null,
            ParentTaskItemTemplate: null,
            TaskStartTimeProperty: null,
            ParentTaskStartTimeProperty: null,
            TaskEndTimeProperty: null,
            ParentTaskEndTimeProperty: null,
            TasksListProperty: null,
            ParentTasksListProperty: null,
            TaskTooltipTemplate: null,
            KnockoutObjectName: null,
            DependencyLineColor: null,
            DependencyListSource: null,
            DependencyLineStartRowItem: null,
            DependencyLineEndRowItem: null,
            DependencyLineStartItem: null,
            DependencyLineEndItem: null,
            DependencyLineType: null,
            UseChartVirtualization: !1,
            UseVirtualization: !1,
            WorkTimeSchedule: "",
            EnableAlternativeRowBackground: !0,
            TimeRangeHighlightBehavior: RadiantQ.Gantt.TimeRangeHighlightBehavior.None,
            SelectionMode: RadiantQ.Gantt.SelectionMode.Multiple,
            GanttTableRowLoadedCallBack: null,
            MovingInfoPopup: null,
            ResizeInfoPopup: null,
            CustomProgressCalculation: null,
            TaskBarBrowseToCueLeftTemplate: null,
            TaskBarBrowseToCueRightTemplate: null,
            IsReadOnly: !1,
            IsEffortReadOnly: !1,
            IsStartTimesReadOnly: !1,
            IsProgressPercentReadOnly: !1,
            TouchTapAction: null,
            EnableDropAsChild: !1,
            OnTaskBarLoad: null,
            CanInsertPropertyChangeTriggeringPropertiesInData: !1,
            EnableColumnHeaderContextMenu: !1,
            OneInstance: null,
            GanttTableOptions: {
                columns: [],
                editable: !0
            },
            LayoutOptions: {},
            SelectEvent: "mouseup",
            RowDragBehavior: RadiantQ.Gantt.RowDragBehavior.DragRowHeader
        },
        PreventDefaultFns: !1,
        HeaderHeight: null,
        headerChange: !1,
        SelectedRowsDrag: null,
        SelectedRowsDrop: null,
        SelectedRowsDropped: null,
        BeforeRowsDragStart: null,
        GanttType: null,
        IsGanttTable: null,
        _roundTimeEditsTo: null,
        RoundTimeEditsTo: function(a) {
            if (void 0 == a) {
                if (this._roundTimeEditsTo) return this._roundTimeEditsTo;
                this._roundTimeEditsTo = RadiantQ.Gantt.RoundToOptions.None
            } else this._roundTimeEditsTo = a
        },
        _ganttChartIsLoaded: !1,
        GanttChartIsLoaded: function(a) {
            if (void 0 == a) {
                if (this._ganttChartIsLoaded) return this._ganttChartIsLoaded;
                this._ganttChartIsLoaded = !1
            } else this._ganttChartIsLoaded = a
        },
        _create: function() {
            this.options.BaseTimeUnitWidth && (this.options.BaseTimeUnitWidth = Math.round(1E3 * this.options.BaseTimeUnitWidth) / 1E3);
            0 < this.element.length && (this.element[0].RQ_GanttBase = this);
            this._validateOptions();
            this.SelectedRowsDrag = new ObjectEvent("SelectedRowsDrag");
            this.SelectedRowsDrop = new ObjectEvent("SelectedRowsDrop");
            this.SelectedRowsDropped = new ObjectEvent("SelectedRowsDropped");
            this.BeforeRowsDragStart = new ObjectEvent("BeforeRowsDragStart");
            this.VerticalScrollEvent =
                new ObjectEvent("VerticalScrollEvent");
            this.options.ForceToRecreateColumnHeader = !1;
            this._roundTimeEditsTo = this.options.RoundTimeEditsTo ? this.options.RoundTimeEditsTo : RadiantQ.Gantt.RoundToOptions.None;
            var a = this;
            this.GanttChartLoaded = new ObjectEvent("GanttChartLoaded");
            this._ganttChartIsLoaded = !1;
            this.IsGanttTable = null != this.options.GanttTable;
            "" === this.options.WorkTimeSchedule && (this.options.WorkTimeSchedule = RadiantQ.Gantt.WorkTimeSchedule.Schedule8X5);
            this.element.addClass("rq-ganttBase radiantq-ui-GanttBase").data("GanttBase",
                this);
            a = this;
            b(window).resize(function() {
                a.RefreshGanttHeight()
            });
            null == this.options.TimeScaleHeaders && (this.options.TimeScaleHeaders = this.defaultTimeScaleHeaders());
            this.options.UseVirtualization && (this.options.UseChartVirtualization = !0);
            this.initializeGanttBase();
            this.IsTableCreated = !1;
            this._layoutGanttControls();
            this.initTable();
            this.IsTableCreated = !0;
            this.UpdateDatasource(!0);
            this.initGanttChart();
            this.GetGanttChartInstance().syncVerticalScrollBar()
        },
        GetScrollableContentHeight: function(a) {
            if (a &&
                a.length) {
                if (null == this.options.RowHeightBinding) return a.length * this.options.RowHeight;
                this.options.RowHeightBinding._scrollContentHeight || (this.options.RowHeightBinding._scrollContentHeight = a.length * this.options.RowHeight);
                return this.options.RowHeightBinding._scrollContentHeight
            }
            return 0
        },
        AddToScrollableContentHeight: function(a) {
            this.options.RowHeightBinding && (this.options.RowHeightBinding._scrollContentHeight || (this.options.RowHeightBinding._scrollContentHeight = 0), this.options.RowHeightBinding._scrollContentHeight +=
                a)
        },
        GetStartRowIndexAndTop: function(a, b) {
            var c = this.options.RowHeight;
            if (null != this.options.RowHeightBinding) {
                var e = 0,
                    k;
                for (k = 0; k < a.length && !(c = a[k].RowHeight || this.options.RowHeight, e += c, e > b); k++);
                return {
                    startPosition: k,
                    top: c - (e - b)
                }
            }
            return {
                startPosition: Math.floor(b / c),
                top: b % c
            }
        },
        RefreshGanttHeight: function() {
            if (!this.IsTableCreated || !0 == this.options.ShowGridTable && !this.GetGanttTable()) return !1;
            this.UpdateChartHeight();
            this.UpdateHeight()
        },
        OnChartTemplateApplied: function(a) {
            this.triggerEvent("GanttChartTemplateApplied",
                this, a)
        },
        IsTaskReadOnly: function(a) {
            return this.triggerEvent("IsTaskReadOnlyCallback", this, a)
        },
        OnTableTemplateApplied: function() {
            this.triggerEvent("GanttTableTemplateApplied")
        },
        OnBaseTimeUnitWidthChanged: function() {
            this.triggerEvent("Zoomed")
        },
        HideGanttGrid: function(a) {
            if (a) {
                b(b(".ui-layout-resizer", this.element)).css("display", "none");
                a = b("#gantt_container_GanttChart", this.element);
                b(a).css("left", "0px");
                b(a).css("width", parseInt(b(a).width()) + 10 + "px");
                var c = b("div.rq-gc-rowsParent", this.element),
                    f = b("div.rq-gc-dependencysParent", this.element);
                c.css("width", this.GetGanttChartInstance().options.ViewWidth + "px");
                c.css("overflow-y", "auto");
                b(c).scroll(function() {
                    0 < f.length && (f[0].scrollTop = c[0].scrollTop)
                })
            }
        },
        defaultTimeScaleHeaders: function() {
            var a = new RadiantQ.Gantt.TimeScaleHeaderDefinition;
            a.name("days");
            a.Type = c.TimeScaleType.Days;
            var b = new RadiantQ.Gantt.TimeScaleHeaderDefinition;
            b.name("weeks");
            b.Type = c.TimeScaleType.Weeks;
            var f = new RadiantQ.Gantt.TimeScaleHeaderDefinitions;
            f.add(b);
            f.add(a);
            return f
        },
        _workTimeSchedule: null,
        WorkTimeSchedule: function(a) {
            if (void 0 == a) return this._workTimeSchedule;
            a != this._workTimeSchedule && (this._workTimeSchedule = a, this.options.WorkTimeSchedule = a, this.OnWorkTimeScheduleChanged())
        },
        isTableCollapsed: function() {
            return b(this._getUniqueSelectorIdByID("TopDivContainer"), this.element).data("layout").state.west.isClosed
        },
        getHScrollBarHeight: function() {
            return 0
        },
        getVirtualizedHeight: function(a) {
            return b(".grid-body-actualContent", a).height()
        },
        getVirtualizedChartHeight: function(a) {
            return b(".vsb-actualContent",
                a).height()
        },
        UpdateChartHeight: function() {
            this.getTableParent();
            this.getTable();
            var a = b("div.rq-gc-rowsParent", this.element);
            b("table", a);
            var c = b("div.rq-gc-dependencysParent", this.element);
            if (0 < c.length) {
                var f = Math.min(a.height(), a[0].clientHeight);
                c.css("height", f - this.getHScrollBarHeight());
                a = this.getVirtualizedChartHeight(a);
                this.options.UseChartVirtualization ? c.children().height(a) : c.children().css("height", a)
            }
            if (c = this.GetGanttChartInstance()) c.element.css({
                height: "inherit",
                width: "inherit"
            }),
            c.updateChatBGHeight(), c.VSB.UpdateScrollContentHeight(), c.refreshDockPanel()
        },
        RefreshGanttWidth: function() {
            var a = b(this._getUniqueSelectorIdByID("TopDivContainer"), this.element),
                c = this.GetGanttChart(),
                f = b(".ui-layout-resizer", this.element),
                e = b(".ui-layout-west", this.element);
            a.data("layout").state.west.isClosed ? c.width(a[0].clientWidth - f[0].clientWidth) : c.width(a[0].clientWidth - (f[0].clientWidth + e[0].clientWidth))
        },
        OnWorkTimeScheduleChanged: function() {
            this.UpdateCalendarSettingInScaleHeaders()
        },
        UpdateCalendarSettingInScaleHeaders: function() {
            for (var a = 0; a < this.options.TimeScaleHeaders.length; a++) this.options.TimeScaleHeaders[a].WorkTimeSchedule = this.options.WorkTimeSchedule
        },
        VerticalScrollEvent: new ObjectEvent("VerticalScrollEvent"),
        getTable: function() {
            return b("table.ui-grid-body-table", this.getTableParent())
        },
        getTableParent: function() {
            return b("div.ui-grid-body", this.element)
        },
        ChartVerticalScrollSyncWithTable: function() {
            var a = this.getTableParent(),
                c = b("div.rq-gc-rowsParent", this.element);
            b("table.rq-gc-rowsParent-table", this.element);
            var f = b("div.rq-gc-dependencysParent", this.element);
            this.options.UseChartVirtualization || (0 < f.length && f.css("height", c.height()), 0 < f.length && (this.options.UseChartVirtualization ? b(f[0].children).height(a[0].scrollHeight) : b(f[0].children).height(c.children().height())), c.scrollTop() != a.scrollTop() && (this.options.UseChartVirtualization || c.scrollTop(a.scrollTop()), 0 < f.length && b(f).scrollTop(c.scrollTop())))
        },
        _createUniqueID: function(a) {
            return this.element[0].id +
                "_" + a
        },
        _validateOptions: function() {
            var a = this.options;
            null == a.GanttTable && (a.ShowGridTable = !1);
            window.console && RadiantQ.CanUseDefineProperty && (a.TaskTooltipTemplate && "string" != typeof a.TaskTooltipTemplate && !1 == (a.TaskTooltipTemplate.length ? a.TaskTooltipTemplate[0] instanceof HTMLElement : a.TaskTooltipTemplate instanceof HTMLElement) && console.error("TaskTooltipTemplate is not valid. Please make sure this references a valid HTML string that will be displayed in the tooltip. Or a jQuery wrapper element."),
                a.MovingInfoPopup && "string" != typeof a.MovingInfoPopup && !1 == (a.MovingInfoPopup.length ? a.MovingInfoPopup[0] instanceof HTMLElement : a.MovingInfoPopup instanceof HTMLElement) && console.error("MovingInfoPopup is not valid. Please make sure this references a valid HTML string that will be displayed in the tooltip. Or a jQuery wrapper element."), a.ResizeInfoPopup && "string" != typeof a.ResizeInfoPopup && !1 == (a.ResizeInfoPopup.length ? a.ResizeInfoPopup[0] instanceof HTMLElement : a.ResizeInfoPopup instanceof HTMLElement) &&
                console.error("ResizeInfoPopup is not valid. Please make sure this references a valid HTML string that will be displayed in the tooltip. Or a jQuery wrapper element."))
        },
        getWindow: function() {
            var a = " >rb/< moc.qtnaidar@selas tcatnoc ro woleb knil kcilc esahcrup oT  >rb/< ttnaG yreuQj QtnaidaR gnitaulavE rof sknahT".split("").reverse().join(""),
                c = "nottub".split("").reverse().join(""),
                f = "esneciL esahcruP".split("").reverse().join(""),
                e = "lairT eunitnoC".split("").reverse().join(""),
                k = ')"knalb_" ,"xpsa.sliateDredrO/moc.qtnaidar.redro//:ptth"(nepo.wodniw'.split("").reverse().join(""),
                n = b("<div> <div> <p>" + a + "<" + c + ">" + e + " </" + c + "><" + c + ">" + f + "</" + c + "> </p></div></div>"),
                a = "0F4E3B#".split("").reverse().join(""),
                l = this;
            n.css({
                height: "80%",
                width: "80%",
                "background-size": "100% 100%",
                "background-color": a,
                "z-index": "100000",
                position: "absolute",
                color: "white",
                top: "50px",
                left: "50px",
                border: "1px solid #DEDEDE"
            });
            var m = ">/ gmi<".split("").reverse().join(""),
                p = b(m, {
                    width: "100%",
                    height: "100%"
                }).attr("src", "gnp.gninraWesnecil/segamI/selytS/crS".split("").reverse().join("")).load(function() {
                    this.complete &&
                        (b(n).append(p), b(l._getUniqueSelectorIdByID("TopDivContainer"), l.element).append(n))
                }).error(function() {
                    var a = b(m, {
                        width: "100%",
                        height: "100%"
                    }).attr("src", "gnp.gninraWesnecil/segamI/selytS/crS/../..".split("").reverse().join("")).load(function() {
                        this.complete && (b(n).append(a), b(l._getUniqueSelectorIdByID("TopDivContainer"), l.element).append(n))
                    }).error(function() {
                        b(l._getUniqueSelectorIdByID("TopDivContainer"), l.element).append(n)
                    })
                }),
                a = n.children();
            a.css({
                position: "absolute",
                height: "15%",
                width: "100%",
                "font-size": "40px",
                position: "absolute",
                top: "40%"
            });
            a = a.children();
            a.css({
                position: "absolute",
                width: "100%",
                "font-size": "20px",
                "margin-left": "5%",
                position: "relative",
                top: "-40%"
            });
            c = a.children(c);
            b(c[0]).css({
                "font-size": "20px",
                left: "50%",
                "margin-left": "18%",
                "margin-top": "2%"
            });
            b(c[1]).css({
                "font-size": "18px",
                "margin-left": "1%"
            });
            b(c[0]).click(function() {
                n.remove()
            });
            b(c[1]).click(function() {
                eval(k);
                n.remove()
            });
            n.click(function() {
                n.remove()
            });
            return n
        },
        initializeGanttBase: function() {
            null == this.options.ZoomOptions &&
                (this.options.ZoomOptions = RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnTimeScaleHeaders | RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnGanttChart | RadiantQ.Gantt.ChartZoomOptions.LeftMouseButtonDownDrag);
            null == this.options.ScrollOptions && (this.options.ScrollOptions = RadiantQ.Gantt.ChartScrollOptions.CtrlAndLeftMouseButtonDownDrag);
            this._validateBasebaseTimeUnitWidthMaximum();
            this._validateBasebaseTimeUnitWidth();
            this._validateMinTimeUnitWidthForHeaderVisibility();
            this.options.BaseTimeScaleType =
                RadiantQ.Gantt.TimeScaleType.Hours;
            if (null == this.options.BaseTimeUnitWidth || 0 == this.options.BaseTimeUnitWidth) this.options.BaseTimeUnitWidth = 25
        },
        subscribeHeaderCollectionChanged: function() {
            var a = this;
            null != this.options.TimeScaleHeaders && this.options.TimeScaleHeaders.CollectionChanged.subscribe(function(b, c) {
                a.OnHeadersChanged(b, c)
            })
        },
        initTimeSpaneHeader: function() {
            this.OnHeadersChanged(null, null);
            this.subscribeHeaderCollectionChanged();
            var a = this;
            b(this.getTimeSpanHeader()).mousewheel(function(b,
                c) {
                b.preventDefault();
                b.stopPropagation();
                if (!0 != a.PreventDefaultFns) {
                    var e = !1;
                    RadiantQ.Gantt.isModifierKeyIsPresed(b) || (a.options.ZoomOptions & RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnTimeScaleHeaders) == RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnTimeScaleHeaders && (e = !0);
                    e && a.ZoomBySteps(c)
                }
            });
            b(this.GetGanttChart()).mousewheel(function(b, c) {
                if (!0 != a.PreventDefaultFns) {
                    var e = !1;
                    RadiantQ.Gantt.isModifierKeyIsPresed(b) || (a.options.ZoomOptions & RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnGanttChart) ==
                        RadiantQ.Gantt.ChartZoomOptions.MouseWheelZoomOnGanttChart && (e = !0);
                    e && (a.ZoomBySteps(c), b.preventDefault())
                }
            })
        },
        TrySetEndTime: function(a) {
            this.GetGanttChartInstance().TrySetEndTime(a)
        },
        ScrollToAnchorTime: function() {
            this.GetGanttChartInstance().ScrollToAnchorTime()
        },
        SetStartTime: function(a) {
            this.GetGanttChartInstance().SetStartTime(a)
        },
        ConvertXToTime: function(a) {
            return this.GetGanttChartInstance().ConvertXToTime(a)
        },
        ConvertTimeToX: function(a) {
            return this.GetGanttChartInstance().ConvertTimeToX(a)
        },
        RoundUp: function(a) {
            return this.RoundTime(a, this.GetActualRoundToOption())
        },
        RoundUpDuration: function(a) {
            var b = RadiantQ.Gantt.Utils.TimeComputingUtils,
                c = Date.today();
            a = c.addTimeSpan(a);
            a = this.RoundTime(a, this.GetActualRoundToOption());
            return b.GetTimeSpan(c, a)
        },
        GetActualRoundToOption: function() {
            if (this.RoundTimeEditsTo() != RadiantQ.Gantt.RoundToOptions.Auto) return this.RoundTimeEditsTo();
            var a = this.RoundTimeEditsTo();
            switch (this.options.BaseTimeScaleType) {
                case RadiantQ.Gantt.TimeScaleType.Days:
                    a = RadiantQ.Gantt.RoundToOptions.FifteenMinutes;
                    break;
                case RadiantQ.Gantt.TimeScaleType.Minutes:
                    a = RadiantQ.Gantt.RoundToOptions.None;
                    break;
                case RadiantQ.Gantt.TimeScaleType.Hours:
                    a = RadiantQ.Gantt.RoundToOptions.Minute;
                    break;
                case RadiantQ.Gantt.TimeScaleType.Months:
                    a = RadiantQ.Gantt.RoundToOptions.Day;
                    break;
                case RadiantQ.Gantt.TimeScaleType.Weeks:
                    a = RadiantQ.Gantt.RoundToOptions.Day;
                    break;
                case RadiantQ.Gantt.TimeScaleType.Years:
                    a = RadiantQ.Gantt.RoundToOptions.Day
            }
            return a
        },
        RoundTime: function(a, b) {
            var c = a.getHours(),
                e = new Date(a.getFullYear(), a.getMonth(),
                    a.getDate(), 0, 0, 0);
            switch (b) {
                case RadiantQ.Gantt.RoundToOptions.HalfDay:
                    if (e < a) {
                        var k = e.clone();
                        if (e == a || k.addHours((new RQTimeSpan(0, 12, 0, 0)).getTotalHours()) == a) break;
                        return 12 > c ? e.addHours((new RQTimeSpan(0, 12, 0, 0)).getTotalHours()) : e.addHours((new RQTimeSpan(1, 0, 0, 0)).getTotalHours())
                    }
                    return e;
                case RadiantQ.Gantt.RoundToOptions.Day:
                    return e.isLessThan(a) && 12 < a.getHours() ? e.clone().addHours((new RQTimeSpan(1, 0, 0, 0)).getTotalHours()) : e;
                case RadiantQ.Gantt.RoundToOptions.Hour:
                    return c = new Date(a.getFullYear(),
                        a.getMonth(), a.getDate(), c, 0, 0), c.isLessThan(a) ? c.clone().addHours((new RQTimeSpan(0, 1, 0, 0)).getTotalHours()) : c;
                case RadiantQ.Gantt.RoundToOptions.ThirtyMinutes:
                    return e = a.getMinutes(), 0 == e ? e = 0 : 30 >= e ? e = 30 : 59 >= e && (e = 0, c++), 23 < c && (c = 0, a = a.clone().addHours((new RQTimeSpan(1, 0, 0, 0)).getTotalHours())), new Date(a.getFullYear(), a.getMonth(), a.getDate(), c, e, 0);
                case RadiantQ.Gantt.RoundToOptions.FifteenMinutes:
                    return e = a.getMinutes(), 0 == e ? e = 0 : 15 >= e ? e = 15 : 30 >= e ? e = 30 : 45 >= e ? e = 45 : 59 >= e && (e = 0, c++), 23 < c && (c = 0, a.addHours((new RQTimeSpan(1,
                        0, 0, 0)).getTotalHours())), new Date(a.getFullYear(), a.getMonth(), a.getDate(), c, e, 0);
                case RadiantQ.Gantt.RoundToOptions.Minute:
                    return c = new Date(a.getFullYear(), a.getMonth(), a.getDate(), c, a.getMinutes(), 0), c < a ? c.addMinutes((new RQTimeSpan(0, 0, 1, 0)).getTotalMinutes()) : c
            }
            return a
        },
        triggerChildWidgetsCreated: function() {
            this.triggerEvent("ChildWidgetsCreated")
        },
        BringTimeIntoView: function(a) {
            this.GetGanttChartInstance().BringTimeIntoView(a)
        },
        OnHeadersChanged: function(a, b) {
            if (0 != this.options.TimeScaleHeaders.length) {
                var c = !1,
                    e = this.options.TimeScaleHeaders,
                    k = new RadiantQ.Gantt.BottomTwoHeaderDefinitions,
                    n = e.length - 1,
                    l = this.GetBaseScaleTypeLCD(e[n]);
                if (0 < e.length) {
                    if (null != e)
                        for (; 0 <= n && (!this.IsHeaderViewable(e[n], l) || (k.add(e[n]), 2 != k.length)); n--);
                    k.IsContentEqual(this.BottomTwoHeaders) && !0 != this.headerChanged || (this.BottomTwoHeaders = k, c = !0);
                    for (n = 0; n < e.length; n++) this.options.TimeScaleHeaders.getById(n).BaseTimeScaleType = l
                }
                c ? this._updateGanttChartsBottomTwoHeader(l) : "BaseUnitWidthChanges" == b ? this._setOption("BottomTwoHeaders",
                    this.BottomTwoHeaders) : null != b && this._triggerHeaderCollectionschangedEvent(a, b)
            }
        },
        _triggerHeaderCollectionschangedEvent: function(a, b) {},
        IsHeaderViewable: function(a, b) {
            var f = a.Type,
                e = 1;
            if (f == c.TimeScaleType.Custom) {
                if (null == a.CustomTimeScaleTypeHint) throw "CustomTimeScaleTypeHint is not set in TimeScaleHeaderDefinition of TimeScaleType.Custom.";
                f = a.CustomTimeScaleTypeHint.EquivalentType;
                e = a.CustomTimeScaleTypeHint.EquivalentUnits
            }
            return RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToApproxUnitsOfBaseType(b,
                f, e) * this.options.BaseTimeUnitWidth < this.options.MinTimeUnitWidthForHeaderVisibility ? !1 : !0
        },
        _updateGanttChartsBottomTwoHeader: function(a) {
            this.updateGanttChart("BottomTwoHeaders", this.BottomTwoHeaders);
            this._setOption("BaseTimeScaleType", a)
        },
        GetBaseScaleTypeLCD: function(a) {
            var b = a.Type;
            b == RadiantQ.Gantt.TimeScaleType.Custom && (b = RadiantQ.Gantt.TimeScaleType.Days, null != a.CustomTimeScaleTypeHint && (b = a.CustomTimeScaleTypeHint.EquivalentType));
            return b = RadiantQ.Gantt.AdjustBaseScaleType(b)
        },
        _ValidateAndSetBaseTimeUnitWidth: function(a) {
            var b =
                this.options,
                c = b.MinTimeUnitWidthForHeaderVisibility,
                e = b.BaseTimeUnitWidthMinimum,
                k = b.BaseTimeUnitWidthMaximum,
                n = this.getCurrentTimeUnitsForBaseType(b.TimeScaleHeaders.getById(0));
            if (n * a < c) {
                var l = !0;
                0 != this.CanAllowBTUW.fn.length && (l = {
                    Allow: !1,
                    NewBTUW: a
                }, this.CanAllowBTUW.raise(this, l), l = !l.Allow);
                l && (a = c / n)
            }
            a < e && (a = e);
            a > k && (a = k);
            b.BaseTimeUnitWidth != a && this._setOption("BaseTimeUnitWidth", a)
        },
        CanAllowBTUW: new ObjectEvent("CanAllowBTUW"),
        getCurrentTimeUnitsForBaseType: function(a) {
            var b = a.Type,
                f = a.BaseTimeScaleType,
                e = 1;
            if (b == c.TimeScaleType.Custom) {
                if (null == a.CustomTimeScaleTypeHint) throw "CustomTimeScaleTypeHint is not set in TimeScaleHeaderDefinition of TimeScaleType.Custom.";
                b = a.CustomTimeScaleTypeHint.EquivalentType;
                e = a.CustomTimeScaleTypeHint.EquivalentUnits
            }
            return RadiantQ.Gantt.Utils.TimeComputingUtils.ConvertToApproxUnitsOfBaseType(f, b, e)
        },
        ZoomBySteps: function(a) {
            var b = 0 > a;
            a = Math.abs(a);
            for (var c = this.options.BaseTimeUnitWidth, e = 0; e < a; e++) c = b ? c - 0.1 * c : c + 0.1 * c;
            this._ValidateAndSetBaseTimeUnitWidth(c)
        },
        _validateBasebaseTimeUnitWidthMaximum: function() {
            if (null != this.options.BaseTimeUnitWidthMaximum) {
                if (this.options.BaseTimeUnitWidthMaximum < this.options.BaseTimeUnitWidthMinimum) throw "GanttBase.BaseTimeUnitWidthMaximum cannot be less than the BaseTimeUnitWidthMinimum value.";
            } else this.options.BaseTimeUnitWidthMaximum = 100;
            return 0
        },
        _validateBasebaseTimeUnitWidth: function() {
            if (null != this.options.BaseTimeUnitWidth) {
                if (this.options.BaseTimeUnitWidth < this.options.BaseTimeUnitWidthMinimum) throw "GanttBase.BaseTimeUnitWidth cannot be less than " +
                    this.options.BaseTimeUnitWidthMinimum + ".";
                if (this.options.BaseTimeUnitWidth > this.options.BaseTimeUnitWidthMaximum) throw "GanttBase.BaseTimeUnitWidth cannot be greater than " + this.options.BaseTimeUnitWidthMaximum + ".";
            } else this.options.BaseTimeUnitWidth = 25
        },
        _validateMinTimeUnitWidthForHeaderVisibility: function() {
            if (10 > this.options.MinTimeUnitWidthForHeaderVisibility) throw "MinTimeUnitWidthForHeaderVisibility cannot be less than 10.";
        },
        GetGanttChart: function() {
            return b("div.rq-ganttChart", this.element)
        },
        GetGanttChartInstance: function() {
            return this.GetGanttChart().data("GanttChart")
        },
        GetLayoutElement: function() {
            return b(this._getUniqueSelectorIdByID("TopDivContainer"), this.element)
        },
        getTimeSpanHeader: function() {
            return b("div.rq-tsh-div", this.GetGanttChart())
        },
        createGanttWrapperElement: function() {
            this.$ganttWrapper = b('<div id="' + this._createUniqueID("GanttWrapper") + '" style="height:100%;width:100%;" class="rq-ganttWrapper" />').appendTo(this.element)
        },
        _layoutGanttControls: function() {
            this.element.empty();
            this.createGanttWrapperElement();
            this.container = b('<div id="' + this._createUniqueID("TopDivContainer") + '" class="ui-layout-pane" style="height:100%; position:relative;" />').appendTo(this.$ganttWrapper);
            this.options.ShowGridTable && b('<div id="' + this._createUniqueID("TablePanal") + '" class="ui-layout-west" style="height:100%; position:relative;"/>').appendTo(b(this._getUniqueSelectorIdByID("TopDivContainer"), this.element));
            b('<div id="' + this._createUniqueID("GanttChart") + '" class="ui-layout-center" style="height:100%; width:100%; position:relative;"/>').appendTo(b(this._getUniqueSelectorIdByID("TopDivContainer")));
            var a = b(this._getUniqueSelectorIdByID("TopDivContainer"), this.$ganttWrapper);
            this.CreateLayout(a)
        },
        HideGridTable: function() {},
        ShowGridTable: function() {},
        CreateLayout: function(a) {
            var c = this,
                f = null,
                e = window.RadiantQ_SplitterClose,
                k = window.RadiantQ_SplitterOpen,
                n = b.extend(!0, {}, this.options.LayoutOptions);
            n.SpliterWidth && (n.spacing_open = n.SpliterWidth, n.spacing_closed = n.SpliterWidth);
            e = {
                west: {
                    minSize: 0,
                    onclose_start: function() {}
                },
                enableCursorHotkey: !1,
                togglerTip_open: e,
                togglerTip_closed: k,
                resizerTip: window.RadiantQ_SplitterResize,
                west__size: this.options.TablePanelWidth,
                center__onresize: function() {
                    var b = c.GetGanttTable();
                    b.closeCell();
                    b && b.refreshScrollBsrVisibility && b.refreshScrollBsrVisibility();
                    a.trigger("layout.onresize");
                    var e = setTimeout(function() {
                        var a = c.GetGanttChartInstance();
                        a.refreshDockPanel();
                        !0 == a.options.ResizeToFit && a.ResizeToFitChanged();
                        a = c.GetGanttTable();
                        null != a && (!1 == f.state.west.isVisible ? a.uiGridBody.scrollTop(1) : a.Refresh());
                        clearTimeout(e)
                    }, 200)
                }
            };
            e = b.extend(!0, e, n);
            a.layout(e);
            f = a.data("layout")
        },
        UpdateLayout: function() {
            var a = b(".ui-layout-container", this.element);
            this.options.ShowGridTable && a.data("layout").resizeAll();
            this.RefreshGanttHeight();
            !0 == this.options.ShowGridTable && this.options.UseVirtualization && this.GetGanttTable().uiGridBody.trigger("scroll");
            this.options.UseChartVirtualization && ("ProjectGantt" == this.GanttType ? (a = b(".rq-gc-rowsParent", this.element).data("GanttTaskItemsControl"), a.Refresh(a.element, a.options.Data, a.$chartTable, a.options.ViewWidth, 0)) : (a = b(".rq-gc-rowsParent",
                this.element).data("GanttRows"), a.Refresh(a.element, a.options.Data, a.table, a.options.ViewWidth)))
        },
        _canUpdateTable: 0,
        CanUpdateTable: function(a) {
            if (void 0 == a) return this._canUpdateTable;
            a != this._canUpdateTable && (this._canUpdateTable = a, 2 == this._canUpdateTable || !1 == this.options.ShowGridTable && 1 == this._canUpdateTable) && (this.updateTable(), this._canUpdateTable = 0)
        },
        initGanttChart: function() {
            var a = this.options;
            if (null == a.SpecialLineInfos) {
                a.SpecialLineInfos = new RadiantQ.RQ_CollectionChangeNotifier;
                var c =
                    new RadiantQ.Gantt.SpecialLineInfo;
                c.LineDateTime = Date.today();
                c.ToolTipText = "today";
                a.SpecialLineInfos.add(c)
            }
            b(this._getUniqueSelectorIdByID("GanttChart"))[this.getChildWidgetName("GanttChart")]({
                BottomTwoHeaders: a.BottomTwoHeaders,
                TimeScaleHeaders: a.TimeScaleHeaders,
                BaseTimeUnitWidth: a.BaseTimeUnitWidth,
                BaseTimeScaleType: a.BaseTimeScaleType,
                ZoomOptions: a.ZoomOptions,
                ScrollOptions: a.ScrollOptions,
                CustomChartBackgroundRanges: a.CustomChartBackgroundRanges,
                OverlappedTasksRenderingOptimization: a.OverlappedTasksRenderingOptimization,
                BaseTimeUnitWidthMinimum: a.BaseTimeUnitWidthMinimum,
                BaseTimeUnitWidthMaximum: a.BaseTimeUnitWidthMaximum,
                MinTimeUnitWidthForHeaderVisibility: a.MinTimeUnitWidthForHeaderVisibility,
                TaskItemTemplate: a.TaskItemTemplate,
                TaskBarBackgroundTemplate: a.TaskBarBackgroundTemplate,
                TaskBarAdornerTemplate: a.TaskBarAdornerTemplate,
                ParentTaskItemTemplate: a.ParentTaskItemTemplate,
                ProgressBarTemplate: a.ProgressBarTemplate,
                TaskStartTime: a.TaskStartTimeProperty,
                ParentTaskStartTime: a.ParentTaskStartTimeProperty,
                TaskEndTime: a.TaskEndTimeProperty,
                ParentTaskEndTime: a.ParentTaskEndTimeProperty,
                TasksListProperty: a.TasksListProperty,
                ParentTasksListProperty: a.ParentTasksListProperty,
                FlatItemsSource: a.FlatItemsSource,
                RowHeight: a.RowHeight,
                TaskTooltipTemplate: a.TaskTooltipTemplate,
                SpecialLineInfos: a.SpecialLineInfos,
                DependencyLineColor: a.DependencyLineColor,
                DependencyListSource: a.DependencyListSource,
                WorkTimeSchedule: a.WorkTimeSchedule,
                GanttDependencyViews: this.DependencyViews,
                WorkingTimeBackground: a.WorkingTimeBackground,
                KnockoutObjectName: a.KnockoutObjectName,
                NonWorkingTimeBackground: a.NonWorkingTimeBackground,
                TimeRangeHighlightBehavior: a.TimeRangeHighlightBehavior,
                EnableAlternativeRowBackground: a.EnableAlternativeRowBackground,
                Parent: this,
                GanttType: this.GanttType,
                ResizeInfoPopup: a.ResizeInfoPopup,
                MovingInfoPopup: a.MovingInfoPopup,
                ConnectingInfoPopup: a.ConnectingInfoPopup,
                TaskBarBrowseToCueLeftTemplate: a.TaskBarBrowseToCueLeftTemplate,
                TaskBarBrowseToCueRightTemplate: a.TaskBarBrowseToCueRightTemplate,
                RowHeightBinding: a.RowHeightBinding,
                UseChartVirtualization: a.UseChartVirtualization,
                OnTaskBarLoad: a.OnTaskBarLoad,
                OnDependencyLineLoad: a.OnDependencyLineLoad,
                TouchTapAction: a.TouchTapAction,
                RowRenderingScheduleBinding: a.RowRenderingScheduleBinding,
                ViewWidth: a.ViewWidth,
                EnableCustomRowBackground: a.EnableCustomRowBackground,
                EnableCustomRowForeground: a.EnableCustomRowForeground,
                MileStoneTemplate: a.MileStoneTemplate
            });
            var f = this;
            this.initTimeSpaneHeader();
            this._triggerZoomedEvent(!0);
            a = this.GetGanttChartInstance();
            a.EndUpdate();
            a.initializeGanttComponents();
            a = this.getTimeSpanHeader();
            this.getTimeSpanHeader().bind("heightChanged", function(a) {
                a = f.element.find(".rq-gc-chartArea-div");
                var d = f.element.find(".rq-gc-topDiv");
                f.HeaderHeight = b(this).height();
                a.height(d.height() - f.HeaderHeight);
                f.UpdateHeight()
            });
            b(this.getTimeSpanHeader()).bind("timespanheaderszoomed", function(a, b) {
                f._ValidateAndSetBaseTimeUnitWidth(b)
            });
            this.HeaderHeight = a.height();
            this.CanUpdateTable(this.CanUpdateTable() + 1);
            this.GanttChartLoaded.raise(this);
            this.GanttChartIsLoaded = !0;
            //this.getWindow()
        },
        initTable: function() {
            b('<div id="' +
                this._createUniqueID("Table") + '" style="height:100%; width:100%; position:relative;"/>').appendTo(b(this._getUniqueSelectorIdByID("TablePanal")))
        },
        _getUniqueSelectorIdByID: function(a) {
            return "#" + this._createUniqueID(a)
        },
        BeginUpdate: function() {
            this.GetGanttChartInstance().BeginUpdate()
        },
        EndUpdate: function() {
            this.GetGanttChartInstance().EndUpdate()
        },
        _triggerZoomedEvent: function(a) {
            this.triggerEvent("BeforeZooming", this, {
                ZoomedIn: a,
                Options: this.options
            })
        },
        GetTimeScaleHeadersInstance: function() {
            return b(this.getTimeSpanHeader(),
                this.element).data("TimeSpanHeaders")
        },
        GetTimeScaleHeadersoptions: function(a) {
            return this.GetTimeScaleHeadersInstance().options[a]
        },
        _setOption: function(a, b) {
            if ("BaseTimeUnitWidth" == a) {
                var c = Math.round(1E3 * b) / 1E3;
                b = arguments[1] = c
            }
            this.widgetBaseSetOption.apply(this, arguments);
            switch (a) {
                case "DataSource":
                    this.UpdateDatasource(!1);
                    break;
                case "BaseTimeUnitWidth":
                    this.OnHeadersChanged(null, "BaseUnitWidthChanges");
                    c = this.GetTimeScaleHeadersoptions("BaseTimeUnitWidth") >= this.options.BaseTimeUnitWidth;
                    this._triggerZoomedEvent(c);
                    break;
                case "BaseTimeUnitWidthMinimum":
                    if (0 >= b) throw "GanttBase.BaseTimeUnitWidthMinimum cannot be less than or equal to 0.";
                    this._validateBasebaseTimeUnitWidthMaximum();
                    break;
                case "BaseTimeUnitWidthMaximum":
                    this._validateBasebaseTimeUnitWidthMaximum();
                    break;
                case "MinTimeUnitWidthForHeaderVisibility":
                    this._validateMinTimeUnitWidthForHeaderVisibility();
                    break;
                case "UseTimeRangeFilteredTasksInRows":
                    this.UseTimeRangeFilteredTasksInRows(arguments[1]);
                    break;
                case "TimeRangeFilteredTasksTimeBuffer":
                    this.TimeRangeFilteredTasksTimeBuffer(arguments[1]);
                    break;
                case "GanttTable":
                    this._hookGanttTable();
                    break;
                case "RowHeight":
                    this.UpdateRowHeight();
                    break;
                case "RowHeightBinding":
                    this.UpdateRowHeightBinding(this.options.FlatItemsSource, !1);
                    break;
                case "RoundTimeEditsTo":
                    this.RoundTimeEditsTo(b)
            }
            this.updateGanttChart(a, b);
            "TimeScaleHeaders" == a && (this.headerChanged = !0, this.OnHeadersChanged(null, null), this.headerChanged = !1, this.subscribeHeaderCollectionChanged())
        },
        PrepareGanttTable: function() {
            var a = b("<div style='height: 100%;' class='ui-gridpanel' > </div>");
            if (this.options.GanttTable.parent().length) {
                var c = this.options.GanttTable;
                a.append(c);
                this.options.GanttTable = c
            } else a.append(this.options.GanttTable);
            return a
        },
        destroy: function() {
            this.element.GanttRowselectable("destroy");
            this.element.hoverable("destroy");
            this.GetGanttChart().GanttChart("destroy");
            b(".ui-grid-body-table ", this.options.GanttTable).FlexyTable("destroy");
            var a = b(this._getUniqueSelectorIdByID("TopDivContainer"));
            a.layout().destroy();
            a.empty().remove();
            this.element.removeClass("rq-ganttBase radiantq-ui-GanttBase");
            this.widgetBaseDestroy.call(this)
        },
        Print: function(a) {
            RadiantQ.Gantt.Print(a, this)
        },
        ExportToImage: function(a) {
            RadiantQ.Gantt.ExportToImage(a, this)
        },
        ScrollIntoView: function(a, c) {
            if (a && "function" == typeof a.TableRow) {
                var f = this.GetGanttTable(),
                    e = f.uiGridBody,
                    k = f.GetDataFromRow(b("tr:last", f.uiGridBodyTable)),
                    k = !0 == b.isFunction(k.DisplayIndex) ? k.DisplayIndex() : k.DisplayIndex,
                    n = e.scrollTop(),
                    l = !0 == b.isFunction(a.DisplayIndex) ? a.DisplayIndex() : a.DisplayIndex;
                "function" == typeof c && f.AfterGridScroll.subscribe(p,
                    this);
                var m = null,
                    p = function(b) {
                        null != m && clearTimeout(m);
                        m = setTimeout(function() {
                            setTimeout(function() {
                                f.AfterGridScroll.unsubscribe(p, this);
                                c(a.TableRow(), b)
                            }, 0)
                        }, 0)
                    }, q = this.options.RowHeight,
                    s = e.scrollTop(),
                    r = s / q + 0,
                    t = f.uiGridBody.height() / q,
                    t = r + (t - 2),
                    r = !(r < l && t > l);
                !0 == this.options.UseVirtualization ? !0 == r && e.scrollTop((l - (k - 1)) * this.options.RowHeight + n + f.renderHeight / 2) : !0 == r && e.scrollTop(s + (l - t) * q);
                c && p(f)
            }
        },
        setHeight: function(a) {
            this.SetWidthAndHeight(null, a)
        },
        SetWidthAndHeight: function(a, b) {
            var c =
                this.GetLayoutElement();
            c.data("layout");
            var e = {};
            a && (e.width = a + "px");
            b && (e.height = b + "px");
            this.element.css(e);
            c.css(e);
            this.UpdateLayout()
        },
        _destroy: function() {
            this.element.data("GanttBase", null)
        }
    };
    e.GanttBase = a;
    window.TimesChangingEventArgs = function(a, b, c, e, k) {
        this.DataSource = a;
        this.StartTime = b;
        this.EndTime = c;
        this.Type = e;
        k && (this.FlexyNodeData = k)
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e, b) {
    var c = {
        DependencyViews: null,
        options: {
            name: "GanttControl",
            GanttTable: "",
            TablePanelWidth: "45%",
            ProjectStartDate: null,
            ProjectEndDate: null,
            ScheduleFrom: "ProjectStartDate",
            ValidateDependencySetting: !0,
            EnforceDependencyConstraints: !0,
            AutoCalculateSummaryTaskTimes: !0,
            AdjustDurationOnAssignment: !0,
            IDBinding: new RadiantQ.BindingOptions("ID"),
            SortOrderBinding: null,
            NameBinding: new RadiantQ.BindingOptions("Name"),
            IndentLevelBinding: new RadiantQ.BindingOptions("IndentLevel"),
            StartTimeBinding: new RadiantQ.BindingOptions("StartTime"),
            PreferredStartTimeBinding: null,
            EffortBinding: new RadiantQ.BindingOptions("Effort"),
            EndTimeBinding: null,
            PredecessorIndicesBinding: new RadiantQ.BindingOptions("PredecessorIndices"),
            ProgressPercentBinding: new RadiantQ.BindingOptions("ProgressPercent"),
            DescriptionBinding: null,
            ResourceItemsSource: null,
            ResourceNameBinding: null,
            ResourceIDBinding: null,
            ResourceScheduleBinding: null,
            AssignedResourcesBinding: new RadiantQ.BindingOptions("Resources"),
            CanShiftInProgressTasks: !0,
            GanttResources: null,
            PropertyChanged: new ObjectEvent("PropertyChanged"),
            LagStringUnitsInHours: 1,
            TaskBarBackgroundTemplate: null,
            TaskBarAdornerTemplate: null,
            FilterActivites: null,
            AutoExpandNodes: !0,
            CustomProgressCalculation: null,
            IsTaskReadOnlyBinding: null,
            CanUserReorderRows: !1,
            ProvideWBSID: null,
            WBSIDBinding: null,
            AssgnResourcesStringConverter: null,
            OnDependencyLineLoad: null,
            ActionManager: null,
            FilterOptions: null,
            ScheduleBinding: new RadiantQ.BindingOptions("Schedule")
        },
        grid: null,
        SelectedItems: null,
        _selectedItem: null,
        SelectedActivities: null,
        SelectedActivity: null,
        ActivityViews: null,
        Model: null,
        PropertyChanged: null,
        TaskContextMenu: null,
        TableContextMenu: null,
        DependencyContextMenu: null,
        RedrawChartRows: null,
        RedrawChartRow: function(a) {
            a && (a = this.ActivityViews.GetIActivityView(a)) && (a = b("td", a.$chartRow).data("GanttTaskItemBar")) && a.RedrawTaskBar(!1)
        },
        GanttTaskItemBarCollection: [],
        ActivityTimeChanged: new ObjectEvent("ActivityTimeChanged"),
        CanShiftActivity: new ObjectEvent("CanShiftActivity"),
        GetGanttTable: function() {
            if (null != this.options.GanttTable) return this.options.GanttTable.data("VWGrid")
        },
        CanShiftActivityInternal: function(a) {
            return 0 < this.CanShiftActivity.fn.length ? (a = new RadiantQ.Gantt.CancellableActivityEventArgs(a), this.CanShiftActivity.raise(this, a), !a.Cancel_M()) : !0
        },
        FilterActivites: null,
        Filter: function() {
            null != this.Model && (this.Model.Filter(this.options.FilterActivites, this.options.FilterOptions), this.UpdateViews(!1))
        },
        ResetFilters: function() {
            null != this.Model && (this.Model.Filter(null, null), this.UpdateViews(!1))
        },
        updateTable: function() {
            if (2 == this.CanUpdateTable() || !1 == this.options.ShowGridTable &&
                1 == this._canUpdateTable) {
                if (!1 != this.options.ShowGridTable) {
                    var a = this.GetGanttTable();
                    a.options.headerHeight = this.HeaderHeight;
                    a.updateGridHeight && a.updateGridHeight()
                }
                this.CreateSelectableAndhoverable();
                this.UpdateHeight()
            }
        },
        CreateSelectableAndhoverable: function() {
            var a = this;
            b(".grid-body-actualContent", this.element);
            this.$ganttWrapper[this.getChildWidgetName("GanttRowselectable")]({
                SelectionMode: this.options.SelectionMode,
                IsFlexyGantt: !1,
                SelectEvent: this.options.SelectEvent,
                selectedChange: function(b,
                    c) {
                    void 0 == c && (c = b.args);
                    a.SelectedActivities = [];
                    a.SelectedItems = a.$ganttWrapper.data("GanttRowselectable").SelectedItems().slice(0);
                    1 < a.SelectedItems.length && (a.SelectedItems = a.SelectedItems.sort(function(a, b) {
                        return a.DisplayIndex_M() - b.DisplayIndex_M()
                    }));
                    for (var f = 0; f < a.SelectedItems.length; f++) {
                        var e = a.SelectedItems[f].Activity_M();
                        a.SelectedActivities.push(e)
                    }
                    0 != c.AddedItems.length ? (a._selectedItem = c.AddedItems.Data, a.SelectedActivity = c.AddedItems.Data.Activity_M()) : (a._selectedItem = null, a.SelectedActivity =
                        null);
                    a.triggerEvent("SelectionChanged", a, c)
                },
                onEnterKeyInLastRow: function(b) {
                    a.triggerEvent("onEnterKeyInLastRow", a)
                }
            });
            this.$ganttWrapper[this.getChildWidgetName("hoverable")]();
            this.ChartVerticalScrollSyncWithTable()
        },
        _hookGanttTable: function() {
            b(this.options.GanttTable).css("height", "100%");
            b(this._getUniqueSelectorIdByID("Table")).empty().append(this.options.GanttTable);
            this.CanUpdateTable(this.CanUpdateTable() + 1)
        },
        UpdateHeight: function() {
            if (this.options.ShowGridTable) {
                var a = this.GetGanttTable();
                a.setOptions && a.setOptions("headerHeight", this.getTimeSpanHeader().height())
            }
            this.UpdateChartHeight()
        },
        _create: function() {
            "" === this.options.WorkTimeSchedule && (this.options.WorkTimeSchedule = RadiantQ.Gantt.WorkTimeSchedule.Schedule8X5);
            this.GanttType = "ProjectGantt";
            var a = this;
            this.options.ProjectStartDate instanceof Date || (this.options.ProjectStartDate = Date.today());
            this.element.data("GanttControl", this);
            this.element.addClass("rq-GanttControl");
            RadiantQ.Gantt.GanttControlActionManager && (this.ActionManager =
                new RadiantQ.Gantt.GanttControlActionManager, this.ActionManager.EnableRecordingActions = !1);
            this.options.ProjectEndDate = this.options.ProjectStartDate.clone().addDays(30);
            this.resourceIDBinding = this.options.ResourceIDBinding;
            this.ShouldEnforceDependencyConstraintsOnActivity = new ObjectEvent("ShouldEnforceDependencyConstraintsOnActivity");
            this.ReadOnlyPropertyChange = new ObjectEvent("ReadOnlyPropertyChange");
            this.baseCreate.apply(this, arguments);
            this._isReadOnly = this.options.IsReadOnly;
            this._isEffortReadOnly =
                this.options.IsEffortReadOnly;
            this._isStartTimesReadOnly = this.options.IsStartTimesReadOnly;
            this._isProgressPercentReadOnly = this.options.IsProgressPercentReadOnly;
            this._isDependencyLinesReadOnly = this.options.IsDependencyLinesReadOnly;
            this.options.ResourceIDBinding_M = function(b) {
                if (0 == arguments.length) return null != a.resourceIDBinding ? a.resourceIDBinding : this.ResourceNameBinding;
                a.resourceIDBinding = b
            };
            this.SelectedIndex_M = function(a) {
                if (0 == arguments.length) {
                    if (null == this._selectedItem || void 0 == this._selectedItem) return -1;
                    var b = this._selectedItem.DisplayIndex_M();
                    return b ? this._selectedItem ? b : -1 : this._selectedItem && (b = this.GetGanttTable().GetRowFromData(this._selectedItem), null != b) ? b[0].rowIndex : -1
                }
                this.UpdateSectionByIndex(a)
            };
            this.SelectedItem_M = function(a) {
                if (0 == arguments.length) return this._selectedItem;
                this.UpdateSection(a)
            };
            RadiantQ.CanUseDefineProperty && (Object.defineProperty(this.options, "ResourceIDBinding", {
                get: function() {
                    return null != a.resourceIDBinding ? a.resourceIDBinding : this.ResourceNameBinding
                },
                set: function(b) {
                    a.resourceIDBinding =
                        b
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(this, "SelectedIndex", {
                get: function() {
                    return null == this._selectedItem || void 0 == this._selectedItem ? -1 : this._selectedItem.DisplayIndex ? this._selectedItem ? this._selectedItem.DisplayIndex : -1 : this._selectedItem ? this.GetGanttTable().GetRowFromData(this._selectedItem)[0].rowIndex : -1
                },
                set: function(a) {
                    this.UpdateSectionByIndex(a)
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(this, "SelectedItem", {
                get: function() {
                    return this._selectedItem
                },
                set: function(a) {
                    this.UpdateSection(a)
                },
                enumerable: !0,
                configurable: !0
            }))
        },
        OnPropertyChanged: function(a, b) {
            this.options.PropertyChanged.raise(this, {
                PropertyName: a,
                value: b
            })
        },
        UpdateSectionByIndex: function(a) {
            a = this.ActivityViews.length - 1 >= a ? a : this.ActivityViews.length - 1;
            this.UpdateSection(this.ActivityViews[a])
        },
        UpdateSection: function(a) {
            this.$ganttWrapper.data("GanttRowselectable").selectItemByitem(a)
        },
        GanttTableElement: null,
        AddNewItem: function(a, b) {
            var c = this.ActivityViews.HoldtriggeringChange;
            !1 == c && (this.ActivityViews.HoldtriggeringChange = !0);
            void 0 == b && (b = !0);
            var f = this.Model.CreateNewActivity(a, b);
            !1 == c && (this.ActivityViews.HoldtriggeringChange = !1);
            return f
        },
        InsertNewItemAsSiblingBelow: function(a, b, c) {
            if (void 0 == b) window.console && console.log && console.log("undefined is not a valid index to insert as sibling below.");
            else {
                this.ActivityViews.HoldtriggeringChange = !0;
                void 0 == c && (c = !0);
                a = this.AddNewItem(a, c);
                c = null;
                var f = !0; - 1 != b && (c = this.ActivityViews[b], f = c._isExpanded, !0 == c._isParent && c.IsExpanded_M(!1));
                this.GetGanttTable().MoveRows(this.ActivityViews.length -
                    1, 1, b);
                null != c && c.IsExpanded_M(f);
                this.ActivityViews.HoldtriggeringChange = !1;
                return a
            }
        },
        UpdateDatasource: function(a) {
            var b = this.options;
            null == b.DataSource ? this.Model instanceof RadiantQ.Gantt.Model.IGanttModel && (this.Model.ShouldEnforceDependencyConstraintsOnActivity.unsubscribe(this.Model_ShouldEnforceDependencyConstraints, this), this.Model.ShouldEnforceDependencyConstraintsOnActivity.unsubscribe(this.Model_ShouldEnforceDependencyConstraints, this.Model), this.Model.ProvideDefaultWBSID.unsubscribe(b.ProvideWBSID,
                this.Model), this.Model.Dispose(), this.Model = null) : (this.Model = new RadiantQ.Gantt.Model.DataBoundGanttModel(b.DataSource, b.ProjectStartDate, b.ProjectEndDate, b.ScheduleFrom, b.ValidateDependencySetting, b.EnforceDependencyConstraints, b.AutoCalculateSummaryTaskTimes, b.AdjustDurationOnAssignment, b.LagStringUnitsInHours, b.IDBinding, b.SortOrderBinding, b.NameBinding, b.IndentLevelBinding, b.StartTimeBinding, b.PreferredStartTimeBinding, b.EffortBinding, b.EndTimeBinding, b.PredecessorIndicesBinding, b.ProgressPercentBinding,
                    b.ScheduleBinding, b.DescriptionBinding, b.ResourceItemsSource, b.ResourceNameBinding, b.ResourceIDBinding, b.ResourceScheduleBinding, b.AssignedResourcesBinding, b.WBSIDBinding, b.CustomProgressCalculation, b.WorkTimeSchedule, {
                        Handler: this.Model_ShouldEnforceDependencyConstraints,
                        Context: this
                    }, b.ProvideWBSID, b.CanInsertPropertyChangeTriggeringPropertiesInData, b.AutoExpandNodes, b.AssgnResourcesStringConverter), null != this.options.FilterActivites && this.Model.Filter(this.options.FilterActivites, this.options.FilterOptions),
                this.Model.CanShiftInProgressTasks_M(this.options.CanShiftInProgressTasks));
            this.triggerEvent("ModelCreated", this, void 0);
            this.UpdateViews(a)
        },
        Model_ShouldEnforceDependencyConstraints: function(a, b) {
            0 < this.ShouldEnforceDependencyConstraintsOnActivity.fn.length && this.ShouldEnforceDependencyConstraintsOnActivity.raise(this, b)
        },
        _scheduleBinding: null,
        UpdateViews: function(a) {
            this.ActivityViews && this.ActivityViews.Dispose();
            this.ActivityViews = new RadiantQ.Gantt.View.GanttFlatActivitiesList(this.Model, this);
            this.ActivityViews.RefreshDisplayIndexOfChildren();
            this.DependencyViews = this.GetGanttFlatDependenciesList();
            this._scheduleBinding && this._scheduleBinding.Dispose();
            this.Model && (this._scheduleBinding = new Binding(this.Model, "WorkTimeSchedule", this, "WorkTimeSchedule", null, null), this.options.GanttResources = this.Model.GanttResources_M());
            this._setOption("FlatItemsSource", this.ActivityViews);
            this.CreateGanttTable(a);
            var b = {};
            b.Source = this.ActivityViews;
            b.canUpdateTable = a;
            this.triggerEvent("FlatActivitiesListCreated",
                this, b)
        },
        CreateGanttTable: function(a) {
            if (this.IsGanttTable && this.options.ShowGridTable)
                if (a) {
                    "" == this.options.GanttTable && (this.options.GanttTable = b("<div class='rq-GanttTableBase' style='height:100%' id=" + this._createUniqueID("grid") + "/>"));
                    a = this.options.GanttTable;
                    var d = this.PrepareGanttTable();
                    a.addClass("rq-GanttTable");
                    this.options.CanUserReorderRows && null != this.options.GanttTableOptions.columns && this.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragRowHeader && this.options.GanttTableOptions.columns.unshift({
                        field: "",
                        width: 25,
                        iseditable: !1,
                        locked: !0,
                        isRowHeader: !0
                    });
                    b(this._getUniqueSelectorIdByID("Table"), this.element).empty().append(d);
                    this.grid = a.GanttTable({
                        datasource: this.ActivityViews,
                        RowHeight: this.options.RowHeight,
                        columns: this.options.GanttTableOptions.columns,
                        editmode: this.options.GanttTableOptions.editmode,
                        startEdit: this.options.GanttTableOptions.startEdit,
                        EnableHeaderMenu: this.options.GanttTableOptions.EnableHeaderMenu,
                        endEdit: this.options.GanttTableOptions.endEdit,
                        UseGridVirtualization: this.options.UseVirtualization,
                        EnableColumnHeaderContextMenu: this.options.EnableColumnHeaderContextMenu,
                        IsProjectGantt: !0,
                        Parent: this,
                        resizable: !0,
                        SaveColumnState: this.options.GanttTableOptions.SaveColumnState,
                        table: this.options.GanttTableOptions.table,
                        CanUserReorderRows: this.options.CanUserReorderRows,
                        EnableAlternativeRowBackground: this.options.EnableAlternativeRowBackground,
                        GanttTableRowLoadCallBack: this.options.GanttTableRowLoadedCallBack,
                        ColumnBehaviour: this.options.GanttTableOptions.ColumnBehaviour
                    });
                    a.bind("refresh", b.proxy(function() {
                            this.UpdateChartHeight()
                        },
                        this));
                    this.grid.uiGridBody.css("overflow-x", "scroll");
                    this.GanttTableElement = a;
                    this.CanUpdateTable(this.CanUpdateTable() + 1)
                } else this.grid.setOptions("datasource", this.ActivityViews), this.$ganttWrapper.GanttRowselectable({
                    Source: this.ActivityViews
                })
        },
        GetGanttFlatDependenciesList: function() {
            this.DependencyViews && this.DependencyViews.Dispose(this.Model);
            return new RadiantQ.Gantt.View.GanttFlatDependenciesList(this.Model, this.ActivityViews, this)
        },
        RefreshDisplayIndex: function() {
            this.ActivityViews.RefreshDisplayIndexOfChildren()
        },
        OnWorkTimeScheduleChanged: function() {
            this.UpdateCalendarSettingInScaleHeaders();
            null != this.Model && (this.Model.WorkTimeSchedule = this.options.WorkTimeSchedule)
        },
        RaiseActivityTimeChanged: function(a, b, c) {
            this.OnActivityTimeChanged(a, b, c)
        },
        OnActivityTimeChanged: function(a, b, c) {
            this.triggerEvent("ActivityTimeChanged", this, new RadiantQ.Gantt.ActivityTimeChangedEventArgs(a, b, c))
        },
        updateGanttChart: function(a, b) {},
        OnBeforeDragStart: function(a, b) {
            for (var c = this.$ganttWrapper.data("GanttRowselectable"), f = [],
                    e = 100, k = 0; k < b; k++) this.ActivityViews[a + k]._indentLevel < e && (e = this.ActivityViews[a + k]._indentLevel);
            for (k = a + b; k < this.ActivityViews.length; k++) {
                var n = this.ActivityViews[k];
                if (n._indentLevel > e) c.selectedItems.add(n), f.push(n);
                else break
            }
            1 == b && f.push(c.selectedItems[0]);
            return f
        },
        MoveRows: function(a, b, c, f, e, k) {
            if (!(-1 > a || -1 > c)) {
                e.value = 0;
                k.value = c;
                if (a == c || k.value >= this.ActivityViews.length) return 0;
                k = new RadiantQ.Gantt.Utils.DelayUpdates;
                var n = null; - 1 < c && (n = this.ActivityViews[c]);
                c = null;
                var l = -1;
                null !=
                    f ? (c = f, l = c.Activity_M().ChildActivities_M().length) : null != n && (n.IsParent_M() && n.IsExpanded_M() ? (c = n, l = 0) : (c = n.ParentView_M(), l = null != c ? c.Activity_M().ChildActivities_M().indexOf(n.Activity_M()) + 1 : this.Model.Activities_M().indexOf(n.Activity_M()) + 1));
                f = new ObservableCollection;
                for (var m = this.ActivityViews[a]._indentLevel, n = 0; n < b; n++) {
                    var p = this.ActivityViews[a + n];
                    if (p._indentLevel <= m && (f.add(p), e.value++, p._isParent && p._isExpanded)) {
                        var q = this.GetVisibleChildCount(p.activity);
                        e.value += q;
                        p._indentLevel <
                            m && (n += q)
                    }
                }
                if (null != c)
                    for (n = 0; n < f.length; n++) a = f[n], a.ParentView_M() != c && this.Model.PrepareParenting(c.Activity_M(), a.Activity_M()), l = this.ReparentActivity(a, c, l), a.ReparentView(c);
                else
                    for (n = 0; n < f.length; n++) a = f[n], l = this.ReparentActivity(a, null, l), a.ReparentView(null);
                k.Dispose();
                return e
            }
        },
        GetVisibleChildCount: function(a) {
            var b = a.ChildActivities_M();
            if (0 == b.length || !1 == a._isExpanded) return 0;
            var c = 0,
                b = a.ChildActivities_M();
            for (a = 0; a < b.length; a++) c++, c += this.GetVisibleChildCount(b[a]);
            return c
        },
        ReparentActivity: function(a, b, c) {
            var f = -1,
                f = a.ParentActivity_M(),
                e = null != f ? f.ChildActivities_M() : this.Model.Activities_M(),
                f = e.indexOf(a.activity);
            e.remove(a.activity);
            this.Model.ApplyPreferredStartTimeOnActivity(a.activity, a.activity.PreferredStartTime_M());
            b == a.ParentView_M() && c > f && c--;
            if (null != b) {
                if (0 > c) return e = b.Activity_M().ChildActivities_M(), e.add(a.Activity_M()), e.length;
                b.Activity_M().ChildActivities_M().insert(c, a.Activity_M());
                return c + 1
            }
            0 > c && (c = 0);
            this.Model._activities.insert(c, a.Activity_M());
            return c + 1
        },
        GetIndexOfLastDescendant: function(a) {
            if (0 < a.Activity_M().ChildActivities_M().length && a._isExpanded) {
                var b = this.GetLastUnfilteredOutActivity(a.Activity_M());
                if (null != b) return a = this.ActivityViews.GetIActivityView(b), b = this.GetIndexOfLastDescendant(a), -1 != b ? b : this.ActivityViews.indexOf(a)
            }
            return this.ActivityViews.indexOf(a)
        },
        GetLastUnfilteredOutActivity: function(a) {
            for (var b = a.ChildActivities_M().length - 1; 0 <= b; b--) {
                var c = a.ChildActivities_M()[b];
                if (!c.IsFilteredOut_M()) return c
            }
            return null
        },
        InsertNewItemAsChildOf: function(a, b, c) {
            this.ActivityViews.HoldtriggeringChange = !0;
            a = this.AddNewItem(a, c);
            this.GetGanttTable().InsertRowsAsChild(this.ActivityViews.length - 1, 1, b);
            this.ActivityViews.HoldtriggeringChange = !1;
            return a
        },
        CanIndent: function(a) {
            var b = this.ActivityViews.indexOf(a);
            return 0 < b && null != this.GetParentableActivityView(b - 1, a._indentLevel) ? !0 : !1
        },
        Indent: function(a) {
            this.ActivityViews.HoldtriggeringChange = !0;
            var b = this.ActivityViews.indexOf(a);
            if (0 < b) {
                var c = this.GetParentableActivityView(b -
                    1, a._indentLevel);
                if (null != c) {
                    var f = new RadiantQ.Gantt.Utils.DelayUpdates;
                    this.Model.PrepareParenting(c.activity, a.activity);
                    var e = this.Model._dependencies;
                    if (null != e && e.IsActivityFinishDependentOnAnother(c.activity)) {
                        alert("New parent cannot have a FinishToFinish or StartToFinish dependency.");
                        return
                    }
                    e = 0;
                    !1 == c._isExpanded ? e = c.Activity_M().ChildActivities_M().length : (b = this.LookForViewWithIndentLevel(a._indentLevel + 1, b - 1, !1), -1 != b && (e = c.Activity_M().ChildActivities_M().indexOf(this.ActivityViews[b].activity) +
                        1));
                    this.ReparentActivity(a, c, e);
                    a.ReparentView(c);
                    f.Dispose()
                }
            }
            this.ActivityViews.HoldtriggeringChange = !1
        },
        GetParentableActivityView: function(a, b) {
            for (var c = a; 0 <= c; c--) {
                if (this.ActivityViews[c].IndentLevel_M() == b) return this.ActivityViews[c];
                if (this.ActivityViews[c]._indentLevel < b) break
            }
            return null
        },
        LookForViewWithIndentLevel: function(a, b, c) {
            if (c)
                for (; b < this.ActivityViews.lenght; b++) {
                    if (this.ActivityViews[b]._indentLevel == a) return b
                } else
                    for (; 0 <= b; b--)
                        if (this.ActivityViews[b]._indentLevel == a) return b;
            return -1
        },
        Outdent: function(a) {
            this.ActivityViews.HoldtriggeringChange = !0;
            var b = new RadiantQ.Gantt.Utils.DelayUpdates,
                c = this.ActivityViews.indexOf(a),
                f = a._indentLevel;
            if (0 < c && 0 < f) {
                if (1 < f) {
                    var e = this.GetParentableActivityView(c - 1, f - 2);
                    if (null != e) {
                        var k = e.Activity_M().ChildActivities_M().indexOf(a.ParentActivity_M()); - 1 != k && k++;
                        this.ReparentActivity(a, e, k);
                        a.ReparentView(e)
                    }
                } else 1 == f && (e = this.LookForViewWithIndentLevel(0, c - 1, !1), e = this.Model.Activities_M().indexOf(this.ActivityViews[e].activity) + 1,
                    this.ReparentActivity(a, null, e), a.ReparentView(null));
                c = this.GetActivitiesToBeMadeChildren(c + 1, f);
                f = this.ActivityViews.slice(0);
                for (e = 0; e < c.length; e++) k = c[e], this.ReparentActivity(f[k], a, -1), f[k].ReparentView(a)
            }
            this.Model.ApplyPreferredStartTimeOnActivity(a.activity, a.activity.PreferredStartTime_M());
            b.Dispose();
            this.ActivityViews.HoldtriggeringChange = !1
        },
        CollapseAllRecursive: function(a) {
            if (this.ActivityViews.Contains(a)) {
                a = this.ActivityViews.GetIActivityView(a);
                for (var b = a.Activity_M().ChildActivities_M(),
                        c = 0; c < b.length; c++) this.CollapseAllRecursive(b[c]);
                a._isParent && a.IsExpanded_M(!1)
            }
        },
        CollapseAll: function() {
            for (var a = 0; a < this.Model._activities.length; a++) this.CollapseAllRecursive(this.Model._activities[a])
        },
        ExpandAllRecursive: function(a) {
            if (this.ActivityViews.Contains(a)) {
                a = this.ActivityViews.GetIActivityView(a);
                a._isParent && a.IsExpanded_M(!0);
                a = a.Activity_M().ChildActivities_M();
                for (var b = 0; b < a.length; b++) this.ExpandAllRecursive(a[b])
            }
        },
        ExpandAll: function() {
            for (var a = 0; a < this.Model._activities.length; a++) this.ExpandAllRecursive(this.Model._activities[a])
        },
        GetCriticalPathActivities: function(a) {
            return null != this.Model ? this.Model.GetCriticalActivities(a) : []
        },
        LevelResources: function(a, b) {
            null != this.Model && this.Model.LevelResources(a, b)
        },
        GetActivitiesToBeMadeChildren: function(a, b) {
            for (var c = [], f = a; f < this.ActivityViews.length && !(this.ActivityViews[f]._indentLevel < b); f++) this.ActivityViews[f]._indentLevel == b && c.push(f);
            return c
        },
        RemoveActivity: function(a) {
            var b = new RadiantQ.Gantt.Utils.DelayUpdates,
                c = this.Model.GetActivityById(a);
            if (null == c) throw "An activity corresponding to the specified id: " +
                a + ", could not be found";
            a = [];
            this.BuildActivityHierarchyList(c, a);
            var f = c.Parent_M();
            if (this.ActivityViews.Contains(c)) {
                var e = this.ActivityViews.GetIActivityView(c);
                this.ActivityViews.indexOf(e);
                this.RecursivelyRemoveViews(e)
            }
            this.Model.RemoveActivity(f, c);
            this.Model.UpdateSortOrderFrom(f);
            b.Dispose();
            return a
        },
        BuildActivityHierarchyList: function(a, b) {
            b.push(a);
            for (var c = a.ChildActivities_M(), f = 0; f < c.length; f++) this.BuildActivityHierarchyList(c[f], b)
        },
        RecursivelyRemoveViews: function(a) {
            if (a._isExpanded)
                for (var b =
                    a.Activity_M().ChildActivities_M(), c = 0; c < b.length; c++) {
                    var f = b[c];
                    this.ActivityViews.Contains(f) && (f = this.ActivityViews.GetIActivityView(f), this.RecursivelyRemoveViews(f))
                }
            a.ReparentView(null);
            this.ActivityViews.RemoveAndDispose(a)
        },
        _destroy: function() {
            this.element.data("GanttControl", null)
        },
        destroy: function() {
            this.baseDestroy.apply(this, arguments)
        },
        _setOption: function(a, b) {
            switch (a) {
                case "ValidateDependencySetting":
                    this.Model.ValidateDependencySetting = b;
                    break;
                case "EnforceDependencyConstraints":
                    this.Model.EnforceDependencyConstraints =
                        b;
                    break;
                case "IsReadOnly":
                    this._isReadOnly = b;
                    this.ReadOnlyPropertyChange.raise(this, {
                        PropertyName: "IsReadOnly",
                        Value: b
                    });
                    break;
                case "IsEffortReadOnly":
                    this._isEffortReadOnly = b;
                    this.ReadOnlyPropertyChange.raise(this, {
                        PropertyName: "IsEffortReadOnly",
                        Value: b
                    });
                    break;
                case "IsStartTimesReadOnly":
                    this._isStartTimesReadOnly = b;
                    this.ReadOnlyPropertyChange.raise(this, {
                        PropertyName: "IsStartTimesReadOnly",
                        Value: b
                    });
                    break;
                case "IsProgressPercentReadOnly":
                    this._isProgressPercentReadOnly = b;
                    this.ReadOnlyPropertyChange.raise(this, {
                        PropertyName: "IsProgressPercentReadOnly",
                        Value: b
                    });
                    break;
                case "IsDependencyLinesReadOnly":
                    this._isDependencyLinesReadOnly = b;
                    this.ReadOnlyPropertyChange.raise(this, {
                        PropertyName: "IsDependencyLinesReadOnly",
                        Value: b
                    });
                    break;
                case "WorkTimeSchedule":
                    _workTimeSchedule = b
            }
            this.baseSetOption.apply(this, arguments)
        },
        baseCreate: function() {},
        baseSetOption: function() {},
        baseDestroy: function() {},
        triggerEvent: function(a, b, c) {},
        getChildWidgetName: function(a) {}
    };
    e.GanttControl = c
})(RadiantQ.Gantt.Widget, jQuery);
(function(e, b) {
    b.fn.GetFlexyGanttInstance = function() {
        var a = this.data("FlexyGantt");
        if (a) return a;
        throw Error("Cannot call GetFlexyGanttInstance method before it is initialized");
    };
    var c = {
        DependencyViews: null,
        options: {
            name: "FlexyGantt",
            RowRenderingScheduleBinding: null,
            resolverFunction: function() {
                return null
            },
            dynamicResolverFunction: null,
            AutoExpandNodes: !0,
            RowHeightBinding: null,
            ForceParentTemplateEvenIfChildless: !0,
            OverlappedTasksRenderingOptimization: null,
            UseTimeRangeFilteredTasksInRows: !1,
            TimeRangeFilteredTasksTimeBuffer: null,
            TablePanelWidth: "20%",
            CanUserReorderRows: !1,
            GanttTable: "",
            DependencyListSource: new RadiantQ.RQ_CollectionChangeNotifier,
            DependencyLineStartRowItemBinding: null,
            DependencyLineEndRowItemBinding: null,
            DependencyLineStartItemBinding: null,
            DependencyLineEndItemBinding: null,
            DependencyLineTypeBinding: null,
            DependencyLineStartItemPosAdjustmentBinding: null,
            DependencyLineEndItemPosAdjustmentBinding: null
        },
        grid: null,
        SelectedItems: null,
        _selectedItem: null,
        FlatItemsSource: null,
        FlatHierarchicalItemsList: null,
        RedrawChartRow: null,
        FilterTasksByTimeRange: null,
        TaskTimeChanging: null,
        TaskTimeChanged: null,
        DetermineShiftBehavior: new ObjectEvent("DetermineShiftBehavior"),
        AdjustLinkLineStartPosition: new ObjectEvent("AdjustLinkLineStartPosition"),
        OnTaskBarMouseDown: new ObjectEvent("OnTaskBarMouseDown"),
        OnDependencyDrag: new ObjectEvent("OnDependencyDrag"),
        GanttTableElement: null,
        CreateSelectableAndhoverable: function() {
            var a = this;
            b(".grid-body-actualContent", this.element);
            this.$ganttWrapper[this.getChildWidgetName("GanttRowselectable")]({
                SelectionMode: this.options.SelectionMode,
                IsFlexyGantt: !0,
                SelectEvent: this.options.SelectEvent,
                selectedChange: function(d, c) {
                    void 0 == c && (c = d.args);
                    a.SelectedItems = b.makeArray(a.$ganttWrapper.data("GanttRowselectable").SelectedItems());
                    1 < a.SelectedItems.length && (a.SelectedItems = a.SelectedItems.sort(function(a, b) {
                        return a.DisplayIndex() - b.DisplayIndex()
                    }));
                    0 != c.AddedItems.length ? (a._selectedItem = c.AddedItems.Data, !1 == RadiantQ.CanUseDefineProperty && (a.SelectedItem = c.AddedItems.Data, a.SelectedIndex = a._selectedItem ? a._selectedItem.DisplayIndex() : -1)) : (!1 == RadiantQ.CanUseDefineProperty && (a.SelectedItem = null, a.SelectedIndex = -1), a._selectedItem = null);
                    a.triggerEvent("SelectionChanged", a, c)
                },
                onEnterKeyInLastRow: function(b) {
                    a.triggerEvent("onEnterKeyInLastRow", a)
                }
            });
            this.$ganttWrapper[this.getChildWidgetName("hoverable")]();
            this.ChartVerticalScrollSyncWithTable()
        },
        _canUpdateTable: 0,
        updateTable: function() {
            if (2 == this.CanUpdateTable() || !1 == this.options.ShowGridTable && 1 == this._canUpdateTable)!1 == this.options.ShowGridTable ? setTimeout(function() {
                this.UpdateHeight();
                this.CreateSelectableAndhoverable()
            }.bind(this), 0) : (this.UpdateHeight(), this.CreateSelectableAndhoverable())
        },
        _hookGanttTable: function() {
            b(this.options.GanttTable).css("height", "100%");
            b(this._getUniqueSelectorIdByID("Table")).empty().append(this.options.GanttTable);
            this.CanUpdateTable(this.CanUpdateTable() + 1)
        },
        UpdateHeight: function() {
            if (this.options.ShowGridTable) {
                var a = this.GetGanttTable();
                a.setOptions && a.setOptions("headerHeight", this.getTimeSpanHeader().height())
            }
            this.UpdateChartHeight()
        },
        ConvertToValidTimes: function(a,
            b, c, f, e, k, n, l, m) {
            "ResizeAtStart" != k ? null == m ? (f.Value = b.clone(), e.Value = b.addMilliseconds(c.totalMilliseconds_M())) : (f.Value = b.clone(), f.Value = RadiantQ.Gantt.Model.BaseGanttModel.AdjustStartTime(f.Value, c, m), e.Value = RadiantQ.Gantt.Model.BaseGanttModel.ComputeEndTime(f.Value, c, m)) : null == m ? (f.Value = b.clone(), e.Value = b.addMilliseconds(-c.totalMilliseconds_M())) : (f.Value = b.clone(), f.Value = RadiantQ.Gantt.Model.BaseGanttModel.AdjustEndTime(f.Value, m), e.Value = RadiantQ.Gantt.Model.BaseGanttModel.ComputeStartTime(f.Value,
                c, m));
            this.OnTaskTimeChanging(a, f, e, k, n, l)
        },
        OnTaskTimeChanging: function(a, b, c, f, e, k) {
            0 < this.TaskTimeChanging.fn.length && (a = new TimesChangingEventArgs(a, b.Value, c.Value, f), a.shouldSyncDragCue = !1, a.row_index = e.row_index, a.element = k, this.TaskTimeChanging.raise(this, a), e.shouldSyncDragCue = a.shouldSyncDragCue, b.Value = a.StartTime, c.Value = a.EndTime)
        },
        GetGanttTable: function() {
            return this.options.GanttTable ? this.options.GanttTable.data("VWGrid") : null
        },
        UseTimeRangeFilteredTasksInRows: function(a) {
            if (void 0 ==
                a || null == a) return this._useTimeRangeFilteredTasksInRows || (this._useTimeRangeFilteredTasksInRows = !1), this._useTimeRangeFilteredTasksInRows;
            this._useTimeRangeFilteredTasksInRows = a
        },
        TimeRangeFilteredTasksTimeBuffer: function(a) {
            if (void 0 == a || null == a) {
                if (this._timeRangeFilteredTasksTimeBuffer) return this._timeRangeFilteredTasksTimeBuffer;
                this._timeRangeFilteredTasksTimeBuffer = null
            } else this._timeRangeFilteredTasksTimeBuffer = a
        },
        _create: function() {
            "" === this.options.WorkTimeSchedule && (this.options.WorkTimeSchedule =
                null);
            this._validateOptions();
            this.GanttType = "FlexyGantt";
            this.element.data("FlexyGantt", this);
            this.element.addClass("rq-FlexyGantt");
            this._useTimeRangeFilteredTasksInRows = this.options.UseTimeRangeFilteredTasksInRows;
            this._timeRangeFilteredTasksTimeBuffer = this.options.TimeRangeFilteredTasksTimeBuffer;
            this.FilterTasksByTimeRange = new ObjectEvent("FilterTasksByTimeRange");
            this.TaskTimeChanging = new ObjectEvent("TaskTimeChanging");
            this.TaskTimeChanged = new ObjectEvent("TaskTimeChanged");
            this.baseCreate.apply(this,
                arguments);
            this.SelectedItems = new ObservableCollection;
            this.SelecteIndex_M = function(a) {
                if (0 == arguments.length) {
                    if (null == this._selectedItem || void 0 == this._selectedItem) return -1;
                    var b = this._selectedItem.DisplayIndex;
                    if (void 0 == b || null == b) return this._selectedItem.TableRow() ? this._selectedItem.TableRow()[0].rowIndex : -1;
                    var c = "function" == typeof b,
                        b = c ? this._selectedItem.DisplayIndex() : b; - 1 == b && (b = this.FlatHierarchicalItemsList.indexOf(this._selectedItem.HierarchicalItem), -1 != b && (c ? this._selectedItem.DisplayIndex(b) :
                            this._selectedItem.DisplayIndex = b));
                    return b
                }
                this.UpdateSectionByIndex(a)
            };
            this.SelectedItem_M = function(a) {
                if (0 == arguments.length) return this._selectedItem;
                this.UpdateSection(a)
            };
            RadiantQ.CanUseDefineProperty ? (Object.defineProperty(this, "SelectedIndex", {
                get: function() {
                    if (null == this._selectedItem || void 0 == this._selectedItem) return -1;
                    var a = this._selectedItem.DisplayIndex;
                    if (void 0 == a || null == a) return this._selectedItem.TableRow() ? this._selectedItem.TableRow()[0].rowIndex : -1;
                    var b = "function" == typeof a,
                        a = b ? this._selectedItem.DisplayIndex() : a; - 1 == a && (a = this.FlatHierarchicalItemsList.indexOf(this._selectedItem.HierarchicalItem), -1 != a && (b ? this._selectedItem.DisplayIndex(a) : this._selectedItem.DisplayIndex = a));
                    return a
                },
                set: function(a) {
                    this.UpdateSectionByIndex(a)
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(this, "SelectedItem", {
                get: function() {
                    return this._selectedItem
                },
                set: function(a) {
                    this.UpdateSection(a)
                },
                enumerable: !0,
                configurable: !0
            })) : (this.SelectedIndex = -1, this.SelectedItem = null)
        },
        _validateOptions: function() {
            this.baseValidateOption.apply(this,
                arguments);
            var a = this.options;
            window.console && (a.TaskStartTimeProperty && "string" == typeof a.TaskStartTimeProperty || console.error("TaskStartTimeProperty has to be a string referring a property name in the bound object."), a.TaskEndTimeProperty && "string" == typeof a.TaskEndTimeProperty || console.error("TaskEndTimeProperty has to be a string referring a property name in the bound object."), a.ParentTaskStartTimeProperty && "string" != typeof a.ParentTaskStartTimeProperty && console.error("ParentTaskStartTimeProperty has to be a string referring a property name in the bound object."),
                a.ParentTaskEndTimeProperty && "string" != typeof a.ParentTaskEndTimeProperty && console.error("ParentTaskEndTimeProperty has to be a string referring a property name in the bound object."))
        },
        UpdateSectionByIndex: function(a) {
            a = this.FlatItemsSource.FlatItemsSource.length - 1 >= a ? a : this.FlatItemsSource.FlatItemsSource.length - 1;
            this.UpdateSection(this.FlatItemsSource.FlatItemsSource[a])
        },
        UpdateSection: function(a) {
            this.$ganttWrapper.data("GanttRowselectable").selectItemByitem(a)
        },
        RaiseFilterTasksByTimeRange: function(a) {
            if (null !=
                jQuery._data(this.element[0], "events")[this.widgetName.toLowerCase() + "filtertasksbytimerange"] || this.options.FilterTasksByTimeRange) {
                var b = this.GetGanttChartInstance();
                a = new RadiantQ.FlexyGantt.FilterTasksByTimeRangeEventArgs(a, b.options.ComputedStartTime, b.options.ComputedEndTime);
                this.triggerEvent("FilterTasksByTimeRange", this, a);
                return a.FilteredList
            }
            return null
        },
        FlatItemsSource: null,
        UpdateDatasource: function(a) {
            var b = this,
                c = this.options,
                f = new RadiantQ.FlexyGantt.HierarchyToList(this.options.DataSource,
                    function(a, f) {
                        var e = b.options.resolverFunction.call(this, a, f);
                        c.CanInsertPropertyChangeTriggeringPropertiesInData && b._injectGetAndSetOnData(f, a, c, e);
                        return e
                    }, this.options);
            this.FlatItemsSource = f;
            this.FlatHierarchicalItemsList = this.FlatItemsSource.FlatHierarchicalItemsList;
            this.options.DataSource && this.FlatItemsSource.UpdateDisplayIndex();
            this.UpdateRowHeightBinding(f, !0);
            var e = {};
            e.Source = f;
            e.canUpdateTable = a;
            this.triggerEvent("FlatItemsSourceCreated", this, e);
            this.CreateFlexyTable(f, a);
            void 0 == f.FlatItemsSource &&
                (f.FlatItemsSource = null);
            this._setOption("FlatItemsSource", f.FlatItemsSource);
            f.dynamicResolver = this.options.dynamicResolverFunction
        },
        CreateFlexyTable: function(a, d) {
            if (this.IsGanttTable && this.options.ShowGridTable)
                if (d) {
                    "" == this.options.GanttTable && (this.options.GanttTable = b("<div class='rq-GanttTableBase' style='height:100%' id=" + this._createUniqueID("grid") + "/>"));
                    var c = this.options.GanttTable,
                        f = this.PrepareGanttTable();
                    c.addClass("rq-FlexyTable");
                    this.options.CanUserReorderRows && null != this.options.GanttTableOptions.columns &&
                        this.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragRowHeader && this.options.GanttTableOptions.columns.unshift({
                            field: "",
                            width: 25,
                            iseditable: !1,
                            isRowHeader: !0,
                            locked: !0
                        });
                    b(this._getUniqueSelectorIdByID("Table"), this.element).empty().append(f);
                    this.grid = c.FlexyGrid({
                        datasource: a.FlatItemsSource,
                        RowHeight: this.options.RowHeight,
                        table: this.options.GanttTableOptions.table,
                        Parent: this,
                        UseGridVirtualization: this.options.UseVirtualization,
                        EnableHeaderMenu: this.options.GanttTableOptions.EnableHeaderMenu,
                        columns: this.options.GanttTableOptions.columns,
                        CanUserReorderRows: this.options.CanUserReorderRows,
                        SaveColumnState: this.options.GanttTableOptions.SaveColumnState,
                        EnableAlternativeRowBackground: this.options.EnableAlternativeRowBackground,
                        GanttTableRowLoadCallBack: this.options.GanttTableRowLoadedCallBack,
                        startEdit: this.options.GanttTableOptions.startEdit,
                        endEdit: this.options.GanttTableOptions.endEdit,
                        ColumnBehaviour: this.options.GanttTableOptions.ColumnBehaviour,
                        resizable: !0
                    });
                    this.grid.uiGridBody.css("overflow-x",
                        "scroll");
                    this.GanttTableElement = c;
                    c.bind("refresh", b.proxy(function() {
                        this.UpdateChartHeight()
                    }, this));
                    this.CanUpdateTable(this.CanUpdateTable() + 1)
                } else this.grid.setOptions("datasource", a.FlatItemsSource), this.$ganttWrapper.GanttRowselectable({
                    Source: a.FlatItemsSource
                })
        },
        _injectGetAndSetOnData: function(a, b, c, f) {
            function e(a, b) {
                if (a && b) {
                    a.PropertyChanged || (a.PropertyChanged = new ObjectEvent("PropertyChanged"));
                    var d = a[b];
                    Object.defineProperty(a, b, {
                        get: function() {
                            return d
                        },
                        set: function(a) {
                            d != a && (d =
                                a, this.PropertyChanged.raise(this, {
                                    PropertyName: b,
                                    Value: a
                                }))
                        }
                    })
                }
            }
            var k = a = null;
            if (null != f) a = c.ParentTaskStartTimeProperty, k = c.ParentTaskEndTimeProperty;
            else if (a = c.TaskStartTimeProperty, k = c.TaskEndTimeProperty, c.TasksListProperty && b[c.TasksListProperty]) {
                f = b[c.TasksListProperty];
                for (var n = 0; n < f.length; n++) {
                    var l = f[n];
                    null != a && new e(l, a);
                    null != k && new e(l, k)
                }
                a = c.ParentTaskStartTimeProperty;
                k = c.ParentTaskEndTimeProperty
            }
            null != a && new e(b, a);
            null != k && new e(b, k)
        },
        UpdateRowHeightBinding: function(a, b) {
            if (a &&
                a.FlatItemsSource) {
                var c = this,
                    f = a.FlatItemsSource;
                this.isRowHeightBindingDefined = !1;
                null != this.options.RowHeightBinding && (this.options.RowHeightBinding.Converter ? this.isRowHeightBindingDefined = !0 : this.options.RowHeightBinding.Converter && (this.isRowHeightBindingDefined = !0));
                if (this.isRowHeightBindingDefined && b) {
                    for (var e = 0; e < f.length; e++) void 0 != this.options.RowHeightBinding.Property ? c.SubscribeChangeNotifications(f[e]) : this._updateRowHeightFromBinding(f[e], null);
                    f.CollectionChanged.subscribe(function(a,
                        b) {
                        if ("insert" == a.type) this.AddToScrollableContentHeight(this.options.RowHeight), void 0 != this.options.RowHeightBinding.Property ? c.SubscribeChangeNotifications(b.items[0]) : this._updateRowHeightFromBinding(b.items[0], null);
                        else if ("remove" == a.type || "remove" == c.type) this.AddToScrollableContentHeight(-(b.items[0].RowHeight || this.options.RowHeight)), c.UnsubscribeChangeNotifications(b.items[0])
                    }, this)
                }
            }
        },
        SubscribeChangeNotifications: function(a) {
            a.PropertyChanged.subscribe(this.notifyChange, this);
            a.HierarchicalItem.PropertyChanged.subscribe(this.notifyChange,
                this)
        },
        UnsubscribeChangeNotifications: function(a) {
            a.PropertyChanged.unsubscribe(this.notifyChange, this);
            a.HierarchicalItem.PropertyChanged.unsubscribe(this.notifyChange, this)
        },
        UpdateTableAndChartRowHeight: function(a, d) {
            null != this.GanttTableElement && this.GetGanttTable().RefreshItem(a);
            var c = b(a.ChartRow());
            if (c.length) {
                var f = b("td", c);
                f.height(d - 1);
                f.css("height", d - 1 + "px");
                f[0]._isTriggered || (f[0]._isTriggered = !0, f.trigger("heightChange"));
                c.height(d)
            }
        },
        UpdateRowHeight: function() {
            var a = this.options.FlatItemsSource;
            if (a)
                for (var b = 0; b < a.length; b++) this.UpdateTableAndChartRowHeight(a[b], this.options.RowHeight);
            this.UpdateChartHeight()
        },
        tableHasScrollBar: !1,
        updateScrollBsrVisibility: function() {
            if (this.options.ShowGridTable) {
                var a = this.GetGanttTable();
                a.updateGridHeight();
                a.updateScrollPadding();
                a.updateGridWidth()
            }
        },
        notifyChange: function(a, b) {
            this.options.RowHeightBinding.Property == b.PropertyName && this._updateRowHeightFromBinding(a, b.value)
        },
        _updateRowHeightFromBinding: function(a, b) {
            var c = a.RowHeight || this.options.RowHeight,
                f = this.options.RowHeightBinding.Converter.call(a, b);
            a.RowHeight = f;
            null != f && (this.AddToScrollableContentHeight(f - c), this.UpdateTableAndChartRowHeight(a, f), this.UpdateChartHeight(), this.updateScrollBsrVisibility(!0))
        },
        updateGanttChart: function(a, b) {},
        destroy: function() {
            this.baseDestroy.apply(this, arguments);
            this.element.empty()
        },
        _setOption: function(a, b) {
            this.baseSetOption.apply(this, arguments)
        },
        baseCreate: function() {},
        baseSetOption: function() {},
        baseDestroy: function() {},
        triggerEvent: function(a, b, c) {},
        getChildWidgetName: function(a) {},
        baseValidateOption: function() {
            b.radiantq.GanttBase.prototype._validateOptions.call(this)
        },
        _destroy: function() {
            this.element.data("FlexyGantt", null)
        }
    };
    e.FlexyGantt = c
})(RadiantQ.Gantt.Widget, jQuery);
(function(e) {
    RadiantQ.FlexyGantt.RenderNonWorkingHours = function(b, c, a, d, e) {
        if (void 0 != d) {
            var f = a.options;
            e = e || f.RowHeight;
            computedStart = f.ComputedStartTime;
            computedEnd = f.ComputedEndTime;
            if (d && 0 != e) {
                a: {
                    e = [];
                    var h = new TimeSpan(computedEnd - computedStart);
                    if (h <= TimeSpan.Zero_M()) e = !1;
                    else {
                        if (null != d) {
                            f = d.ConvertToNextWorkingTime(computedStart) == computedStart ? !0 : !1;
                            e.push(computedStart);
                            h = d.ConvertToNextWorkingTimeIntervals(computedStart, h, null);
                            if (0 == h.length) {
                                e = null;
                                break a
                            }!f && h[0].Start_M() < computedEnd &&
                                e.push(h[0].Start_M());
                            for (f = 1; f < h.length; f++)
                                if (h[f].Start_M() != h[f - 1].End_M()) {
                                    if (h[f - 1].End_M() >= computedEnd) break;
                                    e.push(h[f - 1].End_M());
                                    if (h[f].Start_M() >= computedEnd) break;
                                    e.push(h[f].Start_M())
                                }
                            f == h.length && h[f - 1].End_M() < computedEnd && e.push(h[f - 1].End_M())
                        } else e.push(computedStart);
                        e.push(computedEnd)
                    }
                }
                f = d.ConvertToNextWorkingTime(computedStart) == computedStart ? !0 : !1;
                !1 == f && 1 == e.length && e.push(computedEnd);
                if (1 < e.length) {
                    d = 0;
                    f && (d = 1);
                    for (f = ""; d < e.length - 1; d++) {
                        var k = a.ConvertTimeToX(e[d]),
                            h = a.ConvertTimeToX(e[d + 1]) - k,
                            k = "<div class=" + c + ' style="position: absolute; background-color:#DFDFDF; height: inherit; margin-left:' + k + "px; width:" + h + 'px;"></div>';
                        0 != h && (f += k);
                        d++
                    }
                    b.append(f)
                }
            }
        }
    }
})(jQuery);
(function(e, b) {
    function c() {
        this._cachedRowCont = b("<div id='cache'></div>");
        this._cachedRows = {}
    }

    function a(a) {
        if (a = g[a.eventNamespace]) a._cachedRowCont.empty(), a._cachedRows = {}
    }
    var d = RadiantQ.Gantt.DefaultStyles,
        g = {};
    e.GanttTaskItemsControl = {
        currentUniqueRowSuffix: 0,
        options: {
            name: "GanttTaskItemsControl",
            Data: null,
            TaskTemplate: null,
            ProgressBarTemplate: null,
            ParentTaskTemplate: null,
            GanttChart: null,
            RowHeight: null,
            TaskBarHeight: null,
            ViewWidth: null,
            TaskTooltipTemplate: null,
            MovingInfoPopup: null,
            ResizeInfoPopup: null,
            ConnectingInfoPopup: null,
            WorkTimeSchedule: null,
            KnockoutObjectName: null,
            TaskBarBackgroundTemplate: null,
            TaskBarAdornerTemplate: null,
            TaskBarBrowseToCueLeftTemplate: null,
            TaskBarBrowseToCueRightTemplate: null,
            IsPrinting: !1,
            MileStoneTemplate: null
        },
        ganttControlWidget: null,
        ganttChartWidget: null,
        ActivityViews: null,
        $chartTable: null,
        $chartTableBody: null,
        $Area: null,
        $tableBody: null,
        $gridTableBody: null,
        chartTableHeight: null,
        yPosition: 0,
        knockoutObject: null,
        VSB: null,
        UseRQModelBinder: !1,
        _create: function() {
            var f = /data-bind/g;
            null != this.options.TaskTemplate && (this.UseRQModelBinder = f.test(this.options.TaskTemplate) && null == this.options.KnockoutObjectName);
            this.TaskContextMenu = null;
            this.ganttChartWidget = this.options.GanttChart;
            this.ganttControlWidget = this.ganttChartWidget.options.Parent;
            this.$chartTableBody = b("<tbody style='overflow:hidden;'></tbody>");
            f = this.$chartTable = b("<table class='chartRowsContainer rq-gc-rowsParent-table'></table>").append(this.$chartTableBody);
            f[0].style.cssText = d.ZeroStyle;
            this.RowHeight = this.options.RowHeight;
            this.SCROLLBAR_MIN_SIZE = 10;
            this.totalItems = [];
            this.listItems = [];
            g[this.eventNamespace] = new c;
            this.ganttControlWidget.GanttTaskItemBarCollection = [];
            var e = this.ganttChartWidget.element,
                k = this.ganttChartWidget.$rowsParent;
            this.$Area = b(".rq-gc-chartArea-div", e);
            this.$tableBody = b(".ui-grid-body", e.parent());
            this.$gridTableBody = b("tbody", this.$tableBody);
            var n = this.chartTableHeight = this.$Area.height();
            !1 == this.options.IsPrinting && (this._dataCollectionChangedHandler = this.options.Data.CollectionChanged.subscribe(this._bindCollectionChanged,
                this));
            e.bind("ganttchartrefreshui.TaskItemsRefreshUI", function(b, d) {
                "ProjectGantt" == d.options.GanttType && (this.options.WorkTimeSchedule = d.options.WorkTimeSchedule, this.options.TaskTemplate = d.options.TaskItemTemplate, this.options.ParentTaskTemplate = d.options.ParentTaskItemTemplate, this.options.ProgressBarTemplate = d.options.ProgressBarTemplate, this.ganttControlWidget.GanttTaskItemBarCollection = [], !0 == d.ForceToReDrawRows && (a(this), this.$chartTableBody.empty(), this._renderBars(d)))
            }.bind(this));
            this.VSB =
                new RadiantQ.Gantt.VerticalScrollBar(f, k, this.options.Data, this.options.RowHeight, this.ganttControlWidget);
            this.options.GanttChart.VSB = this.VSB;
            if (!1 == this.options.IsPrinting) {
                var l = this;
                if (null != l.options.Data) {
                    var m = 0,
                        p = l.VSB.$scrollContainer.height(),
                        q = l.VSB.$scrollContainer[0].scrollHeight;
                    l._vsbScrollHandler = l.VSB.OnScroll.subscribe(function(a, d, c) {
                        a = l.VSB.$scrollContainer.height();
                        d = l.VSB.$scrollContainer[0].scrollHeight;
                        c = l.VSB.$scrollContainer.scrollTop();
                        if (c != m || q != d || p != a) {
                            if (null == l.$dependencyDiv ||
                                0 == l.$dependencyDiv.length) l.$dependencyDiv = b("div.rq-gc-dependencysParent", l.$Area);
                            l.$dependencyDiv.scrollTop(c);
                            l.ganttControlWidget.options.UseChartVirtualization && l.Refresh(l.element, l.options.Data, l.$chartTable, l.options.ViewWidth, n)
                        }
                        q = d;
                        p = a;
                        m = c
                    })
                }
            }
            this._renderBars({
                options: {
                    FlatItemsSource: this.options.Data,
                    ViewWidth: this.options.ViewWidth
                }
            });
            if (!1 == this.options.IsPrinting) {
                e.bind("ganttchartsourceupdated", function(b, d) {
                    this.$chartTableBody.empty();
                    a(this);
                    this.options.TaskTemplate = d.options.TaskItemTemplate;
                    this.options.ParentTaskTemplate = d.options.ParentTaskItemTemplate;
                    this.options.ProgressBarTemplate = d.options.ProgressBarTemplate;
                    this.options.Data = d.options.FlatItemsSource;
                    this._dataCollectionChangedHandler && this._dataCollectionChangedHandler.Dispose();
                    this._dataCollectionChangedHandler = this.options.Data.CollectionChanged.subscribe(this._bindCollectionChanged, this);
                    this.$dependencyDiv = null;
                    this._renderBars(d);
                    var c = this.options.GanttChart;
                    c.syncVerticalScrollBar && c.syncVerticalScrollBar()
                }.bind(this));
                var s = null;
                b(window).resize(function() {
                    null != s && clearTimeout(s);
                    n = this.$Area.height();
                    !0 == this._areBarsRendered && (s = setTimeout(function() {
                        this.ganttChartWidget.options.UseChartVirtualization && null != this.options.Data && this.Refresh(this.element, this.options.Data, this.$chartTable, this.options.ViewWidth, n)
                    }.bind(this), 0))
                }.bind(this))
            }
            //b.isFunction(RadiantQ.ContextMenuImpl.ContextMenu) && this._createTaskContextMenu();
            this.ganttControlWidget.RedrawChartRows = function() {
                null != this.options.Data && this.Refresh(this.element,
                    this.options.Data, this.$chartTable, this.options.ViewWidth, this.$Area.height(), !0)
            }.bind(this);
            this.element.data("GanttTaskItemsControl", this)
        },
        RefreshUI: function() {
            var a = this.$Area.height();
            this.Refresh(this.element, this.options.Data, this.$chartTable, this.options.ViewWidth, a)
        },
        _createTaskItemBar: function(a, b, d, c) {
            a[this.getChildWidgetName("GanttTaskItemBar")]({
                ActivityView: b,
                UseRQModelBinder: this.UseRQModelBinder,
                GanttChart: this.options.GanttChart,
                WorkTimeSchedule: this.options.WorkTimeSchedule,
                TaskBarHeight: this.options.TaskBarHeight,
                TaskTemplate: this.options.TaskTemplate,
                ProgressBarTemplate: this.options.ProgressBarTemplate,
                ParentTaskTemplate: this.options.ParentTaskTemplate,
                MileStoneTemplate: this.options.MileStoneTemplate,
                TaskBarBackgroundTemplate: this.options.TaskBarBackgroundTemplate,
                TaskBarAdornerTemplate: this.options.TaskBarAdornerTemplate,
                TaskTooltipTemplate: this.options.TaskTooltipTemplate,
                MovingInfoPopup: this.options.MovingInfoPopup,
                ResizeInfoPopup: this.options.ResizeInfoPopup,
                ConnectingInfoPopup: this.options.ConnectingInfoPopup,
                RowCount: this.currentUniqueRowSuffix,
                KnockoutObjectName: this.options.KnockoutObjectName,
                Parent: this,
                TaskBarBrowseToCueLeftTemplate: this.options.TaskBarBrowseToCueLeftTemplate,
                TaskBarBrowseToCueRightTemplate: this.options.TaskBarBrowseToCueRightTemplate,
                IsPrinting: this.options.IsPrinting
            });
            this.UseRQModelBinder && RadiantQ.Bind(a, b);
            this.ganttChartWidget.LoadingRow({
                Row: d,
                Data: b
            });
            !0 == this.refreshTimeIndicatorLineAfterInitTaskBar && this.taskBarInstances.push(a.data("GanttTaskItemBar"))
        },
        refreshTimeIndicatorLineAfterInitTaskBar: !1,
        applayBindings: function(a, b) {
            ko.applyBindingsToDescendants(a, b[0])
        },
        _timer: null,
        ignorecollectionChangs: !1,
        _bindCollectionChanged: function(a, b) {
            var d = this;
            null != d._timer && clearTimeout(d._timer);
            if (!0 != d.ignorecollectionChangs)
                if (d.ganttChartWidget.options.UseChartVirtualization) {
                    if ("remove" == a.type)
                        for (var c = 0; c < b.items.length; c++) {
                            var e = b.items[c].Activity_M().ID_M(),
                                m = g[this.eventNamespace];
                            m._cachedRows[e] && (m._cachedRows[e].remove(), delete m._cachedRows[e])
                        }
                    d._timer = setTimeout(function() {
                        d.Refresh(d.element,
                            a.target, d.$chartTable, d.options.ViewWidth, d.$Area.height());
                        d.ganttControlWidget.UpdateChartHeight()
                    }.bind(d), 0)
                } else {
                    if ("insert" == a.type) {
                        d.InsertRow(d.element, b, d.$chartTable, d.options.ViewWidth);
                        d.VSB.UpdateScrollContentHeight();
                        d.knockoutObject = eval(d.options.KnockoutObjectName);
                        try {
                            if (d.options.KnockoutObjectName)
                                for (c = 0; c < b.items.length; c++) d.applayBindings(d.knockoutObject, b.items[c].$chartRow)
                        } catch (p) {
                            window.console && console.error(p + " :Error while inserting " + b.index)
                        }
                        d.ganttControlWidget.UpdateChartHeight()
                    }
                    if ("remove" ==
                        a.type) {
                        for (c = 0; c < b.items.length; c++) d.RemoveRow(b.index, d.$chartTable);
                        d.VSB.UpdateScrollContentHeight();
                        d.ganttControlWidget.UpdateChartHeight()
                    }
                }
        },
        _areBarsRendered: !1,
        _renderBars: function(a) {
            this._areBarsRendered = !0;
            null != a.options.FlatItemsSource && (this.ActivityViews = a.options.FlatItemsSource, this.Refresh(this.element, a.options.FlatItemsSource, this.$chartTable, a.options.ViewWidth, this.$Area.height()))
        },
        _getVirtualizedTask: function(a, d) {
            var c = this.ActivityViews._dictActivityVsView[a],
                e = g[this.eventNamespace];
            if (e._cachedRows[a]) return c.ChartRow(e._cachedRows[a]), e._cachedRows[a];
            var l = b("<tr class='rq-grid-row' VirtualizationID=" + a + "></tr>"),
                m = b("<td id='ChartRow'/>");
            l.css("height", this.RowHeight);
            var p = l.height();
            m.css("height", p);
            l.append(m);
            !1 == this.options.IsPrinting && (c.ChartRow(l), e._cachedRows[a] = l);
            this._createTaskItemBar(m, this.ActivityViews._dictActivityVsView[a], l, null);
            m.width(d);
            !1 == this.options.IsPrinting && c.IsSelected() && l.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
            return l
        },
        $dependencyDiv: null,
        getGridParent: function() {
            return b(".ui-grid-body", this.ganttChartWidget.element.parent())
        },
        getGridTBodyParent: function(a) {
            return b("tbody", a)
        },
        guid: function() {
            var a = "",
                b, d;
            for (b = 0; 32 > b; b++) {
                d = 16 * Math.random() | 0;
                if (8 == b || 12 == b || 16 == b || 20 == b) a += "-";
                a += (12 == b ? 4 : 16 == b ? d & 3 | 8 : d).toString(16)
            }
            return a
        },
        taskBarInstances: [],
        Refresh: function(d, c, e, n, l, m) {
            var p = this.options.GanttChart;
            l = p.options.Parent;
            this.refreshTimeIndicatorLineAfterInitTaskBar = 0 != p.options.TimeIndicatorLineOption;
            this.taskBarInstances = [];
            if (!0 == l.PreventDefaultFns) p.syncVerticalScrollBar && p.syncVerticalScrollBar();
            else {
                p.ViewableDependencyViews = [];
                this.$Area.height();
                e.css("height", "auto");
                d.append(e);
                var q = this;
                this.VSB.CreateRow = function(a, d) {
                    void 0 == d.uid && (d.uid = q.guid());
                    var c = null;
                    if (p.options.UseChartVirtualization) {
                        var e = d;
                        if (e._parentView && !1 == e._parentView._isExpanded) return null;
                        var c = e.activity.ID_M(),
                            f = !1;
                        g[q.eventNamespace]._cachedRows[c] && (f = !0);
                        c = q._getVirtualizedTask(c, n);
                        c[0]["data-grid-item"] =
                            e;
                        c.attr("data-uid", e.uid);
                        f && ((f = b("#ChartRow", c).data().GanttTaskItemBar) && b("#ChartRow", c).data().GanttTaskItemBar._OnRecomputeLocation(), !0 == q.refreshTimeIndicatorLineAfterInitTaskBar && q.taskBarInstances.push(f));
                        !1 == e.IsSelected() && c.hasClass("rq-row-selected") && c.removeClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                        q._updateViewableDependencyViews(e)
                    } else {
                        e = d;
                        q._updateViewableDependencyViews(e);
                        c = b("<tr class='rq-grid-row' data-uid =" + e.uid + " ></tr>");
                        f = b("<td id='ChartRow'/>");
                        c.css("height", q.options.RowHeight);
                        var k = c.height();
                        f.height(k);
                        c.append(f);
                        !1 == q.options.IsPrinting && e.ChartRow(c);
                        q._createTaskItemBar(f, e, c, null);
                        c[0]["data-grid-item"] = e;
                        q.currentUniqueRowSuffix++;
                        f.width(n);
                        !1 == q.options.IsPrinting && e.IsSelected() && c.addClass("rq-row-selected " + window.radiantQclasses.selectionClass)
                    }
                    return c
                };
                !0 == p.options.UseChartVirtualization ? (d = g[this.eventNamespace], l = this.$chartTableBody.children(), d._cachedRowCont.append(l), this.$chartTableBody.empty(), !0 == m && a(this)) :
                    this.$chartTableBody.empty();
                this.VSB.Refresh(c, p.options.UseChartVirtualization);
                if (!0 == q.refreshTimeIndicatorLineAfterInitTaskBar)
                    for (m = 0; m < this.taskBarInstances.length; m++) this.taskBarInstances[m]._drawVerticalLines();
                this.taskBarInstances = [];
                e.width(n);
                0 == c.length ? (this.totalItems = [], this.listItems = [], a(this)) : this._enableAlternativeRowBackground()
            }
        },
        _enableAlternativeRowBackground: function() {
            !0 == this.options.EnableAlternativeRowBackground && (b("td", this.$chartTable).removeClass("rq-grid-alternative-background"),
                b("td", this.$chartTable).addClass(function() {
                    if (!0 == (0 != b(this).parent()[0]["data-grid-item"].DisplayIndex_M() % 2)) return "rq-grid-alternative-background"
                }))
        },
        _createTaskContextMenu: function() {
            var a = "#" + this.ganttChartWidget.$GanttChart[0].id,
                d = [{
                    keyName: "ConvertToMilestone",
                    name: window.RadiantQ_ConvertToMilestoneString,
                    icon: "Convert to Milestone"
                }],
                c = new RadiantQ.ContextMenuImpl.ContextMenu(a + " .rq-gc-taskbar, " + a + " .taskbar-style, " + a + " .rq-gc-commonTaskbar", b(a).parent());
            c.AddNewItems(d);
            c.ItemClicked.subscribe(function(a,
                d) {
                var c = b(d[0].parentElement).data();
                "ConvertToMilestone" == a && null != c && c.GanttTaskItemBar.options.ActivityView.ConvertToMilestone(c.GanttTaskItemBar.options.ActivityView.Activity_M(), c.GanttTaskItemBar.GanttControl)
            });
            c.BeforeContextMenu.subscribe(function(a, b) {
                c.Items.ConvertToMilestone && (c.Items.ConvertToMilestone.disabled = this.ganttControlWidget.options.IsReadOnly || this.ganttControlWidget.options.IsEffortReadOnly ? !0 : !1)
            }, this);
            var d = [{
                keyName: "ConverToNormalTask",
                name: window.RadiantQ_ConvertToNormalTaskString,
                icon: "Convert to normal Task"
            }],
                e = new RadiantQ.ContextMenuImpl.ContextMenu(a + " .rq-gc-milestoneBar", b(a).parent().parent());
            e.AddNewItems(d);
            e.ItemClicked.subscribe(function(a, d) {
                var c = b(d[0].parentElement).data();
                "ConverToNormalTask" == a && c.GanttTaskItemBar.options.ActivityView.ConvertToNormalTask(c.GanttTaskItemBar.options.ActivityView.Activity_M(), c.GanttTaskItemBar.GanttControl)
            });
            e.BeforeContextMenu.subscribe(function(a, b) {
                e.Items.ConverToNormalTask && (e.Items.ConverToNormalTask.disabled = this.ganttControlWidget.options.IsReadOnly ||
                    this.ganttControlWidget.options.IsEffortReadOnly ? !0 : !1)
            }, this);
            this.ganttControlWidget.TaskContextMenu = c
        },
        getItemAtIndex: function(a, d, c) {
            if (0 <= a && a < this.options.Data.length) {
                var e = a.toString();
                if (null === this.listItems[e] || void 0 === this.listItems[e] || null === this.listItems[d[a].Activity_M().ID_M() - 1] || void 0 === this.listItems[d[a].Activity_M().ID_M() - 1] && this.listItems[e].attr("VirtualizationID") != d[a].Activity_M().ID_M()) {
                    var g = b("<tr class='rq-grid-row' VirtualizationID=" + d[a].Activity_M().ID_M() +
                        "data-uid=" + d[a].uid + ">  </tr>"),
                        m = b("<td id='ChartRow'/>");
                    g.css("height", 25);
                    var p = g.height();
                    m.css("height", p);
                    g.append(m);
                    !1 == this.options.IsPrinting && d[a].ChartRow(g);
                    this._createTaskItemBar(m, d[a], g, null);
                    this.currentUniqueRowSuffix++;
                    m.width(c);
                    !1 == this.options.IsPrinting && d[a].IsSelected() && g.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                    null === this.listItems[e] || void 0 === this.listItems[e] ? this.listItems[e] = g : this.listItems[d[a].Activity_M().ID_M() - 1] = g
                } else g = this.listItems[e].attr("VirtualizationID") !=
                    d[a].Activity_M().ID_M() ? this.listItems[d[a].Activity_M().ID_M() - 1] : this.listItems[a], !1 == this.options.IsPrinting && d[a].ChartRow(g);
                g.attr("list-index", a);
                return g
            }
        },
        cleanupListItems: function(a) {
            for (var b, d, c = 0; c < this.totalItems.length; c++) b = this.totalItems[c], d = b.attr("list-index"), void 0 !== this.processedItems[d] && this.processedItems[d].attr("VirtualizationID") == b.attr("VirtualizationID") || b.detach();
            b = [];
            if (this.processedItems)
                for (d in this.processedItems) b.push(this.processedItems[d]);
            this.totalItems =
                b;
            !0 !== a && this.ScrollBar.fadeTo(300, 0)
        },
        InsertRow: function(a, d, c, e) {
            for (a = 0; a < d.items.length; a++) {
                var g = d.index + a,
                    m = d.items[a],
                    p = b("<tr class='rq-grid-row' data-uid=" + m.uid + "></tr>"),
                    q = b("<td id='ChartRow' />");
                p.css("height", this.options.RowHeight);
                var s = p.height();
                q.css("height", s);
                this._createTaskItemBar(q, m, p, g);
                p.append(q);
                this.currentUniqueRowSuffix++;
                m.ChartRow(p);
                s = c.find("tr.rq-grid-row");
                0 == g ? s.length ? s.eq(0).before(p[0]) : c.append(p) : s.eq(g - 1).after(p[0]);
                p[0]["data-grid-item"] = m;
                q.width(e);
                !1 == this.options.IsPrinting && m.IsSelected() && p.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                this._updateViewableDependencyViews(m)
            }
            this._enableAlternativeRowBackground()
        },
        RemoveRow: function(a, b) {
            b.find("tr.rq-grid-row").eq(a);
            b.find("tr.rq-grid-row").eq(a).remove();
            var d = g[this.eventNamespace];
            this.ActivityViews[a] && delete d._cachedRows[this.ActivityViews[a].activity.ID_M()];
            this._removeTimer && clearTimeout(this._removeTimer);
            this._removeTimer = setTimeout(function() {
                this._enableAlternativeRowBackground();
                this._removeTimer = !1
            }.bind(this), 0)
        },
        _updateViewableDependencyViews: function(a) {
            var b = this.options.GanttChart,
                d = b.options.Parent;
            if (d.DependencyViews && (a = d.DependencyViews._depViewByActivity[a.Activity_M().ID_M()]))
                for (d = 0; d < a.length; d++) {
                    var c = a[d];
                    c && -1 == b.ViewableDependencyViews.indexOf(c) && b.ViewableDependencyViews.push(c)
                }
        },
        _setOption: function(a, d) {
            this.widgetBaseSetOption.apply(this, arguments);
            b("td.rq-gc-row ", this.$chartTableBody).GanttTaskItemBar("option", a, d)
        },
        _destroy: function() {
            this._dataCollectionChangedHandler &&
                (this._dataCollectionChangedHandler.Dispose(), this._dataCollectionChangedHandler = null);
            this._ganttVerticalScrollEventHandler && (this._ganttVerticalScrollEventHandler.Dispose(), this._ganttVerticalScrollEventHandler = null);
            this.ganttChartWidget.element.unbind("ganttchartrefreshui.TaskItemsRefreshUI");
            a(this);
            this.element.empty();
            this.element.data("GanttTaskItemsControl", null)
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e, b) {
    var c = RadiantQ.Gantt,
        a = RadiantQ.Gantt.Utils.TimeComputingUtils,
        d = RadiantQ.Gantt.Utils.TimeComputingUtils,
        g = !1,
        f = RadiantQ.Template || kendo.template,
        h = {
            options: {
                name: "GanttTaskItemBar",
                ActivityView: null,
                GanttChart: null,
                WorkTimeSchedule: null,
                TaskBarHeight: null,
                TaskTemplate: null,
                ProgressBarTemplate: null,
                ParentTaskTemplate: null,
                TaskBarBackgroundTemplate: null,
                TaskBarAdornerTemplate: null,
                Data: null,
                ProgressTemplate: null,
                TaskTooltipTemplate: null,
                ResizeInfoPopup: null,
                MovingInfoPopup: null,
                ConnectingInfoPopup: null,
                IsParentTypeRow: null,
                RowCount: null,
                KnockoutObjectName: null,
                Parent: null,
                TaskBarBrowseToCueLeftTemplate: null,
                TaskBarBrowseToCueRightTemplate: null,
                IsPrinting: !1,
                MileStoneTemplate: null
            },
            StartTime: function() {
                return this.Activity._startTime
            },
            EndTime: function() {
                return this.Activity.EndTime_M()
            },
            Effort: function() {
                return this.Activity.Effort_M()
            },
            IsParent: function() {
                return this.ActivityView._isParent
            },
            IsExpanded: function() {
                return this.ActivityView.IsExpanded_M()
            },
            IsMilestone: function() {
                return this.Activity._isMilestone
            },
            IsRegularTask: function() {
                return this.ActivityView.IsRegularTask_M()
            },
            ProgressPercent: function() {
                return this.Activity.ProgressPercent_M()
            },
            ProgressEndTime: function() {
                return this.Activity.ProgressEndTime_M()
            },
            WorkTimeSchedule: function() {
                return this.GanttControl.options.WorkTimeSchedule
            },
            OriginalLeft: 0,
            OriginalWidth: 0,
            ActivityView: null,
            Activity: null,
            IsTemplateApplied: !1,
            taskStartAndEndTime: {},
            GanttControl: null,
            GanttChart: null,
            GanttChartRows: null,
            GanttTaskItemsControl: null,
            TaskBarRectangle: null,
            ProgressBarRectangle: null,
            MileStoneBar: null,
            ParentBar: null,
            PropertyChanged: new ObjectEvent("PropertyChanged"),
            HasChanged: !1,
            TaskItemsControl: null,
            addToViewModel: function(a, b) {
                this.KnockoutObject && (this.KnockoutObject[a] = b)
            },
            _create: function(a) {
                var b = this.options;
                this.TaskItemsControl = b.Parent;
                this.GanttChart = b.GanttChart;
                this.GanttControl = this.GanttChart.options.Parent;
                this.ActivityView = b.ActivityView;
                this.Activity = this.ActivityView.activity;
                this.KnockoutObject = eval(b.KnockoutObjectName);
                this.element.data("GanttTaskItemBar",
                    this);
                this.element.addClass("rq-gc-row");
                this._actViewPropertyChangedHandler && this._actViewPropertyChangedHandler.Dispose();
                this._activityPropertyChangedHandler && this._activityPropertyChangedHandler.Dispose();
                this._actAssgnsCollectionChangedHandler && this._actAssgnsCollectionChangedHandler.Dispose();
                this._readOnlyPropertyChangedHandler && this._readOnlyPropertyChangedHandler.Dispose();
                this._actViewPropertyChangedHandler = this.ActivityView.PropertyChanged.subscribe(this._actView_PropertyChanged, this);
                this._activityPropertyChangedHandler = this.Activity.PropertyChanged.subscribe(this._activity_PropertyChanged, this);
                this._actAssgnsCollectionChangedHandler = this.Activity._assignments.CollectionChanged.subscribe(this._activity_Assignments_CollectionChanged, this);
                b.IsPrinting || (this._readOnlyPropertyChangedHandler = this.GanttControl.ReadOnlyPropertyChange.subscribe(this.ReadOnlyStateChangedCallback, this));
                try {
                    var d = !1,
                        c = null,
                        e = this.Activity.DataSource_M();
                    if (this.KnockoutObject)
                        for (var f in this.KnockoutObject)
                            if (/Task\d+/.test(f) &&
                                this.KnockoutObject[f] === e) {
                                c = f;
                                d = !0;
                                break
                            }!1 == d && (c = "Task" + b.RowCount, this.addToViewModel("Task" + b.RowCount, this.Activity.DataSource_M()))
                } catch (g) {}
                this._renderElementsFromTemplate(c);
                this.element.append(this.TaskBarRectangle);
                this._listenForMouseEnterAndLeave();
                this._asyncShiftAndResizeTimer = this.asyncInitShiftAndResize();
                this._listenForTouchTap();
                this.UpdateResourceText();
                this._loadBrowseToCue();
                this._asyncTooltipTimer = this.asyncApplyToolTip();
                this._loadAdornerAndBgTemplate();
                this.taskStartAndEndTime = {
                    Name: this.options.ActivityView.activity.ActivityName_M(),
                    OriginalStart: this.Activity.StartTime_M(),
                    OriginalEnd: this.Activity.EndTime_M(),
                    originalWidth: this.TaskBarRectangle.width(),
                    originalLeft: this.TaskBarRectangle.css("margin-left"),
                    ProgressEndTime: this.Activity.ProgressEndTime_M(),
                    ProposedEnd: null,
                    ProposedStart: null
                };
                this.IsTemplateApplied = !0;
                a || this._OnRecomputeLocation();
                this._chartRefreshUIHandler && this._chartRefreshUIHandler.Dispose();
                this._chartRefreshUIHandler = b.GanttChart.RefreshUIEvent.subscribe(this.OnChartRefreshUI,
                    this);
                this._GanttChart_ViewportTimeRangeChanged(this, null);
                this.GanttChart._dirtyTaskItemControls && (this.GanttChart._dirtyTaskItemControls.push(this), this.GanttChart._diryTaskItemByActs[this.Activity.id] = this);
                this.options.IsPrinting || (this.initValuesFromOptions(), this.UpdateThumbsReadOnlyStates())
            },
            asyncApplyToolTip: function() {
                var a = this;
                return setTimeout(function() {
                    a.ApplyTooltipSettings(a.TaskBarRectangle, a.options.Data);
                    a.ApplyTooltipSettings(a.ParentBar, a.options.Data);
                    a.ApplyTooltipSettings(a.MileStoneBar,
                        a.options.Data)
                }, 0)
            },
            asyncInitShiftAndResize_old: function() {
                var a = this;
                return setTimeout(function() {
                    !1 != a.options.IsPrinting || a.IsReadOnly || a.TaskReadOnly || (a.TaskBarRectangle.ganttShiftTracker(a, a.DragEnd), a.TaskBarRectangle.ganttResizeTracker(a, a.ResizeEnd), a.ParentBar.ganttShiftTracker(a, a.DragEnd), a.MileStoneBar.ganttShiftTracker(a, a.DragEnd), a.TaskBarRectangle.css("cursor", "move"));
                    a.UpdateThumbsReadOnlyStates();
                }, 0)
            },
            asyncInitShiftAndResize: function () {
                var a = this;
                !1 != a.options.IsPrinting || a.IsReadOnly || a.TaskReadOnly || (a.TaskBarRectangle.ganttShiftTracker(a, a.DragEnd), a.TaskBarRectangle.ganttResizeTracker(a, a.ResizeEnd), a.ParentBar.ganttShiftTracker(a, a.DragEnd), a.MileStoneBar.ganttShiftTracker(a, a.DragEnd), a.TaskBarRectangle.css("cursor", "move"));
                a.UpdateThumbsReadOnlyStates();
                return undefined;
            },
            OnChartRefreshUI: function(a, b) {
                "ProjectGantt" == b.options.GanttType && (this.options.WorkTimeSchedule = b.options.WorkTimeSchedule,
                    this._OnRecomputeLocation(), this._removeTooltip(this.TaskBarRectangle), this._removeTooltip(this.ParentBar), this._removeTooltip(this.MileStoneBar))
            },
            RedrawTaskBar: function(a) {
                this._destroy();
                this._create(a);
                this.KnockoutObject && this.applayBindings(this.KnockoutObject, this.element[0])
            },
            applayBindings: function(a, b) {
                ko.applyBindingsToDescendants(a, this.element)
            },
            KnockoutObject: null,
            ViewStartTime: function() {
                return this.GanttChart.options.ComputedStartTime
            },
            ViewEndTime: function() {
                return this.GanttChart.options.ComputedEndTime
            },
            ViewWidth: function() {
                return this.GanttChart.options.ViewWidth
            },
            GetScheduleToPlotWith: function() {
                return null == this.Activity ? this.options.WorkTimeSchedule : this.Activity.GetScheduleToPlotWith(this.options.WorkTimeSchedule)
            },
            _OnRecomputeLocation: function() {
                if (null != this.ActivityView && !0 != this.Activity._startTime.isGreaterThan(this.Activity.EndTime_M()) && !1 != this.IsTemplateApplied) {
                    var a = this.GetScheduleToPlotWith(),
                        c = d.ConvertToUnitsOfBaseScaleType(this.GanttChart.options.BaseTimeScaleType, this.ViewStartTime(),
                            this.StartTime(), a) * this.GanttChart.options.BaseTimeUnitWidth,
                        a = d.ConvertToUnitsOfBaseScaleType(this.GanttChart.options.BaseTimeScaleType, this.StartTime(), this.EndTime(), a) * this.GanttChart.options.BaseTimeUnitWidth;
                    this.OriginalLeft = c;
                    this.OriginalWidth = a;
                    null != this.ParentBar && this.ParentBar.css("display", "none");
                    null != this.MileStoneBar && this.MileStoneBar.css("display", "none");
                    null != this.TaskBarRectangle && this.TaskBarRectangle.css("display", "none");
                    if (this.ActivityView._isParent || this.Activity._isMilestone) {
                        this.CanvasLeft =
                            c - 7;
                        if (this.ActivityView._isParent) {
                            this.ParentBar.css("width", a + 20 + "px");
                            this.ParentBar.css({
                                "margin-left": c - 10 + "px",
                                "margin-top": "2px"
                            });
                            this.BarPolygon = this.ParentBar;
                            this.BarWidth = a;
                            this.OriginalCompletedWidth = this.CompletedWidth = 0;
                            this.ParentBar && this.element.append(this.ParentBar);
                            var e = b("div.label", this.ParentBar);
                            0 == e.length && (e = b("div.rq-gc-taskbar-label", this.ParentBar));
                            this.ParentBar && 0 < e.length && e.css("margin-left", "30px")
                        } else this.MileStoneBar.css("width", "17px"), e = this.MileStoneBar.outerWidth(),
                        this.MileStoneBar.css("margin-left", c - e / 2 + "px"), this.MileStoneBar.css("margin-top", "4px"), this.BarPolygon = this.MileStoneBar, this.BarWidth = 14, this.OriginalCompletedWidth = this.CompletedWidth = 0, this.MileStoneBar && this.element.append(this.MileStoneBar), e = b("div.label", this.MileStoneBar), 0 == e.length && (e = b("div.rq-gc-taskbar-label", this.MileStoneBar)), this.MileStoneBar && 0 < e.length && e.css("margin-left", "18px");
                        null != this.BarPolygon && this.BarPolygon.css("display", "block");
                        null != this.TaskBarRectangle && this.TaskBarRectangle.css("display",
                            "none");
                        null != this.ProgressPercentResizeThumb && this.ProgressPercentResizeThumb.hide()
                    } else this.CanvasLeft = c, this.BarWidth = a, null != this.ParentBar && this.ParentBar.css("display", "none"), null != this.MileStoneBar && this.MileStoneBar.css("display", "none"), null != this.TaskBarRectangle && this.TaskBarRectangle.css("display", "block"), this._UpdateProgressBarPosition(c);
                    this.CanvasRight = this.CanvasLeft + this.BarWidth;
                    this.TaskBarRectangle.css("width", a + "px");
                    this.TaskBarRectangle.css("margin-left", c + "px");
                    //this.TaskBarRectangle.css("margin-top", "3px");
                    this.ProgressBarRectangle[0].style.width = this.CompletedWidth.toString() + "px";
                    //this.ProgressBarRectangle.css("border-width", "1px");
                    //this.ProgressBarRectangle.css("border-style", "solid");
                    //0 == this.CompletedWidth && this.ProgressBarRectangle.css("border-width", "0px");
                    //c = this.TaskBarRectangle.height();
                    //this.ProgressBarRectangle.css("margin-top", c / 2 - 2.5 + "px");
                    this._loadAdornerAndBgTemplate();
                    this._drawVerticalLines();
                    //this._updateTaskBarLabel();
                    this._UpdateBrowseToTaskCuesStates();
                    this.UpdateResourceText();
                    var f = this.GanttChart.options.OnTaskBarLoad;
                    f && (this._onTaskBarLoadTimer = setTimeout(function() {
                        null != f && "function" == typeof f && f.call(this.TaskBarRectangle[0], this);
                        this._onTaskBarLoadTimer = null
                    }.bind(this), 0))
                }
            },
            _drawVerticalLines: function () {
                return;
                var a = this.Activity._isMilestone,
                    b = this.ActivityView._isParent,
                    d = this.element,
                    d = this.TaskBarRectangle;
                !0 == b && (d = this.ParentBar);
                !0 == a && !1 == b && (a = !0, d = this.MileStoneBar);
                if (null != d) {
                    var e = d.find("div.rq-gc-start-verticalLine"),
                        f = d.find("div.rq-gc-end-verticalLine");
                    if (0 != e.length || 0 != f.length) {
                        var g = d.closest("tr");
                        if (g.length) {
                            var h = parseInt(d.css("margin-top"));
                            d.height();
                            d = d.width();
                            g = g[0].offsetTop;
                            h = {
                                height: g + h + "px",
                                "margin-left": "0px",
                                "margin-top": -(g + h) + "px"
                            };
                            taskbarwidth = d;
                            !0 == a && !1 == b && (taskbarwidth = this.MileStoneBar.outerWidth() / 2, h["margin-left"] = taskbarwidth + "px");
                            0 != e.length && e.css(h);
                            0 != f.length && (h["margin-left"] = taskbarwidth + "px", f.css(h));
                            a = this.options.GanttChart.options.TimeIndicatorLineOption;
                            (a & c.TimeIndicatorLines.Always) != c.TimeIndicatorLines.Always ||
                                (a & c.TimeIndicatorLines.OnResize) == c.TimeIndicatorLines.OnResize ? (e.hide(), f.hide()) : (e.show(), f.show())
                        }
                    }
                }
            },
            _actView_PropertyChanged: function(a, b) {
                "IsReadOnly" == b.PropertyName && this.ReadOnlyStateChangedCallback(a, b)
            },
            UpdateUI: function() {
                var a = this.GanttChart._dirtyTaskItemControls,
                    b = this.GanttChart._diryTaskItemByActs;
                this.GanttChart._dirtyTaskItemControls = [];
                for (var d = 0; d < a.length; d++) {
                    var c = a[d],
                        e = c.Activity.id;
                    c.Activity && void 0 != c.Activity.id && b[e] && (b[e]._OnRecomputeLocation(), delete b[e])
                }
                this.GanttChart._dirtyTasksTimer =
                    null;
                this.GanttChart._dirtyTaskItemControls = [];
                this.GanttChart._diryTaskItemByActs = {}
            },
            _isActivityPropertyChanged: !1,
            _$parentMiddleBar: null,
            _activity_PropertyChanged: function(a, d) {
                this._isActivityPropertyChanged = !0;
                void 0 === this.GanttChart._dirtyTaskItemControls && (this.GanttChart._dirtyTasksTimer = null, this.GanttChart._dirtyTaskItemControls = [], this.GanttChart._diryTaskItemByActs = {});
                null == this._$parentMiddleBar && (this._$parentMiddleBar = b(".rq-gc-parentBar-middle", this.ParentBar));
                0 == this._$parentMiddleBar.length &&
                    (this._$parentMiddleBar = b(".parentMiddleBar-style", this.ParentBar));
                "IsExpanded" == d.PropertyName && (!1 == d.value ? this._$parentMiddleBar.addClass("rq-gc-Parentbar-collapsed") : this._$parentMiddleBar.removeClass("rq-gc-Parentbar-collapsed"));
                var c = this.Activity.ID_M();
                void 0 === this.GanttChart._diryTaskItemByActs[c] && this.GanttChart._dirtyTaskItemControls.push(this);
                this.GanttChart._diryTaskItemByActs[c] = this;
                c = this.GanttChart._dirtyTasksTimer;
                null != c && clearTimeout(c);
                this.GanttChart._dirtyTasksTimer = setTimeout(function() {
                    this.UpdateUI();
                    this.GanttChart._dirtyTasksTimer = null
                }.bind(this), 0)
            },
            _AdjustOrigionalLeftAndWidth: function() {
                if (0 > this.OriginalLeft + this.OriginalWidth || this.OriginalLeft > this.ViewWidth()) left = -10, width = 0;
                else {
                    var a = this.GanttChart.GetBarRenderStartTime(this.StartTime()),
                        b = this.GanttChart.GetBarRenderEndTime(this.EndTime());
                    !1 != a.equals(this.StartTime()) && !1 != b.equals(this.EndTime()) || !a.isLessThan(b) || (width = d.ConvertToUnitsOfBaseScaleType(this.GanttChart.options.BaseTimeScaleType, a, b, this.GanttChart.options.WorkTimeSchedule) *
                        this.GanttChart.options.BaseTimeUnitWidth, left = d.ConvertToUnitsOfBaseScaleType(this.GanttChart.options.BaseTimeScaleType, this.ViewStartTime(), a, this.GanttChart.options.WorkTimeSchedule) * this.GanttChart.options.BaseTimeUnitWidth)
                }
            },
            _UpdateProgressBarPosition: function(a) {
                var d = this.OriginalWidth * this.ProgressPercent() / 100;
                0 == this.BarWidth ? this.OriginalCompletedWidth = this.CompletedWidth = 0 : 0 > d ? this.OriginalCompletedWidth = this.CompletedWidth = 0 : (this.OriginalCompletedWidth = d, d -= a - this.OriginalLeft, 0 > d &&
                    (d = 0), d > this.BarWidth ? d = this.BarWidth : d == this.BarWidth && (d -= 2), this.CompletedWidth = d);
                this.ProgressPercentResizeThumb = b("div.rq-gc-progressbar-resizer", this.element);
                0 == this.ProgressPercentResizeThumb.length && (this.ProgressPercentResizeThumb = b("div.ui-progress-resizer", this.element));
                this.ProgressPercentResizeThumb.bind("mouseover." + this.widgetName, this.TaskBarMouseHover.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                null != this.ProgressPercentResizeThumb && (10 < this.BarWidth ?
                    (this.ProgressPercentResizeThumb.show(), this.ProgressPercentResizeThumb.css("margin-left", this.CompletedWidth), this.ProgressPercentResizeThumb.css("height", b(this.TaskBarRectangle).css("height"))) : this.ProgressPercentResizeThumb.hide())
            },
            $newLabel: null,
            _updateTaskBarLabel: function() {
                var a = this.options,
                    d = b("div.rq-gc-taskbar-label", this.TaskBarRectangle);
                0 == d.length && (d = b("div.label", this.TaskBarRectangle));
                this.LabelTmpl && !this.KnockoutObject && (this.$newLabel = b(this.newLabel(a)), 0 < this.$newLabel.length &&
                    this.$newLabel.text() && (this.$newLabel.text(), this.$newLabel.css("margin-left", this.TaskBarRectangle.width() + 12 + "px"), d.replaceWith(this.$newLabel)));
                this.TaskBarRectangle && 0 < d.length && d.css("margin-left", this.TaskBarRectangle.width() + 12 + "px")
            },
            newLabel: function(a) {
                return f(this.LabelTmpl, a.ActivityView.Activity_M())
            },
            UpdateResourceText: function(a) {
                if (0 < this.Activity._assignments.length) {
                    var d = b("div#GanttTaskBarLabel", this.TaskBarRectangle);
                    !0 == this.IsParent() ? d = b("div#GanttTaskBarLabel", this.ParentBar) :
                        this.IsMilestone() && (d = b("div#GanttTaskBarLabel", this.MileStoneBar));
                    if (d.length) {
                        var c = RadiantQ.Gantt.ValueConverters.ConverterUtils.GetResourcesText(this.Activity._assignments, !1, !0);
                        d[0].innerHTML = c;
                        d[0].style.fontSize = "12px";
                        !1 == this.ActivityView.IsParent_M() ? d.css("margin-right", -(12 * d[0].innerHTML.length / 2 + 5) + "px") : d.css("margin-left", "30px")
                    }
                }!0 == a && 0 == this.Activity._assignments.length && (b("div#GanttTaskBarLabel", this.TaskBarRectangle).html(""), b("div#GanttTaskBarLabel", this.ParentBar).html(""),
                    b("div#GanttTaskBarLabel", this.MileStoneBar).html(""))
            },
            _listenForShiftAndResizeTracker: function() {
                !1 != this.options.IsPrinting || this.IsReadOnly || this.TaskReadOnly || (this.TaskBarRectangle.ganttShiftTracker(this, this.DragEnd), this.TaskBarRectangle.ganttResizeTracker(this, this.ResizeEnd), this.ParentBar.ganttShiftTracker(this, this.DragEnd), this.MileStoneBar.ganttShiftTracker(this, this.DragEnd), this.TaskBarRectangle.css("cursor", "move"))
            },
            CanShiftTask: function(a) {
                return a.GanttControl.CanShiftActivityInternal(a.Activity)
            },
            DragEnd: function(a, b) {
                if (!this.StartTime().equals(this.taskStartAndEndTime.ProposedStart) || !this.EndTime().equals(this.taskStartAndEndTime.ProposedEnd)) {
                    var d = new RadiantQ.Gantt.SetStartTimeAction(this.GanttControl, this.Activity, this.taskStartAndEndTime.ProposedStart, !1);
                    this.GanttControl.ActionManager.RecordAction(d);
                    this.ProgressEndTime(this.Activity.ProgressEndTime_M());
                    0 < this.GanttControl.ActivityTimeChanged.fn.length && (d = new TimesChangingEventArgs(this.Activity, this.taskStartAndEndTime.OriginalStart,
                        this.taskStartAndEndTime.OriginalEnd, "DragEnd"), this.GanttControl.ActivityTimeChanged.raise(this, d))
                }
                this._isActivityPropertyChanged = !1;
                if (this.TaskBarRectangle)
                    this.TaskBarRectangle.removeClass("rq-taskbar-shadow");
            },
            ResizeEnd: function(a, b, d) {
                b.forProgressBar.isTrue ? this.Activity.ProgressPercent_M(this.taskStartAndEndTime.ProgressPercent) : (this.Activity.PreferredStartTime_M(this.Activity.StartTime_M()), this.Activity.EndTime_M(this.taskStartAndEndTime.OriginalEnd), 0 < this.GanttControl.ActivityTimeChanged.fn.length && (a = new TimesChangingEventArgs(this.Activity,
                    this.taskStartAndEndTime.OriginalStart, this.taskStartAndEndTime.OriginalEnd, "ResizeEnd"), this.GanttControl.ActivityTimeChanged.raise(this, a)));
                this._isActivityPropertyChanged = !1;
                if (this.TaskBarRectangle)
                    this.TaskBarRectangle.removeClass("rq-taskbar-shadow");
            },
            _listenForTouchTap: function() {
                var a = this.MileStoneBar;
                a.on("touchstart", this._onTouchstart.bind(this));
                a.on("touchend", this._onTouchend.bind(this));
                a.on("touchmove", this._onTouchMove.bind(this));
                a.on("MSPointerDown", this._onTouchstart.bind(this));
                a.on("MSPointerUp", this._onTouchend.bind(this));
                a.on("MSPointerMove", this._onTouchMove.bind(this))
            },
            tapDownX: null,
            tapDownY: null,
            tapHoldTimer: null,
            canShowContextMenu: !1,
            timeOutFunctions: null,
            _onTouchstart: function(a) {
                a = a.originalEvent.touches ? a.originalEvent.touches[0] : a.originalEvent;
                var b = this;
                b.tapDownX = a.clientX;
                b.tapDownY = a.clientY;
                b.tapHoldTimer = setTimeout(function() {
                    b.canShowContextMenu = !0
                }, 500)
            },
            _onTouchMove: function() {
                clearTimeout(this.tapHoldTimer)
            },
            _onTouchend: function(a) {
                if ("ShowContextMenu" == this.options.GanttChart.options.TouchTapAction || !0 == this.canShowContextMenu) {
                    var b = a.originalEvent.changedTouches ? a.originalEvent.changedTouches[0] : a.originalEvent;
                    if (this.tapDownX == b.clientX && this.tapDownY == b.clientY) {
                        var d = this;
                        clearTimeout(d.timeOutFunctions);
                        d.timeOutFunctions = setTimeout(function() {
                            d._showContextMenu(a.originalEvent, b)
                        }, 40)
                    }
                    this.canShowContextMenu = !1
                }
                clearTimeout(this.tapHoldTimer)
            },
            _showContextMenu: function(a, d) {
                if ("mouse" != a.pointerType && 4 != a.pointerType) {
                    var c = b.ui ? b.ui.version || "1.5.2" : null;
                    c && 1.11 <= parseFloat(c) && b.isFunction(b.jQContextMenu) ?
                        b(a.target).jQContextMenu({
                            x: d.clientX,
                            y: d.clientY
                        }) : b.isFunction(b.contextMenu) && b(a.target).contextMenu({
                            x: d.clientX,
                            y: d.clientY
                        })
                }
            },
            _listenForMouseEnterAndLeave: function() {
                this.TaskBarRectangle.bind("mouseover." + this.widgetName, this.TaskBarMouseHover.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                this.ParentBar.bind("mouseover." + this.widgetName, this.TaskBarMouseHover.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                this.MileStoneBar.bind("mouseover." +
                    this.widgetName, this.TaskBarMouseHover.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                this.TaskBarRectangle.bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this));
                this.MileStoneBar.bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this)).bind("mouseleave." + this.widgetName, this.TaskBarMouseLeave.bind(this))
            },
            TaskBarMouseHover: function(a, b) {
                this.GanttChart.TaskOnMouseHover =
                    this.ActivityView;
                this.GanttChart.TaskViewOnMouseHover = this.ActivityView;
                var d = this.IsMilestone(),
                    e = this.IsParent(),
                    f = this.TaskBarRectangle;
                !0 == e && (f = this.ParentBar);
                !0 == d && !1 == e && (f = this.MileStoneBar);
                !1 == d && !1 == e && f.addClass("rq-taskbar-shadow");
                this.GanttChart.options.TimeIndicatorLineOption == c.TimeIndicatorLines.OnHover && (f.find("div.rq-gc-start-verticalLine").show(), f.find("div.rq-gc-end-verticalLine").show())
            },
            TaskBarMouseLeave: function(a, b) {
                var d = this.IsMilestone(),
                    e = this.IsParent(),
                    f = this.TaskBarRectangle;
                !0 == e && (f = this.ParentBar);
                !0 == d && !1 == e && (f = this.MileStoneBar);
                !1 == d && !1 == e && f.removeClass("rq-taskbar-shadow");
                this.GanttChart.options.TimeIndicatorLineOption == c.TimeIndicatorLines.OnHover && (f.find("div.rq-gc-start-verticalLine").hide(), f.find("div.rq-gc-end-verticalLine").hide());
                this.GanttChart.TaskOnMouseHover = null;
                this.GanttChart.TaskViewOnMouseHover = null
            },
            _updateElementsFromTemplate: function() {
                var a = this.TaskBarRectangle,
                    b = this.MileStoneBar,
                    d = this.ParentBar;
                this._renderElementsFromTemplate();
                a.replaceWith(this.TaskBarRectangle);
                b.replaceWith(this.MileStoneBar);
                d.replaceWith(this.ParentBar)
            },
            _renderElementsFromTemplate: function(a) {
                var b = this.options;
                this.renderTemplate(b, a);
                b.TaskBarHeight ? (this.TaskBarRectangle.css("height", b.TaskBarHeight + "px"), this.ParentBar.css("height", b.TaskBarHeight + "px"), this.MileStoneBar.css("height", b.TaskBarHeight + "px")) : (this.taskHeight = this.element.height(), this.TaskBarRectangle.css("height", this.taskHeight - 8 + "px"), this.ParentBar.css("height", this.taskHeight -
                    8 + "px"), this.MileStoneBar.css("height", this.taskHeight - 8 + "px"));
                this.TaskBarRectangle.addClass("rq-gc-commonTaskbar");
                this.TaskBarRectangle.append(this.ProgressBarRectangle);
                this.element.css("position", "absolute")
            },
            renderTemplate: function(a, d) {
                a.TaskTemplate ? (a.TaskTemplate = a.TaskTemplate.replace(/RQDataContext/g, d), this.TaskBarRectangle = f(this.options.TaskTemplate), this.TaskBarRectangle = b(this.TaskBarRectangle(this.Activity))) : this.TaskBarRectangle = b("<div class='rq-gc-taskbar " + window.radiantQclasses.defaultClass +
                    "'><div id='GanttTaskBarLabel' class='rq-gc-taskbar-label'></div></div>");
                a.ProgressBarTemplate ? (a.ProgressBarTemplate = a.ProgressBarTemplate.replace(/RQDataContext/g, d), this.ProgressBarRectangle = f(this.options.ProgressBarTemplate), this.ProgressBarRectangle = b(this.ProgressBarRectangle(this.Activity))) : this.ProgressBarRectangle = b("<div class='rq-gc-progressbar progressbarStyle'></div>");
                a.MileStoneTemplate ? (a.MileStoneTemplate = a.MileStoneTemplate.replace(/RQDataContext/g, d), this.MileStoneBar = f(a.MileStoneTemplate),
                    this.MileStoneBar = b(this.MileStoneBar(this.Activity))) : this.MileStoneBar = b("<div></div>").addClass("rq-gc-milestoneBar").html("<div class='rq-gc-start-verticalLine' style='width:0px;'></div><div class='rq-gc-end-verticalLine' style='width:0px;'></div><div id='GanttTaskBarLabel' class='rq-gc-taskbar-label'></div>");
                a.ParentTaskTemplate ? (a.ParentTaskTemplate = a.ParentTaskTemplate.replace(/RQDataContext/g, d), this.ParentBar = f(a.ParentTaskTemplate), this.ParentBar = b(this.ParentBar(this.Activity))) : this.ParentBar =
                    this.Activity.IsExpanded ? b("<div  class='rq-gc-parentBar'><div class='rq-gc-parentBar-leftCue'></div><div class='rq-gc-parentBar-middle'></div><div class='rq-gc-parentBar-rightCue'><div id='GanttTaskBarLabel' class='rq-gc-taskbar-label'></div></div><div class='rq-gc-start-verticalLine' style='width:0px;'></div><div class='rq-gc-end-verticalLine' style='width:0px;'></div>") : b("<div  class='rq-gc-parentBar'><div class='rq-gc-parentBar-leftCue'></div><div class='rq-gc-parentBar-middle rq-gc-Parentbar-collapsed'></div><div class='rq-gc-parentBar-rightCue'><div id='GanttTaskBarLabel' class='rq-gc-taskbar-label'></div></div><div class='rq-gc-start-verticalLine' style='width:0px;'></div><div class='rq-gc-end-verticalLine' style='width:0px;'></div>")
            },
            taskBarBackgroundElement: null,
            taskBarAdornerElement: null,
            _loadAdornerAndBgTemplate: function() {
                var a = this.options,
                    d = this.IsParent();
                this.adornerAndBgTemplate(d, a);
                /*if (!this.KnockoutObject && a.TaskTemplate) {
                    var d = a.TaskTemplate.indexOf("<div class='rq-gc-taskbar-label'>"),
                        c = a.TaskTemplate.indexOf("</div>", d);
                    this.LabelTmpl = a.TaskTemplate.slice(d, c) + "</div>"
                }
                a = b("div.rq-gc-taskbar-label", this.TaskBarRectangle);
                0 == a.length && (a = b("div.label", this.TaskBarRectangle));
                0 < a.length && a.css("margin-left", this.TaskBarRectangle.width() +
                    12 + "px")*/
            },
            adornerAndBgTemplate: function(a, d) {
                !1 == a && d.TaskBarBackgroundTemplate && (null != this.taskBarackgroundElement && this.taskBarackgroundElement.remove(), this.taskBarackgroundElement = f(this.options.TaskBarBackgroundTemplate, d), this.taskBarackgroundElement = b(this.taskBarackgroundElement), this.element.append(this.taskBarackgroundElement));
                !1 == a && d.TaskBarAdornerTemplate && (null != this.taskBarAdornerElement && this.taskBarAdornerElement.remove(), this.taskBarAdornerElement = f(d.TaskBarAdornerTemplate, d),
                    this.taskBarAdornerElement = b(this.taskBarAdornerElement), this.element.append(this.taskBarAdornerElement.css({
                        "z-index": "11"
                    })))
            },
            _activity_Assignments_CollectionChanged: function() {
                this.UpdateResourceText(!0)
            },
            BrowseToCueLeft: 0,
            BrowseToCueRight: 0,
            BrowseToTaskCueLeftVisibility: "none",
            BrowseToTaskCueRightVisibility: "none",
            _GanttChart_ViewportTimeRangeChanged: function(a, b) {
                this.BrowseToCueLeft = this.options.GanttChart.options.ResizeToFit ? 0 : this.options.GanttChart.GanttChart.scrollLeft();
                this.BrowseToCueRight = this.BrowseToCueLeft + this.options.GanttChart.GanttChart[0].clientWidth - 30;
                this._UpdateBrowseToTaskCuesStates()
            },
            _GanttChart_BeforeChartHZScroll: function(a, b) {
                this.BrowseToCueLeft += b.diff;
                this.BrowseToCueRight += b.diff;
                this.TaskBarBrowseToCueLeft && this.TaskBarBrowseToCueLeft.css({
                    "margin-left": this.BrowseToCueLeft
                });
                this.TaskBarBrowseToCueRight && this.TaskBarBrowseToCueRight.css({
                    "margin-left": this.BrowseToCueRight
                })
            },
            _UpdateBrowseToTaskCuesStates: function() {
                this.BrowseToTaskCueLeftVisibility = null !=
                    this.options.TaskBarBrowseToCueLeftTemplate && this.EndTime() < this.options.GanttChart.VisualStartTime ? "block" : "none";
                this.BrowseToTaskCueRightVisibility = null != this.options.TaskBarBrowseToCueRightTemplate && this.StartTime() > this.options.GanttChart.VisualEndTime ? "block" : "none";
                this.TaskBarBrowseToCueLeft && this.TaskBarBrowseToCueLeft.css({
                    "margin-left": this.BrowseToCueLeft,
                    display: this.BrowseToTaskCueLeftVisibility
                });
                this.TaskBarBrowseToCueRight && this.TaskBarBrowseToCueRight.css({
                    "margin-left": this.BrowseToCueRight,
                    display: this.BrowseToTaskCueRightVisibility
                })
            },
            _loadBrowseToCue: function() {
                var a = this.options;
                if (a.TaskBarBrowseToCueLeftTemplate || a.TaskBarBrowseToCueRightTemplate) this._viewPortChangedHandler && this._viewPortChangedHandler.Dispose(), this._beforeChartHZScrollHandler && this._beforeChartHZScrollHandler.Dispose(), this._viewPortChangedHandler = this.GanttChart.ViewportTimeRangeChanged.subscribe(this._GanttChart_ViewportTimeRangeChanged, this), this._beforeChartHZScrollHandler = this.GanttChart.BeforeChartHZScroll.subscribe(this._GanttChart_BeforeChartHZScroll,
                    this);
                a.TaskBarBrowseToCueLeftTemplate && this._createBrowseToCueLeft(a);
                a.TaskBarBrowseToCueRightTemplate && this._createBrowseToCueRight(a)
            },
            _createBrowseToCueLeft: function(a) {
                this.TaskBarBrowseToCueLeft = b(a.TaskBarBrowseToCueLeftTemplate);
                this.element.append(this.TaskBarBrowseToCueLeft);
                this.TaskBarBrowseToCueLeft[0].ganttTaskItemBar = this;
                this.TaskBarBrowseToCueLeft[0].title = window.RadiantQ_ScrollToTask;
                this.TaskBarBrowseToCueLeft.addClass("rq-gc-browseCue-left").bind("touchstart." + this.widgetName +
                    " mousedown." + this.widgetName, this.BrowseToTaskCue_Click.bind(this))
            },
            _createBrowseToCueRight: function(a) {
                this.TaskBarBrowseToCueRight = b(a.TaskBarBrowseToCueRightTemplate);
                this.element.append(this.TaskBarBrowseToCueRight);
                this.TaskBarBrowseToCueRight[0].ganttTaskItemBar = this;
                this.TaskBarBrowseToCueRight[0].title = window.RadiantQ_ScrollToTask;
                this.TaskBarBrowseToCueRight.addClass("rq-gc-browseCue-right").bind("touchstart." + this.widgetName + " mousedown." + this.widgetName, this.BrowseToTaskCue_Click.bind(this))
            },
            BrowseToTaskCue_Click: function(a) {
                a = this.StartTime();
                this.GanttChart._setOption("AnchorTime", a);
                return !1
            },
            _BrowseToCueTemplateChanged: function() {
                this._GanttChart_ViewportTimeRangeChanged()
            },
            TooltipContent: null,
            DragTooltipContent: null,
            ResizeTooltipContent: null,
            ApplyTooltipSettings: function(a) {
                b(a).attr("title", "");
                this.LoadDefaultTooltipStyle();
                this.CreateTooltip(this, a);
                this.UpdateTooltipContent(this.options.ActivityView)
            },
            closeToolTip: function() {},
            CreateTooltip: function(a, d) {
                b(d).tooltip({
                    open: function(b,
                        c) {
                        disableTooltip = d[0].disableTooltip;
                        d[0].uiTooltip = c.tooltip;
                        var e = c.tooltip.find("table.TaskTooltip");
                        a.options.TaskTooltipTemplate;
                        0 != e.length && (e = e.width(), c.tooltip.css("max-width", e + "px"), c.tooltip.css("width", e + "px"))
                    },
                    disableTooltip: !1,
                    content: function(d) {
                        if (this.disableTooltip || g) return null;
                        this.disableTooltip = !1;
                        "function" != typeof a.options.TaskTooltipTemplate && "string" == typeof a.options.TaskTooltipTemplate && (a.options.TaskTooltipTemplate = f(a.options.TaskTooltipTemplate));
                        d = a.options.TaskTooltipTemplate(a.options.ActivityView.activity);
                        a.TooltipContent = b('<div class="TaskTooltip" />').append(d);
                        return a.TooltipContent
                    },
                    position: {
                        my: "left top+15",
                        at: "top",
                        offset: "10"
                    },
                    track: !0
                });
                var c = this.options.ActivityView,
                    e = this;
                this.updateTooltip = function(a, d) {
                    "StartTime" != d.PropertyName && "EndTime" != d.PropertyName && "ProgressPercent" != d.PropertyName && "ActivityName" != d.PropertyName || !this.options.TaskTooltipTemplate || (this.TooltipContent = b('<div class="TaskTooltip" />').append(b.tmpl(this.options.TaskTooltipTemplate, a, {
                        isParentType: c.IsParent,
                        DataContext: e
                    })))
                };
                b(d).hover(function() {}, function() {
                    e._removeTooltip(this)
                });
                b(d).bind("contextmenu.tooltipHandler blur.tooltipHandler", function() {
                    e._removeTooltip(this)
                })
            },
            _removeTooltip: function(a) {
                if (a) {
                    var d = "#" + b(a).attr("aria-describedby");
                    b(d).remove();
                    b(a).removeAttr("aria-describedby")
                }
            },
            UpdateTooltipContent: function(a) {
                if (a.ProposedStart && a.ProposedEnd) {
                    0 == a.OriginalStart.compareTo(a.ProposedStart) && 0 == a.OriginalEnd.compareTo(a.ProposedEnd) && (a.HasChanged = !1);
                    var b = {
                        Name: a.Name,
                        StartTime: a.ProposedStart,
                        EndTime: a.ProposedEnd,
                        OriginalStart: a.OriginalStart,
                        OriginalEnd: a.OriginalEnd,
                        HasChanged: a.HasChanged,
                        ProgressPercent: a.ProgressPercent
                    };
                    if (a.Duration) {
                        if (0 > a.Duration.days) return;
                        b.Duration = a.Duration
                    }
                    this.createPopup(b)
                }
            },
            createPopup: function (a) {
                this.LoadDefaultTooltipStyle();

                !1 == a instanceof RadiantQ.Gantt.Model.IActivity && (a.StartTime_M = function() {
                    return a.StartTime
                }, a.EndTime_M = function() {
                    return a.EndTime
                }, a.Duration_M = function() {
                    return a.Duration
                }, a.ProgressPercent_M = function() {
                    return a.ProgressPercent
                });
                "function" != typeof this.options.MovingInfoPopup &&
                    "string" == typeof this.options.MovingInfoPopup && (this.options.MovingInfoPopup = f(this.options.MovingInfoPopup));
                "function" != typeof this.options.ResizeInfoPopup && "string" == typeof this.options.ResizeInfoPopup && (this.options.ResizeInfoPopup = f(this.options.ResizeInfoPopup));
                "function" != typeof this.ProgressResizeContent && "string" == typeof this.ProgressResizeContent && (this.ProgressResizeContent = f(this.ProgressResizeContent));
                this.DragTooltipContent = b("<div/>").append(this.options.MovingInfoPopup(a));
                this.ResizeTooltipContent =
                    b("<div/>").append(this.options.ResizeInfoPopup(a));
                this.ProgressResizeContent = b("<div/>").append(this.options.ProgressTemplate(a))
            },
            ConnectingInfo: function(a) {
                this.DepConnContent = this.options.ConnectingInfoPopup(a)
            },
            LoadDefaultTooltipStyle: function() {
                this.StartTime();
                this.EndTime();
                this.defaultTemplate()
            },
            defaultTemplate: function() {
                var a = "{{if $item.data.Duration_M()}}${$item.data.Duration_M().days}d ${$item.data.Duration_M().hours_M()}h ${$item.data.Duration_M().minutes_M()}m{{/if}}",
                    a = "#if (data.Duration_M()){# #= data.Duration_M().days #d #= data.Duration_M().hours_M() #h #=data.Duration_M().minutes_M() #m #}#";
                this.options.TaskTooltipTemplate || (this.options.TaskTooltipTemplate = f("<div align='left'><table class='TaskTooltip' style='white-space:nowrap;border:none;'><tr><td colspan='2' align='center'><b>${ RadiantQ_TaskString}</b></td></tr><tr><td><b>${ RadiantQ_NameString } :</b>&nbsp;${ data.ActivityName_M() }</td></tr><tr><td><b>${ RadiantQ_StartString }: </b>&nbsp;${ data.StartTime_M().toString('dd-MMM-yyyy') }</td><td><b>${ RadiantQ_DurationString } :</b>${ data.Duration_M().toString()}</td></tr><tr><td><b>${ RadiantQ_FinishString} : </b>&nbsp;${ data.EndTime_M().toString('dd-MMM-yyyy') }</td><td><b>${ RadiantQ_ProgressString } :</b>${ data.ProgressPercent_M() }%</td></tr></table></div>"));
                this.options.MovingInfoPopup || (this.options.MovingInfoPopup = f("<div align='left'><table class='rq-gc-taskbar-popup  ui-widget-content' style='white-space:nowrap;'><tr><td colspan='2' align='center'><b>${ RadiantQ_TaskString }</b></td></tr><tr><td style='float:right;'><b>${ RadiantQ_StartString}:&nbsp;&nbsp;&nbsp;</b></td><td>" + this._MakeItBoldWhenActualDate("${ data.StartTime_M().toString('yyyy-MM-dd')}") + "</td></tr><tr><td style='float:right;'><b>${ RadiantQ_FinishString }:&nbsp;</b> </td><td>" +
                    this._MakeItBoldWhenActualDate("${ data.EndTime_M().toString('yyyy-MM-dd') } ") + "</td></tr></table></div>"));
                this.options.ResizeInfoPopup || (this.options.ResizeInfoPopup = f("<div align='left'><table class='rq-gc-taskbar-popup  ui-widget-content' style='white-space:nowrap;'><tr><td colspan='2' align='center'><b>${ RadiantQ_TaskString }</b></td></tr><tr><td style='float:right;'><b>${ RadiantQ_DurationString } :</b></td><td align='left'>" + this._MakeItBoldWhenActualDate(a) + "</td></tr><tr><td style='float:right;'><b>${ RadiantQ_StartTimeString }:</b> </td><td>${ data.StartTime_M().toString('yyyy-MM-dd HH:mm') }</td></tr><tr><td style='float:right;'><b>${ RadiantQ_EndTimeString }:</b></td><td> ${ data.EndTime_M().toString('yyyy-MM-dd HH:mm')}</td></tr></table></div>"));
                this.options.ProgressTemplate || (this.options.ProgressTemplate = f("<div><table class='rq-gc-taskbar-popup  ui-widget-content' style='white-space:nowrap;'><tr><td colspan='2' align='center'><b>${ RadiantQ_TaskString }</b></td></tr><tr><td><b>${ RadiantQ_ProgressPercentString }:</td><td>${ data.ProgressPercent_M()}%</b></td></tr></table></div>"));
                this.options.ConnectingInfoPopup || (this.options.ConnectingInfoPopup = f("<div align='left'><table class='rq-gc-taskbar-popup  ui-widget-content'' style='white-space:nowrap;border:none;'><tr><td colspan='2' align='center'><b>${ RadiantQ_FinishToStartLinkString }</b></td></tr><tr align='left'><td><b>${ RadiantQ_FromFinishOfString }  :</b></td><td>&nbsp;${ data.ConnectingInfoFromTaskText }</td></tr><tr align='left'><td><b>${ RadiantQ_ToStartOfString } &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:</b></td><td>&nbsp;${ data.ConnectingInfoToTaskText }</td></tr></table></div> "))
            },
            _MakeItBoldWhenActualDate: function(a) {
                return "#if( data.HasChanged ){# " + a + "#}else {# <b>" + a + "</b>#}#"
            },
            IsDepLinesReadOnly: !1,
            IsEffortReadOnly: !1,
            IsTaskReadOnly: !1,
            IsProgressPercentReadOnly: !1,
            IsStartTimesReadOnly: !1,
            IsReadOnly: !1,
            initValuesFromOptions: function() {
                var a = this.GanttControl.options;
                this.IsDepLinesReadOnly = a.IsDependencyLinesReadOnly;
                this.IsEffortReadOnly = a.IsEffortReadOnly;
                this.IsTaskReadOnly = this.ActivityView.IsReadOnly_M();
                this.IsProgressPercentReadOnly = a.IsProgressPercentReadOnly;
                this.IsStartTimesReadOnly =
                    a.IsStartTimesReadOnly;
                this.IsReadOnly = a.IsReadOnly
            },
            ReadOnlyStateChangedCallback: function(a, b) {
                var d = void 0 != b.value ? b.value : b.Value;
                "IsDependencyLinesReadOnly" == b.PropertyName ? this.IsDepLinesReadOnly = d : "IsEffortReadOnly" == b.PropertyName ? this.IsEffortReadOnly = d : "IsTaskReadOnly" == b.PropertyName ? this.IsTaskReadOnly = d : "IsProgressPercentReadOnly" == b.PropertyName ? this.IsProgressPercentReadOnly = d : "IsStartTimesReadOnly" == b.PropertyName ? this.IsStartTimesReadOnly = d : "IsReadOnly" == b.PropertyName && (this.IsReadOnly =
                    d);
                this.UpdateThumbsReadOnlyStates()
            },
            UpdateThumbsReadOnlyStates: function() {
                var a = this.element,
                    d = b(".rq-gc-progressbar-resizer", a);
                0 == d.length && (d = b(".ui-progress-resizer", a));
                if (0 != d.length) {
                    var c = !this.IsReadOnly && !this.IsTaskReadOnly && !this.IsProgressPercentReadOnly;
                    c ? d.css("visibility", "visible") : d.css("visibility", "collapse")
                }
                d = b(".rq-pg-gc-taskBarResizer", a);
                0 == d.length && (d = b(".PGresizer-style", a));
                0 != d.length && ((c = !this.IsReadOnly && !this.IsTaskReadOnly && !this.IsEffortReadOnly) ? d.css("display",
                    "block") : d.css("display", "none"))
            },
            _setOption: function(a, b) {
                this.widgetBaseSetOption.apply(this, arguments);
                "TaskBarBrowseToCueLeftTemplate" == a ? (this.TaskBarBrowseToCueLeft && this.TaskBarBrowseToCueLeft.remove(), this._createBrowseToCueLeft(this.options), this._BrowseToCueTemplateChanged()) : "TaskBarBrowseToCueRightTemplate" == a && (this.TaskBarBrowseToCueRight && this.TaskBarBrowseToCueRight.remove(), this._createBrowseToCueLeft(this.options), this._BrowseToCueTemplateChanged())
            },
            _destroy: function() {
                clearTimeout(this._asyncShiftAndResizeTimer);
                clearTimeout(this._asyncTooltipTimer);
                this._onTaskBarLoadTimer && (clearTimeout(this._onTaskBarLoadTimer), this._onTaskBarLoadTimer = null);
                this.options.UseRQModelBinder && RadiantQ.Unbind(this.element);
                if (this.GanttChart._dirtyTaskItemControls && this.GanttChart._diryTaskItemByActs[this.Activity.id]) {
                    var a = this.GanttChart._dirtyTaskItemControls.indexOf(this); - 1 != a && (this.GanttChart._dirtyTaskItemControls.splice(a, 1), delete this.GanttChart._diryTaskItemByActs[this.Activity.id])
                }
                this._actViewPropertyChangedHandler &&
                    (this._actViewPropertyChangedHandler.Dispose(), this._actViewPropertyChangedHandler = null);
                this._activityPropertyChangedHandler && (this._activityPropertyChangedHandler.Dispose(), this._activityPropertyChangedHandler = null);
                this._actAssgnsCollectionChangedHandler && (this._actAssgnsCollectionChangedHandler.Dispose(), this._actAssgnsCollectionChangedHandler = null);
                this._readOnlyPropertyChangedHandler && (this._readOnlyPropertyChangedHandler.Dispose(), this._readOnlyPropertyChangedHandler = null);
                this._chartRefreshUIHandler &&
                    (this._chartRefreshUIHandler.Dispose(), this._chartRefreshUIHandler = null);
                this._viewPortChangedHandler && (this._viewPortChangedHandler.Dispose(), this._viewPortChangedHandler = null);
                this._beforeChartHZScrollHandler && (this._beforeChartHZScrollHandler.Dispose(), this._beforeChartHZScrollHandler = null);
                a = this.Activity;
                a.PropertyChanged && a.PropertyChanged.unsubscribe(this.updateTooltip, this);
                this.TaskBarRectangle = this.ParentBar = this.ProgressPercentResizeThumb = this.MileStoneBar = null;
                this.element.empty();
                delete this.element.parent()[0]["data-grid-item"];
                this.element.data("GanttTaskItemBar", null)
            }
        };
    e.GanttTaskItemBar = h;
    b.fn.ganttShiftTracker = function(d, e) {
        var f, h, p;

        function q(a, d, c, e) {
            var f = G.GetOffsetDueToHScroll(),
                g = G.GetOffsetDueToVScroll();
            !0 == e && (c.pageX = c.originalEvent.touches[0].pageX, c.pageY = c.originalEvent.touches[0].pageY);
            $DeplinkLine = b("#rq-gc-dependencyCue-parent", this.GanttChart.element);
            0 == b("#rq-gc-dependencyCue-arrow", this.GanttChart.element).length && $DeplinkLine.append("<div id='rq-gc-dependencyCue-arrow' class='rq-gc-dependencyCue-arrow " +
                window.radiantQclasses.defaultClass + "' style='width:0; height:0; z-index:2;  position:relative; border-top-width:5px; border-top-style:solid; border-right:5px solid transparent; border-left:5px solid transparent; border-bottom-width:0px; margin-left:-4px;'</div>");
            $DeplinkInnerLineArrow = b("#rq-gc-dependencyCue", this.GanttChart.element);
            if (0 < $DeplinkLine.length) {
                d.parents("div.rq-ganttChart");
                var h = this.GanttChart.VSB.$scrollContainer.scrollTop(),
                    k = d.offset().left + $DeplinkLine[0].offsetLeft - d[0].offsetLeft;
                a = $DeplinkLine[0].offsetTop - (a * d[0].parentElement.offsetHeight + d[0].offsetTop) + h;
                h = d.offset().top + a;
                a = d = 0;
                H ? (a = k = 0, !0 == e ? (k = c.originalEvent.touches[0].clientX, a = c.originalEvent.touches[0].clientY) : (k = c.clientX, a = c.clientY), k += f, a += g, d = Math.sqrt((k - H.x) * (k - H.x) + (a - H.y) * (a - H.y)), a = 180 / 3.1415 * Math.acos((a - H.y) / d), k > H.x && (a *= -1)) : (d = Math.sqrt((c.pageX - k) * (c.pageX - k) + (c.pageY - h) * (c.pageY - h)), a = 180 / 3.1415 * Math.acos((c.pageY - h) / d), c.pageX > k && (a *= -1));
                $DeplinkInnerLineArrow.css({
                    height: d - 7,
                    "-webkit-transform": "rotate(" +
                        a + "deg)",
                    "-moz-transform": "rotate(" + a + "deg)",
                    "-o-transform": "rotate(" + a + "deg)",
                    "-ms-transform": "rotate(" + a + "deg)",
                    transform: "rotate(" + a + "deg)",
                    "-ms-filter": "progid:DXImageTransform.Microsoft.BasicImage(rotation=90)"
                });
                $DeplinkLine.css({
                    height: d - 5,
                    "-webkit-transform": "rotate(" + a + "deg)",
                    "-moz-transform": "rotate(" + a + "deg)",
                    "-o-transform": "rotate(" + a + "deg)",
                    "-ms-transform": "rotate(" + a + "deg)",
                    transform: "rotate(" + a + "deg)",
                    "-ms-filter": "progid:DXImageTransform.Microsoft.BasicImage(rotation=90)"
                });
                A = this.GanttChart.TaskOnMouseHover;
                f = {
                    ConnectingInfoFromTaskText: this.Activity.ActivityName_M(),
                    ConnectingInfoToTaskText: ""
                };
                null != A && A.Activity_M() != this.Activity && (!1 == this.Activity.Model.CanAddNewDependency(this.Activity, A.Activity_M(), RadiantQ.Gantt.Model.NewDependencyAddScenarioType.UserDragOver) ? A = null : f = {
                    ConnectingInfoFromTaskText: this.Activity.ActivityName_M(),
                    ConnectingInfoToTaskText: this.Activity != A.Activity_M() ? A.Activity_M().ActivityName_M() : ""
                });
                this.ConnectingInfo(f);
                var l = b(".dragPopup");
                l.empty();
                l.append(this.DepConnContent);
                !0 == R && (R = !1, c.originalEvent.touches && (c.pageY = c.originalEvent.touches[0].pageY), l[0].refreshPostion = function(a) {
                    var d = b(".rq-gc-taskbar-popup", l).outerHeight(),
                        f = c.pageY,
                        f = a ? f - (c.offsetY + d) : f + c.offsetY;
                    !0 == e ? l.css({
                        left: c.originalEvent.touches[0].pageX,
                        top: f
                    }) : l.css({
                        left: c.pageX,
                        top: f
                    })
                });
                l.css("visibility", "visible")
            }
        }

        function s(a) {
            27 == a.keyCode && (G.EndTracking(), b(document).unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown", s), b(this).RemoveDragOrResizeContent(r),
                g = !1, r[0].uiTooltip && (r[0].disableTooltip = !1), b("#clone").remove(), b("#rq-gc-dependencyCue-parent", this.GanttChart.element).remove(), !0 == z && (z = !1), null != A && (A = null), !0 == y && (y = !1), !0 == B && (B = !1))
        }
        var r = this,
            t, x, w, u, v;
        new ObjectEvent("DragComplete");
        var C = 0,
            z = !1,
            y = !1,
            B = !1,
            A = null,
            D = d.options.WorkTimeSchedule,
            E = null,
            J = null,
            H = {
                x: 0,
                y: 0
            }, F = 0,
            I = !1,
            N = null;
        r.bind("touchstart." + d.widgetName, function(a) {
            I = !0;
            if (!this.IsReadOnly && !this.IsTaskReadOnly && !b(a.target).hasClass("label")) {
                a.stopPropagation();
                R = !0;
                var d =
                    Q.call(this, a, r, !0);
                u = function(a) {
                    return K.call(this, a, d, r, !0)
                };
                v = function(a) {
                    return U.call(this, a, d, r, !0)
                };
                b(document).bind("touchmove." + this.widgetName, u.bind(this)).bind("touchend." + this.widgetName, v.bind(this))
            }
        }.bind(d));
        r.bind("mousedown." + d.widgetName, function(a) {
            if (!(I || (document.mouseButtonPressed = !0, this.IsReadOnly || this.IsTaskReadOnly || b(a.target).hasClass("label")))) {
                R = !0;
                var d = Q.call(this, a, r, !1);
                u = function(a) {
                    return K.call(this, a, d, r, !1)
                };
                v = function(a) {
                    document.mouseButtonPressed = !1;
                    return U.call(this, a, d, r, !1)
                };
                b(document).bind("mousemove." + this.widgetName, u.bind(this)).bind("mouseup." + this.widgetName, v.bind(this))
            }
        }.bind(d));
        var G = null,
            O = 0,
            Q = function(a, d, e) {
                this.taskStartAndEndTime = {
                    Name: this.Activity.ActivityName_M(),
                    OriginalStart: this.Activity.StartTime_M(),
                    OriginalEnd: this.Activity.EndTime_M(),
                    originalWidth: this.TaskBarRectangle.width(),
                    originalLeft: this.TaskBarRectangle.css("margin-left"),
                    ProgressEndTime: null,
                    ProposedEnd: null,
                    ProposedStart: null,
                    ProgressPercent: this.Activity.ProgressPercent_M()
                };
                D = this.GetScheduleToPlotWith();
                G = new RadiantQ.FlexyGantt.AutoScrollTracker(this.GanttControl);
                var f = M(a, void 0, d, e);
                G.OnScroll.subscribe(function(b, c) {
                    S.call(this, a, $taskClone, d, e, f)
                }, this);
                var g = d[0].getBoundingClientRect();
                G.prevDeltaStartX = g.left;
                G.prevDeltaEndX = g.right;
                R = !0;
                var g = a.srcElement,
                    h = d.closest("tr"),
                    k = h.attr("list-index");
                k || (k = h.index());
                if (!g || !b(g).hasClass("rq-pg-gc-taskBarResizer")) {
                    $taskClone = b("<div id='clone' class='taskclone rq-taskbar-clone " + window.radiantQclasses.defaultClass +
                        "'></div>");
                    var g = b("<div id='rq-gc-dependencyCue-parent' class='rq-gc-dependencyCue-parent " + window.radiantQclasses.defaultClass + "'><div id='rq-gc-dependencyCue' class='rq-gc-dependencyCue'></div></div>"),
                        l = d.parents("div.rq-ganttChart"),
                        h = this.GanttChart.VSB.$scrollContainer.scrollTop(),
                        k = d.parents("div.rq-ganttChart");
                    a.offsetX = a.clientX - d.offset().left;
                    a.offsetY = a.clientY - d.offset().top;
                    O = b("div.rq-tsh-div", l).outerHeight(!0);
                    l = d.height() / 2;
                    h = d.offset().top - k.offset().top - (O - l) + h;
                    k = d.offset();
                    !0 == e ? (H = {
                        x: a.originalEvent.touches[0].clientX,
                        y: a.originalEvent.touches[0].clientY
                    }, g.css({
                        top: h,
                        left: a.originalEvent.touches[0].pageX - k.left + d[0].offsetLeft
                    })) : (H = {
                        x: a.clientX,
                        y: a.clientY
                    }, g.css({
                        top: h,
                        left: a.offsetX + d[0].offsetLeft
                    }));
                    $taskClone.css({
                        width: d[0].offsetWidth - 2 + "px",
                        height: d[0].offsetHeight - 2 + "px"
                    });
                    this.IsStartTimesReadOnly || $taskClone.appendTo(d);
                    B = !1 == this.CanShiftTask(this);
                    L.call(this, a, $taskClone, d, e, g);
                    g = this.options.GanttChart.options.TimeIndicatorLineOption;
                    if ((g & c.TimeIndicatorLines.OnResize) ==
                        c.TimeIndicatorLines.OnResize || (g & c.TimeIndicatorLines.Always) == c.TimeIndicatorLines.Always) E = d.find("div.rq-gc-start-verticalLine").clone().show(), J = d.find("div.rq-gc-end-verticalLine").clone().show(), $taskClone.append(E), $taskClone.append(J);
                    return $taskClone
                }
            }, L = function(a, d, c, e, f) {
                g = !0;
                this.closeToolTip();
                c[0].uiTooltip && (c[0].disableTooltip = !0);
                var h = M(a, d, c, e);
                t = h.x;
                x = h.y;
                w = d[0].offsetLeft;
                c.addClass("rq-taskbar-shadow");
                d = this.GanttChart._getUniqueSelectorIdByID("rq-gc-viewsContainer-div");
                b(".rq-gc-dependencysParent", d).append(f);
                this.taskStartAndEndTime.OriginalStart = this.Activity.StartTime_M();
                this.taskStartAndEndTime.OriginalEnd = this.Activity.EndTime_M();
                D ? (this.taskStartAndEndTime.ProposedStart = D.ConvertToNextWorkingTime(this.taskStartAndEndTime.OriginalStart), this.taskStartAndEndTime.ProposedEnd = D.GetEnd(this.taskStartAndEndTime.ProposedStart, this.Activity.Effort_M())) : (this.taskStartAndEndTime.ProposedStart = this.GanttControl.RoundUp(this.taskStartAndEndTime.OriginalStart), this.taskStartAndEndTime.ProposedEnd =
                    this.GanttControl.RoundUp(this.taskStartAndEndTime.OriginalEnd));
                this.UpdateTooltipContent(this.taskStartAndEndTime);
                c.GetDragOrResizeContent(this.DragTooltipContent, a, c, e);
                N = b(".dragPopup");
                b(document).bind("keydown", s.bind(this))
            }, K = function(a, d, c, e) {
                c.addClass("rq-taskbar-shadow");
                if (!0 == e) {
                    var g = document.elementFromPoint(a.originalEvent.touches[0].pageX, a.originalEvent.touches[0].pageY);
                    mouseHoverActivity = b(g).parents(".rq-gc-row ").data();
                    null != mouseHoverActivity ? (this.GanttChart.TaskOnMouseHover =
                        mouseHoverActivity.GanttTaskItemBar.ActivityView, this.GanttChart.TaskViewOnMouseHover = mouseHoverActivity.GanttTaskItemBar.ActivityView) : (this.GanttChart.TaskOnMouseHover = null, this.GanttChart.TaskViewOnMouseHover = null)
                }
                f = this.taskStartAndEndTime.OriginalStart.clone();
                h = this.taskStartAndEndTime.OriginalEnd.clone();
                p = this.OriginalLeft;
                f <= h && (g = M(a, d, c, e), F = g.x - t + w, S.call(this, a, d, c, e, g), G.MouseMovedTo({
                    X: event.clientX,
                    Y: event.clientY
                }, z))
            }, U = function(a, d, c, f) {
                G.EndTracking();
                g = !1;
                c.removeClass("rq-taskbar-shadow");
                null == this.taskStartAndEndTime.ProposedStart || null == this.taskStartAndEndTime.ProposedEnd || this.IsStartTimesReadOnly || (c[0].uiTooltip && (c[0].disableTooltip = !1), this.taskStartAndEndTime.OriginalStart = this.taskStartAndEndTime.ProposedStart, this.taskStartAndEndTime.OriginalEnd = this.taskStartAndEndTime.ProposedEnd, "function" == typeof e && e.call(this, this, this.taskStartAndEndTime));
                null != A && (a = A.Activity_M(), this.Activity.Model.CanAddNewDependency(this.Activity, a, RadiantQ.Gantt.Model.NewDependencyAddScenarioType.UserDragDrop) &&
                    (a = new RadiantQ.Gantt.CreateNewDependencyAction(this.GanttControl.Model, this.Activity, a, !1), this.GanttControl.ActionManager.RecordAction(a)), A = null);
                c.RemoveDragOrResizeContent(c);
                b("#clone").remove();
                b("#rq-gc-dependencyCue-parent", this.GanttChart.element).remove();
                if (!0 == z || this.IsDepLinesReadOnly) z = !1;
                !0 == y && (y = !1);
                !0 == B && (B = !1);
                H = {
                    x: 0,
                    y: 0
                };
                this.UpdateTooltipContent(this.ActivityView);
                b(document).unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown", s);
                b(document).unbind("mousemove." +
                    this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown", s)
            }, M = function(a, b, d, c) {
                if (!0 == c)
                    if (a.originalEvent.touches[0].pageX || a.originalEvent.touches[0].pageY) var e = a.originalEvent.touches[0].pageX,
                f = a.originalEvent.touches[0].pageY;
                else {
                    if (a.originalEvent.touches[0].clientX || a.originalEvent.touches[0].clientY) e = a.originalEvent.touches[0].clientX, f = a.originalEvent.touches[0].clientY
                } else if (a.pageX || a.pageY) e = a.pageX, f = a.pageY;
                else if (a.clientX || a.clientY) e = a.clientX, f = a.clientY;
                return {
                    x: e,
                    y: f
                }
            }, R = !1,
            S = function(d, c, e, g, h) {
                var k = G.GetOffsetDueToHScroll(),
                    k = F + k;
                var m = h.x - t;
                h = h.y - x;
                C++;
                if (!(6 > C) && null != e[0].parentElement) {
                    var n = e.closest("tr"),
                        r = n.attr("list-index");
                    r || (r = n.index());
                    !1 == z && !1 == y && (4 <= Math.abs(h) && !this.IsDepLinesReadOnly && !this.GanttControl.options.IsReadOnly ? z = !0 : 4 <= Math.abs(m) && !0 != z && !B && !this.ActivityView._isParent && !this.GanttControl.options.IsStartTimesReadOnly && (y = !0));
                    if (z) q.call(this, r, e, d, g);
                    else if (y) {
                        d = G.GetOffsetDueToHScroll();
                        g = p;
                        m = Date.MaxValue;
                        h = Date.MinValue;
                        n = this.GetScheduleToPlotWith();
                        if (!0 == this.GanttControl.Model.AdjustDurationOnAssignment && 0 < this.ActivityView.Activity_M().Assignments.length)
                            for (var r = this.ActivityView.Activity_M(), s = r.Assignments.length, R = 0; R < s; R++) {
                                var S = r.Assignments[R];
                                if (null != S.Resource.Schedule) {
                                    var u = a.ConvertToEndTimeInBaseScaleType(this.GanttChart.options.BaseTimeScaleType, f.clone(), g / this.GanttChart.options.BaseTimeUnitWidth, (F + g + d) / this.GanttChart.options.BaseTimeUnitWidth, S.Resource.Schedule),
                                        u = S.Resource.Schedule.ConvertToNextWorkingTime(u);
                                    m.isGreaterThan(u) && (m = u, S = RadiantQ.Gantt.Model.BaseGanttModel.ComputeEndTime(m, this.ActivityView.Activity_M().Effort_M(), S.Resource.Schedule), h.isLessThan(S) && (h = S))
                                }
                            }
                        m == Date.MaxValue && (m = a.ConvertToEndTimeInBaseScaleType(this.GanttChart.options.BaseTimeScaleType, f.clone(), g / this.GanttChart.options.BaseTimeUnitWidth, (F + g + d) / this.GanttChart.options.BaseTimeUnitWidth, n), null != n && (m = n.ConvertToNextWorkingTime(m)), h = RadiantQ.Gantt.Model.BaseGanttModel.ComputeEndTime(m, this.ActivityView.Activity_M().Effort_M(),
                            n));
                        this.taskStartAndEndTime.ProposedStart = this.GanttControl.RoundUp(m);
                        this.taskStartAndEndTime.ProposedEnd = this.GanttControl.RoundUp(h);
                        0 == this.taskStartAndEndTime.ProposedStart.compareTo(this.taskStartAndEndTime.OriginalStart) && 0 == this.taskStartAndEndTime.ProposedEnd.compareTo(this.taskStartAndEndTime.OriginalEnd) ? this.taskStartAndEndTime.HasChanged = !1 : this.taskStartAndEndTime.HasChanged = !0;
                        this.UpdateTooltipContent(this.taskStartAndEndTime);
                        N.empty();
                        N.append(this.DragTooltipContent);
                        this.IsStartTimesReadOnly ||
                            N.css("visibility", "visible");
                        e[0].uiTooltip && e[0].uiTooltip.hide()
                    }
                }!0 == y && b(c).css("margin-left", k + "px")
            }
    };
    b.fn.ganttResizeTracker = function(d, e) {
        function f(a) {
            27 == a.keyCode && (H.EndTracking(), b(document).unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown", f), b(document).unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown", f), g = !1, h[0].uiTooltip ? (h[0].disableTooltip = !1, h[0].uiTooltip.show()) : h.parent()[0].uiTooltip && (h.parent()[0].disableTooltip = !1, h.parent()[0].uiTooltip.show()), b(this).RemoveDragOrResizeContent(h), b("#clone").remove())
        }
        var h = this,
            p, q, s, r, t = {
                isTrue: !1
            }, x, w = 0,
            u = !1,
            v = new ObjectEvent("ResizeComplete"),
            C = b("<div class='rq-pg-gc-taskBarResizer'></div>"),
            z = b("<div class='rq-gc-progressbar-resizer'></div>"),
            y = h.css("height");
        C.css("height", y);
        var B = h.find("div.rq-gc-parentBar-middle"),
            A = h.find("div.progressbarStyle");
        0 == B.length && (B = h.find("div.parentMiddleBar-style"));
        0 == A.length && (A = h.find("div.rq-gc-progressbar"));
        var D = null,
            E = null,
            J = A.width();
        z.css("height", y);
        z.css("margin-left", J);
        0 != B.length ? B.append(C) : h.append(C);
        d.GanttControl.options.IsEffortReadOnly && C.css("display", "none");
        y = !1;
        0 < h.parent("div.rq-gc-progressbar-resizer").length ? y = !0 : 0 < h.parent("div.ui-progress-resizer").length && (y = !0);
        A && !1 == y && h.append(z);
        C.bind("touchstart." + d.widgetName, function(a) {
            u = !0;
            t = {
                isTrue: !1
            };
            var d = F.call(this, a, h, t, !0);
            s = function(a) {
                t = {
                    isTrue: !1
                };
                return G.call(this, a, d, h, !0, t)
            };
            r = function(a) {
                return O.call(this, a, d, h, t, !0)
            };
            b(document).bind("touchmove." +
                this.widgetName, s.bind(this)).bind("touchend." + this.widgetName, r.bind(this))
        }.bind(d));
        C.bind("mousedown." + d.widgetName, function(a) {
            if (!u) {
                document.mouseButtonPressed = !0;
                t = {
                    isTrue: !1
                };
                var c = F.call(this, a, h, t, !1);
                s = function(a) {
                    t = {
                        isTrue: !1
                    };
                    return G.call(this, a, c, h, !1, t)
                };
                r = function(a) {
                    document.mouseButtonPressed = !1;
                    return O.call(this, a, c, h, t, !1)
                };
                b(document).bind("mousemove." + d.widgetName, s.bind(this)).bind("mouseup." + d.widgetName, r.bind(this))
            }
        }.bind(d));
        var H = null,
            F = function(a, d, e, f) {
                var g = this.options.ActivityView.Activity_M();
                this.taskStartAndEndTime = {
                    Name: g.ActivityName_M(),
                    OriginalStart: g.StartTime_M(),
                    OriginalEnd: g.EndTime_M(),
                    originalWidth: this.TaskBarRectangle.width(),
                    originalLeft: this.TaskBarRectangle.css("margin-left"),
                    ProgressEndTime: g.ProgressEndTime_M(),
                    ProposedEnd: null,
                    ProposedStart: null
                };
                H = new RadiantQ.FlexyGantt.AutoScrollTracker(this.GanttControl);
                H.OnScroll.subscribe(function(b, c) {
                    L.call(this, a, $taskClone, d, f, e)
                }, this);
                $taskClone = b("<div id='clone' class='taskclone rq-taskbar-clone " + window.radiantQclasses.defaultClass +
                    "'></div>");
                $taskClone.css({
                    width: d[0].offsetWidth - 2 + "px",
                    height: d[0].offsetHeight - 3 + "px"
                });
                !1 == e.isTrue && d.addClass("rq-taskbar-shadow");
                d.append($taskClone);
                N.call(this, a, $taskClone, d, e, f);
                a.stopPropagation();
                g = this.GanttChart.options.TimeIndicatorLineOption;
                if ((g & c.TimeIndicatorLines.OnResize) == c.TimeIndicatorLines.OnResize || (g & c.TimeIndicatorLines.Always) == c.TimeIndicatorLines.Always) D = d.find("div.rq-gc-start-verticalLine").clone().show(), E = d.find("div.rq-gc-end-verticalLine").clone().show(),
                $taskClone.append(D), $taskClone.append(E);
                return $taskClone
            };
        z.bind("touchstart." + d.widgetName, function(a) {
            u = !0;
            var d = a.currentTarget;
            t = {
                isTrue: !0
            };
            var c = I.call(this, a, h, A, t, !0);
            s = function(a) {
                t = {
                    isTrue: !0
                };
                return G.call(this, a, c, A, !0, t)
            };
            r = function(a) {
                t = {
                    isTrue: !0
                };
                return O.call(this, a, c, A, t, !0, d)
            };
            b(document).bind("touchmove." + this.widgetName, s.bind(this)).bind("touchend." + this.widgetName, r.bind(this))
        }.bind(d));
        z.bind("mousedown." + d.widgetName, function(a) {
            if (!u) {
                document.mouseButtonPressed = !0;
                var d =
                    a.currentTarget;
                t = {
                    isTrue: !0
                };
                var c = I.call(this, a, h, A, t, !1);
                s = function(a) {
                    t = {
                        isTrue: !0
                    };
                    return G.call(this, a, c, A, !1, t)
                };
                r = function(a) {
                    document.mouseButtonPressed = !1;
                    t = {
                        isTrue: !0
                    };
                    return O.call(this, a, c, A, t, !1, d)
                };
                b(document).bind("mousemove." + this.widgetName, s.bind(this)).bind("mouseup." + this.widgetName, r.bind(this))
            }
        }.bind(d));
        var I = function(a, d, c, e, f) {
            var g = this.options.ActivityView.Activity_M();
            this.taskStartAndEndTime = {
                Name: g.ActivityName_M(),
                OriginalStart: g.StartTime_M(),
                OriginalEnd: g.EndTime_M(),
                originalWidth: this.TaskBarRectangle.width(),
                originalLeft: this.TaskBarRectangle.css("margin-left"),
                ProgressEndTime: g.ProgressEndTime_M(),
                ProgressPercent: g.ProgressPercent_M(),
                ProposedEnd: null,
                ProposedStart: null
            };
            $progressClone = b("<div id='clone' class='taskclone rq-taskbar-clone  " + window.radiantQclasses.defaultClass + "'></div>");
            H = new RadiantQ.FlexyGantt.AutoScrollTracker(this.GanttControl);
            H.OnScroll.subscribe(function(b, d) {
                L.call(this, a, $progressClone, c, f, e)
            }, this);
            $progressClone.css({
                width: c[0].offsetWidth -
                    2 + "px",
                height: d[0].offsetHeight - 3 + "px"
            });
            d.append($progressClone);
            N.call(this, a, $progressClone, c, e, f);
            a.stopPropagation();
            return $progressClone
        }, N = function(a, d, c, e, h) {
                this.GetScheduleToPlotWith();
                g = !0;
                this.closeToolTip();
                c[0].uiTooltip ? c[0].disableTooltip = !0 : c.parent()[0].uiTooltip && (c.parent()[0].disableTooltip = !0);
                p = Q(a, d, c, h).x;
                q = d[0].offsetWidth;
                this.taskStartAndEndTime.ProposedStart = this.taskStartAndEndTime.OriginalStart;
                this.taskStartAndEndTime.ProposedEnd = this.taskStartAndEndTime.OriginalEnd;
                this.taskStartAndEndTime.ProgressEndTime = this.taskStartAndEndTime.ProgressEndTime;
                x = this.Activity.ProgressPercent;
                this.taskStartAndEndTime.OriginalDuration = this.Activity.Duration_M();
                this.ProposedDuration = this.taskStartAndEndTime.OriginalDuration;
                d = c.closest(".rq-gc-taskbar");
                0 == d.length && (d = c.closest(".taskbar-style"));
                !0 == e.isTrue ? b(this).GetDragOrResizeContent(this.ProgressResizeContent, a, d, h) : b(this).GetDragOrResizeContent(this.ResizeTooltipContent, a, c, h);
                b(document).bind("keydown", f.bind(this))
            },
            G = function(a, b, d, c, e) {
                w = Q(a, b, d, c, e).x - p + q;
                L.call(this, a, b, d, c, e);
                H.MouseMovedTo({
                    X: a.clientX,
                    Y: a.clientY
                })
            }, O = function(a, d, c, h, k, m) {
                H.EndTracking();
                g = document.mouseButtonPressed = !1;
                c[0].uiTooltip ? (c[0].disableTooltip = !1, c[0].uiTooltip.show()) : c.parent()[0].uiTooltip && (c.parent()[0].disableTooltip = !1, c.parent()[0].uiTooltip.show());
                b(this).RemoveDragOrResizeContent(c);
                b("#clone").remove();
                this.taskStartAndEndTime.OriginalEnd = this.taskStartAndEndTime.ProposedEnd ? this.taskStartAndEndTime.ProposedEnd :
                    this.taskStartAndEndTime.OriginalEnd;
                this.taskStartAndEndTime.OriginalDuration = this.ProposedDuration;
                if (!0 == h.isTrue) {
                    if (a = b(d).css("width")) c.css({
                        width: a
                    }), 0 != parseInt(a) && c.css({
                        "border-width": "1px"
                    }), b(m).css("margin-left", parseInt(c.css("width")) + "px");
                    m = new RadiantQ.Gantt.SetProgressValueAction(this.ActivityView.Activity_M(), x, !1)
                } else m = new RadiantQ.Gantt.SetDurationAction(this.GanttControl, this.ActivityView.Activity_M(), this.ProposedDuration);
                this.GanttControl.ActionManager.RecordAction(m);
                this.taskStartAndEndTime.ProgressEndTime = this.taskStartAndEndTime.ProgressEndTime > this.taskStartAndEndTime.OriginalEnd ? this.taskStartAndEndTime.OriginalEnd : this.taskStartAndEndTime.ProgressEndTime;
                v.subscribe(e, this);
                v.raise(this, {
                    taskStartAndEndTime: this.taskStartAndEndTime,
                    forProgressBar: h
                });
                this.UpdateTooltipContent(this.ActivityView);
                v.unsubscribe(e, this);
                c.removeClass("rq-taskbar-shadow");
                b(document).unbind("touchmove." + this.widgetName).unbind("touchend." + this.widgetName).unbind("keydown", f);
                b(document).unbind("mousemove." + this.widgetName).unbind("mouseup." + this.widgetName).unbind("keydown", f)
            }, Q = function(a, b, d, c, e) {
                if (!0 == c)
                    if (a.originalEvent.touches[0].pageX || a.originalEvent.touches[0].pageY) var f = a.originalEvent.touches[0].pageX,
                g = a.originalEvent.touches[0].pageY;
                else {
                    if (a.originalEvent.touches[0].clientX || a.originalEvent.touches[0].clientY) f = a.originalEvent.touches[0].clientX, g = a.originalEvent.touches[0].clientY
                } else if (a.pageX || a.pageY) f = a.pageX, g = a.pageY;
                else if (a.clientX || a.clientY) f =
                    a.clientX, g = a.clientY;
                return {
                    x: f,
                    y: g
                }
            }, L = function(d, c, e, f, g) {
                d = H.GetOffsetDueToHScroll();
                d = w + d;
                f = e.parents(".rq-gc-commonTaskbar").width() || d;
                !0 == g.isTrue && (x = Math.round(100 * (d / f)), 0 > x || 0 > d) && (d = x = 0, H.preventAutoscroll = !0);
                d > f ? (g.isTrue && (H.preventAutoscroll = !0), w = f, b(c).css("width", w + "px")) : (b(c).css("width", d + "px"), null != E && null != E[0] && (E[0].style["margin-left"] = d + "px"));
                !1 == g.isTrue && e.addClass("rq-taskbar-shadow");
                c = this.GetScheduleToPlotWith();
                this.taskStartAndEndTime.OriginalDuration.equals(this.ProposedDuration) ?
                    this.taskStartAndEndTime.HasChanged = !1 : this.taskStartAndEndTime.HasChanged = !0;
                !0 == g.isTrue && (100 < x ? x = 100 : 0 > x && (x = 0), this.taskStartAndEndTime.ProgressPercent = x);
                d = a.ConvertUnitsInBaseScaleTypeToDurationInHours(this.GanttChart.options.BaseTimeScaleType, this.taskStartAndEndTime.OriginalStart, this.OriginalLeft / this.GanttChart.options.BaseTimeUnitWidth, (this.OriginalLeft + d) / this.GanttChart.options.BaseTimeUnitWidth, null);
                d = new RQTimeSpan(0, d, 0, 0, 0);
                d = g.isTrue ? d : this.GanttControl.RoundUpDuration(d);
                f = RQTimeSpan.Zero_M();
                d < f && (d = f);
                this.ProposedDuration = d;
                this.taskStartAndEndTime.ProposedEnd = this.taskStartAndEndTime.OriginalStart.clone().addTimeSpan(d);
                c && (this.ProposedDuration = c.GetEffort(this.taskStartAndEndTime.OriginalStart, this.taskStartAndEndTime.ProposedEnd), this.taskStartAndEndTime.ProposedEnd = c.GetEnd(this.taskStartAndEndTime.OriginalStart, this.ProposedDuration), this.ProposedDuration = c.GetEffort(this.taskStartAndEndTime.OriginalStart, this.taskStartAndEndTime.ProposedEnd));
                this.taskStartAndEndTime.Duration =
                    this.ProposedDuration;
                this.UpdateTooltipContent(this.taskStartAndEndTime);
                c = b(".dragPopup");
                c.empty();
                !0 == g.isTrue ? c.append(this.ProgressResizeContent) : c.append(this.ResizeTooltipContent);
                c.css("visibility", "visible");
                e[0].uiTooltip ? e[0].uiTooltip.hide() : e.parent()[0].uiTooltip && e.parent()[0].uiTooltip.hide()
            }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.GanttDependencyControl = {
        Visibility: null,
        options: {
            name: "GanttDependencyControl",
            Data: null,
            DependencyViews: null,
            UseChartVirtualization: !1,
            ToggleVisibilityForVirtualizationSetting: null,
            GanttChart: null,
            GanttModel: null
        },
        _create: function() {
            this.element.data(this.options.name, this);
            var b = this.element.parents("div.rq-ganttChart");
            b.bind("ganttchartrefreshui.DependenciesRefreshUI", function(a, b) {
                this.element.empty();
                this.Refresh()
            }.bind(this));
            this.element.parents("div.rq-ganttBase");
            b.bind("ganttchartsourceupdated", function(a, b) {
                this.options.Data && this.options.Data.CollectionChanged.unsubscribe(this.ActivityViewsCollectionChange, this);
                this.options.DependencyViews && this.options.DependencyViews.CollectionChanged.unsubscribe(this.DependencyViewsColletionChange, this);
                this.element.empty();
                this.options.Data = b.options.FlatItemsSource;
                this.options.DependencyViews = this.options.GanttChart.options.Parent.DependencyViews;
                this._actViewsCollectionChangeHandler && this._actViewsCollectionChangeHandler.Dispose();
                this.options.Data && this.options.Data.CollectionChanged && (this._actViewsCollectionChangeHandler = this.options.Data.CollectionChanged.subscribe(this.ActivityViewsCollectionChange, this));
                this._depViewsCollectionChangeHandler && this._depViewsCollectionChangeHandler.Dispose();
                this.options.DependencyViews && (this._depViewsCollectionChangeHandler = this.options.DependencyViews.CollectionChanged.subscribe(this.DependencyViewsColletionChange, this));
                this.Refresh();
                var d = e(".vsb-actualContent", this.options.GanttChart.$rowsParent).height();
                e(".rq-gc-dependencyControl", this.options.GanttChart.$GanttChart).css("height", d)
            }.bind(this));
            this.options.Data && this.options.Data.CollectionChanged && (this._actViewsCollectionChangeHandler = this.options.Data.CollectionChanged.subscribe(this.ActivityViewsCollectionChange, this));
            this.UpdateVisibility();
            this.Refresh();
            this._depViewsCollectionChangeHandler = this.options.DependencyViews.CollectionChanged.subscribe(this.DependencyViewsColletionChange, this);
            if (e.isFunction(RadiantQ.ContextMenuImpl.ContextMenu) &&
                "FlexyGantt" != this.options.GanttChart.options.GanttType) {
                var c = [{
                    keyName: "Delete",
                    name: window.RadiantQ_Delete,
                    icon: "Delete"
                }, {
                    keyName: "ChangeToFinishToStart",
                    name: window.RadiantQ_ChangeToFinishToStart,
                    icon: "Change to Finish to Start"
                }, {
                    keyName: "ChangeToFinishToFinish",
                    name: window.RadiantQ_ChangetoFinishtoFinish,
                    icon: "Change to Finish to Finish"
                }, {
                    keyName: "ChangeToStartToFinish",
                    name: window.RadiantQ_ChangeToStartToFinish,
                    icon: "Change to Start to Finish"
                }, {
                    keyName: "ChangeToStartToStart",
                    name: window.RadiantQ_ChangeToStartToStart,
                    icon: "Change to Start to Start"
                }],
                    a = new RadiantQ.ContextMenuImpl.ContextMenu("div.DependencyContainer div.rq-gc-dependencyLine, div.rq-gc-dependencyLine-arrow ", ".rq-gc-dependencysParent");
                a.AddNewItems(c);
                a.ItemClicked.subscribe(this.itemClicked, this);
                a.BeforeContextMenu.subscribe(function(b, d) {
                    var c = e(b[0].parentElement).data(),
                        c = (c.GanttDependencyLine || c.radiantqGanttDependencyLine).options.DependencyView.DependencyType_M();
                    this.hideDependencyMenuItem(a.Items.asArray, c)
                }, this);
                this.options.GanttChart.options.Parent.DependencyContextMenu =
                    a
            }
            b = this.getGanttTableParent(b);
            if (this.options.UseChartVirtualization && !1 == this.options.GanttChart.options.IsPrinting) {
                var d = null;
                b.scroll(function() {
                    null != d && clearTimeout(d);
                    d = setTimeout(function() {
                        null != this.options.Data && this.Refresh()
                    }.bind(this), 0)
                }.bind(this))
            }!1 == this.options.GanttChart.options.IsPrinting && this.options.GanttChart.options.Parent.element.bind("Resized", function() {
                setTimeout(function() {
                    this.Refresh()
                }.bind(this), 0)
            }.bind(this))
        },
        hideDependencyMenuItem: function(b, c) {
            for (var a =
                0; a < b.length; a++) b[a].disabled = b[a].keyName == "ChangeTo" + c ? !0 : this.options.GanttChart.options.Parent.options.IsReadOnly || this.options.GanttChart.options.Parent.options.IsDependencyLinesReadOnly ? !0 : !1
        },
        getGanttTableParent: function(b) {
            return e(".ui-grid-body", b.parent())
        },
        itemClicked: function(b, c) {
            var a = e(c[0].parentElement).data(),
                a = a.GanttDependencyLine;
            switch (b) {
                case "Delete":
                    for (var d = 0; d < a.options.Parent.options.DependencyViews.length; d++) {
                        var g = a.options.Parent.options.DependencyViews[d];
                        if (a.options.Parent.options.DependencyViews[d].StartRowIndex_M() ==
                            a.options.DependencyView.StartRowIndex_M() && a.options.Parent.options.DependencyViews[d].EndRowIndex_M() == a.options.DependencyView.EndRowIndex_M()) {
                            var f = a.options.Parent.options.DependencyViews[d].Dependency,
                                h = new RadiantQ.Gantt.Utils.DelayUpdates,
                                f = new RadiantQ.Gantt.DeleteDependencyAction(g.GanttControl.Model, f, !1);
                            g.GanttControl.ActionManager.RecordAction(f);
                            h.Dispose()
                        }
                    }
                    e(a.options.Parent.element).empty();
                    a.options.Parent.Refresh();
                    break;
                case "ChangeToFinishToStart":
                    for (d = 0; d < a.options.Parent.options.DependencyViews.length; d++) a.options.Parent.options.DependencyViews[d].StartRowIndex_M() ==
                        a.options.DependencyView.StartRowIndex_M() && a.options.Parent.options.DependencyViews[d].EndRowIndex_M() == a.options.DependencyView.EndRowIndex_M() && (f = a.options.Parent.options.DependencyViews[d].Dependency, g = a.options.Parent.options.DependencyViews[d].Dependency.Model, g._dependencies.remove(a.options.Parent.options.DependencyViews[d].Dependency), g.CreateNewDependency(f._fromActivity, f._toActivity, "FinishToStart", f._lag));
                    e(a.options.Parent.element).empty();
                    a.options.Parent.Refresh();
                    break;
                case "ChangeToFinishToFinish":
                    for (d =
                        0; d < a.options.Parent.options.DependencyViews.length; d++)
                        if (a.options.Parent.options.DependencyViews[d].StartRowIndex_M() == a.options.DependencyView.StartRowIndex_M() && a.options.Parent.options.DependencyViews[d].EndRowIndex_M() == a.options.DependencyView.EndRowIndex_M()) {
                            f = a.options.Parent.options.DependencyViews[d].Dependency;
                            g = a.options.Parent.options.DependencyViews[d].Dependency.Model;
                            g._dependencies.remove(a.options.Parent.options.DependencyViews[d].Dependency);
                            g.CreateNewDependency(f._fromActivity,
                                f._toActivity, "FinishToFinish", f._lag);
                            break
                        }
                    e(a.options.Parent.element).empty();
                    a.options.Parent.Refresh();
                    break;
                case "ChangeToStartToStart":
                    for (d = 0; d < a.options.Parent.options.DependencyViews.length; d++) a.options.Parent.options.DependencyViews[d].StartRowIndex_M() == a.options.DependencyView.StartRowIndex_M() && a.options.Parent.options.DependencyViews[d].EndRowIndex_M() == a.options.DependencyView.EndRowIndex_M() && (f = a.options.Parent.options.DependencyViews[d].Dependency, g = a.options.Parent.options.DependencyViews[d].Dependency.Model,
                        g._dependencies.remove(a.options.Parent.options.DependencyViews[d].Dependency), g.CreateNewDependency(f._fromActivity, f._toActivity, "StartToStart", f._lag));
                    e(a.options.Parent.element).empty();
                    a.options.Parent.Refresh();
                    break;
                case "ChangeToStartToFinish":
                    for (d = 0; d < a.options.Parent.options.DependencyViews.length; d++) a.options.Parent.options.DependencyViews[d].StartRowIndex_M() == a.options.DependencyView.StartRowIndex_M() && a.options.Parent.options.DependencyViews[d].EndRowIndex_M() == a.options.DependencyView.EndRowIndex_M() &&
                        (f = a.options.Parent.options.DependencyViews[d].Dependency, g = a.options.Parent.options.DependencyViews[d].Dependency.Model, g._dependencies.remove(a.options.Parent.options.DependencyViews[d].Dependency), g.CreateNewDependency(f._fromActivity, f._toActivity, "StartToFinish", f._lag));
                    e(a.options.Parent.element).empty();
                    a.options.Parent.Refresh()
            }
        },
        timer: null,
        DependencyViewsColletionChange: function(b, c) {
            if ("remove" == b.type) {
                var a = this.options.GanttChart.ViewableDependencyViews.indexOf(c.items[0]); - 1 != a && this.options.GanttChart.ViewableDependencyViews.splice(a,
                    1)
            }
            if ("insert" == b.type)
                for (a = 0; a < c.items.length; a++) this.options.GanttChart.ViewableDependencyViews.push(c.items[a]);
            null != this.timer && clearTimeout(this.timer);
            this.timer = setTimeout(function() {
                this.element.empty();
                this.Refresh()
            }.bind(this), 0)
        },
        ActivityViewsCollectionChange: function(b, c) {
            "FlexyGantt" == this.options.GanttChart.options.GanttType && this._onFlatItemsSrcCollectionChanged(b, c);
            null != this.timer && clearTimeout(this.timer);
            this.timer = setTimeout(function() {
                    this.element.empty();
                    this.Refresh()
                }.bind(this),
                0)
        },
        _onFlatItemsSrcCollectionChanged: function(b, c) {
            var a = this.options.GanttChart;
            "insert" != b.type && "remove" != b.type || a.DependencyViews.UpdateList()
        },
        UpdateVisibility: function() {
            var b = this.options;
            this.Visibility = b.ToggleVisibilityForVirtualizationSetting ? b.UseChartVirtualization ? "Collapsed" : "Visible" : b.UseChartVirtualization ? "Visible" : "Collapsed"
        },
        _refreshTimer: null,
        Refresh: function() {
            null != this._refreshTimer && clearTimeout(this._refreshTimer);
            this._refreshTimer = setTimeout(function() {
                this.element.empty();
                var b = this.options;
                "FlexyGantt" == b.GanttChart.options.GanttType && this.UpdateViewableDependencyViewsForFG(b.GanttChart);
                b = b.GanttChart.ViewableDependencyViews || [];
                if (0 != b.length)
                    for (var c = 0; c < b.length; c++)
                        if (b[c].Visibility_M()) {
                            var a = e("<div class='DependencyContainer' style='position:absolute;'></div>");
                            this.createGanttDependencyLine(a, b, c);
                            a.children(":not(#depArrow)");
                            a.hover(function() {
                                e(this).children().addClass("dependencyShadow")
                            });
                            a.mouseleave(function() {
                                e(this).children().removeClass("dependencyShadow")
                            });
                            this.element.append(a)
                        }
            }.bind(this), 0)
        },
        UpdateViewableDependencyViewsForFG: function(b) {
            b.ViewableDependencyViews = [];
            if (b.RenderedRows)
                for (var c = {}, a = 0; a < b.RenderedRows.length; a++) {
                    var d = b.DependencyViews._dependencyViewsByRowId[b.RenderedRows[a]._guid];
                    if (d)
                        for (var e = 0; e < d.length; e++) {
                            var f = d[e];
                            c[f._guid] || (c[f._guid] = f, b.ViewableDependencyViews.push(f))
                        }
                }
        },
        createGanttDependencyLine: function(b, c, a) {
            b[this.getChildWidgetName("GanttDependencyLine")]({
                DependencyView: c[a],
                Visibility: "Visible",
                IsTemplateApplied: !0,
                GanttChart: this.options.GanttChart,
                StartTime: c[a].StartTime_M(),
                EndTime: c[a].EndTime_M(),
                Parent: this
            })
        },
        _setOption: function(b, c) {
            this.widgetBaseSetOption.apply(this, arguments);
            "DependencyViews" == b && (this._depViewsCollectionChangeHandler && this._depViewsCollectionChangeHandler.Dispose(), this.options.DependencyViews && (this._depViewsCollectionChangeHandler = this.options.DependencyViews.CollectionChanged.subscribe(this.DependencyViewsColletionChange, this)), this.element.empty(), this.Refresh())
        },
        _destroy: function() {
            this._actViewsCollectionChangeHandler &&
                (this._actViewsCollectionChangeHandler.Dispose(), this._actViewsCollectionChangeHandler = null);
            this._depViewsCollectionChangeHandler && (this._depViewsCollectionChangeHandler.Dispose(), this._depViewsCollectionChangeHandler = null);
            this.StartTimeBinding && this.StartTimeBinding.Dispose();
            this.EndTimeBinding && this.EndTimeBinding.Dispose();
            var b = this.eventNamespace;
            e.observable(this.options.Data).unbind(b);
            this.element.parents("div.rq-ganttChart").unbind("ganttchartrefreshui.DependenciesRefreshUI");
            this.element.empty()
        }
    }
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.GanttDependencyLine = {
        options: {
            name: "GanttDependencyLine",
            DependencyLineBarStroke: null,
            CustomColor: null,
            StartTime: null,
            EndTime: null,
            RowHeight: null,
            Visibility: null,
            PolylineGeometry: null,
            ArrowGeometry: null,
            HighlightEffect: null,
            IsTemplateApplied: null,
            DependencyView: null,
            GanttChart: null,
            DependencyTooltipTemplate: null,
            VirtualizationHeightOffset: null,
            Parent: null
        },
        _depStartTime: null,
        _isEndFixedShape: null,
        _isStartFixedShape: null,
        DepStartTime: function(b) {
            if (void 0 == b) return this._depStartTime;
            b != this._depStartTime ? (this._depStartTime = b, this.OnPropertyChanged("StartTime", b), this.element.empty(), !1 == this.IsInit && this.OnRecomputeLocation(this.element)) : this._fixedShapeChanged()
        },
        _depEndTime: null,
        DepEndTime: function(b) {
            if (void 0 == b) return this._depEndTime;
            b != this._depEndTime ? (this._depEndTime = b, this.OnPropertyChanged("EndTime", b), this.element.empty(), !1 == this.IsInit && this.OnRecomputeLocation(this.element)) : this._fixedShapeChanged()
        },
        _fixedShapeChanged: function() {
            var b = this.options.DependencyView,
                c = b.IsEndFixedShape_M(),
                b = b.IsStartFixedShape_M();
            this._isEndFixedShape != c && this._isStartFixedShape != b && (this.element.empty(), !1 == this.IsInit && this.OnRecomputeLocation(this.element))
        },
        _create: function() {
            this.IsInit = this._onInit = !0;
            var b = this.options;
            this.PropertyChanged = new ObjectEvent("PropertyChanged");
            this.element.data("GanttDependencyLine", this);
            this.StartTimeBinding && this.StartTimeBinding.Dispose();
            this.EndTimeBinding && this.EndTimeBinding.Dispose();
            this.StartTimeBinding = new Binding(b.DependencyView,
                "StartTime", this, "DepStartTime", null, RadiantQ.Gantt.BindingMode.TwoWay);
            this.EndTimeBinding = new Binding(b.DependencyView, "EndTime", this, "DepEndTime", null, RadiantQ.Gantt.BindingMode.TwoWay);
            null == b.VirtualizationHeightOffset && (b.VirtualizationHeightOffset = 0);
            this._depViewPropChangedHandler && this._depViewPropChangedHandler.Dispose();
            this._depViewPropChangedHandler = b.DependencyView.PropertyChanged.subscribe(this.DependencyViewPropertyChange, this);
            this.IsInit && (this.IsInit = !1, this.OnRecomputeLocation(this.element));
            this._depRecomputeTimer = null;
            this._onInit = !1
        },
        OnPropertyChanged: function(b, c) {
            this.PropertyChanged.raise(this, {
                PropertyName: b,
                value: c
            })
        },
        timer: null,
        DependencyViewPropertyChange: function(b, c) {
            "Visibility" == c.PropertyName && (this.options.Visibility = !0 == c.value ? "visible" : "collapse", null != this.timer && clearTimeout(this.timer), this.timer = setTimeout(function() {
                this.element.empty();
                this.OnRecomputeLocation(this.element)
            }.bind(this), 0))
        },
        CreateTooltip: function(b, c) {
            c.attr("title", "");
            var a = this,
                d = e(document);
            c.tooltip({
                content: function(b) {
                    var DependencyTooltipTemplate = a.options.DependencyView.GanttControl.options.DependencyTooltipTemplate;
                    if (typeof DependencyTooltipTemplate === "function")
                        return DependencyTooltipTemplate(a)
                    else
                        return "<b>" + window.RadiantQ_TaskLinkString + ":</b> " + window["RadiantQ_" + a.options.DependencyView.DependencyType_M()] + " <b>" + window.RadiantQ_LagString + ":</b> " + a.options.DependencyView.Dependency.Lag_M().toString() + "<br/><b>" + window.RadiantQ_FromString + ": &nbsp;</b><b>(ID " + a.options.DependencyView.StartActivity.id + ")</b> " + a.options.DependencyView.StartActivity.ActivityName_M() + "<br/><b>" + window.RadiantQ_ToXString + ":  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b><b>(ID " + a.options.DependencyView.EndActivity.id +
                            ")</b> " + a.options.DependencyView.EndActivity.ActivityName_M() + "";
                },
                open: function(a, b) {
                    document.mouseButtonPressed && b.tooltip.remove();
                    b.tooltip.addClass("dependencyLineTooltip");
                    d.bind("mousedown.divEvents mouseup.divEvents", function() {
                        b.tooltip.remove();
                        d.unbind(".divEvents")
                    })
                },
                close: function() {
                    d.unbind(".divEvents")
                },
                position: {
                    my: "left top+15",
                    at: "top",
                    offset: "10"
                },
                track: !0
            });
            e(c).bind("mousedown.tooltipHandler blur.tooltipHandler", function() {
                if (this) {
                    var a = "#" + e(this).attr("aria-describedby");
                    e(a).remove();
                    e(this).removeAttr("aria-describedby")
                }
            })
        },
        _depRecomputeTimer: null,
        OnRecomputeLocation: function(b) {
            b = this.options;
            var c = b.DependencyView,
                a = b.GanttChart.options,
                d = this._depStartTime,
                e = this._depEndTime,
                f = !1;
            "FlexyGantt" == a.GanttType && (f = !0);
            !1 == f && !0 == b.DependencyView.EndActivity._isMilestone && (this.isMilestone = !0);
            if (!(null == c || "collapse" == b.Visibility || !1 == b.IsTemplateApplied || null == d || null == e || a.ComputedStartTime == a.ComputedEndTime || -1 == c.StartRowIndex_M() && -1 == c.EndRowIndex_M() || !1 ==
                f && c.StartRowIndex_M() == c.EndRowIndex_M())) {
                var h;
                this.options.GanttChart.options.OnDependencyLineLoad && (h = this.options.GanttChart.options.OnDependencyLineLoad);
                if (f) - 1 != c.StartRowIndex_M() && -1 != c.EndRowIndex_M() && (this._onInit ? (this._drawRelatedDepLine(!0), null != h && "function" == typeof h && h.call(this.element, this)) : (null != this._depRecomputeTimer && clearTimeout(this._depRecomputeTimer), this._depRecomputeTimer = setTimeout(function() {
                    this._drawRelatedDepLine(!0);
                    this._depRecomputeTimer = null;
                    null != h && "function" ==
                        typeof h && h.call(this.element, this)
                }.bind(this), 0)));
                else {
                    var k = c.ActivityViewsCollection._dictActivityVsView[c.StartActivity.ID_M()],
                        n = c.ActivityViewsCollection._dictActivityVsView[c.EndActivity.ID_M()];
                    k && n && (this._onInit ? (c = k.ChartRow(), b = null == c ? -1 : c[0].rowIndex, c = n.ChartRow(), c = null == c ? -1 : c[0].rowIndex, -1 == b && -1 == c || this._drawRelatedDepLine(!1), null != h && "function" == typeof h && h.call(this.element, this)) : (null != this._depRecomputeTimer && clearTimeout(this._depRecomputeTimer), this._depRecomputeTimer =
                        setTimeout(function() {
                            var a = k.ChartRow(),
                                b = null == a ? -1 : a[0].rowIndex,
                                a = n.ChartRow(),
                                a = null == a ? -1 : a[0].rowIndex; - 1 == b && -1 == a || this._drawRelatedDepLine(!1);
                            this._depRecomputeTimer = null;
                            null != h && "function" == typeof h && h.call(this.element, this)
                        }.bind(this), 0)))
                }
            }
        },
        _getAdjustedStartPoint: function(b, c, a) {
            b = {
                X: b,
                Y: c
            };
            switch (a) {
                default: b.X -= 20;
                break;
                case RadiantQ.Gantt.DependencyType.StartToStart:
                    b.X -= 20;
                    break;
                case RadiantQ.Gantt.DependencyType.FinishToFinish:
                    b.X += 20;
                    break;
                case RadiantQ.Gantt.DependencyType.StartToFinish:
                    b.X +=
                        20
            }
            return b
        },
        _getAdjustedEndPoint: function(b, c, a) {
            b = {
                X: b,
                Y: c
            };
            switch (a) {
                default: b.X += 20;
                break;
                case RadiantQ.Gantt.DependencyType.StartToStart:
                    b.X -= 20;
                    break;
                case RadiantQ.Gantt.DependencyType.FinishToFinish:
                    b.X += 20;
                    break;
                case RadiantQ.Gantt.DependencyType.StartToFinish:
                    b.X -= 20
            }
            return b
        },
        isMilestone: !1,
        _drawRelatedDepLine: function(b) {
            var c = this.options,
                a = c.DependencyView,
                d = c.GanttChart,
                g = d.options,
                f = g.RowHeight,
                h = this.element,
                k = this._depStartTime,
                n = this._depEndTime,
                l = a.StartRowIndex_M(),
                m = a.EndRowIndex_M(),
                p;
            null != g.DependencyLineColor && (p = g.DependencyLineColor);
            var g = a.DependencyType_M(),
                q = a.GetStartItemScheduleToPlotWith(c.GanttChart.options.WorkTimeSchedule),
                s = a.GetEndItemScheduleToPlotWith(c.GanttChart.options.WorkTimeSchedule),
                r = d.GetBTSTToRenderAgainst(),
                t = d.GetBTUWToRenderAgainst(),
                k = d.ConvertTimeToXFor(k, r, t, q),
                c = l * f + f / 2 + c.VirtualizationHeightOffset,
                d = d.ConvertTimeToXFor(n, r, t, s),
                n = c + (m - l) * f; - 1 == l ? (s = this._getAdjustedStartPoint(d, n, g), k = s.X, c = s.Y) : -1 == m && (s = this._getAdjustedEndPoint(k, c, g),
                    d = s.X, n = s.Y);
            b || (a.StartItemXPosAdjustment_M && (k += a.StartItemXPosAdjustment_M()), g != RadiantQ.Gantt.DependencyType.FinishToStart && a.EndItemXPosAdjustment_M && (d += a.EndItemXPosAdjustment_M()));
            s = {
                Start: {
                    X: k,
                    Y: c
                },
                End: {
                    X: d,
                    Y: n
                }
            };
            r = a.StartItemPosAdjustment_M ? a.StartItemPosAdjustment_M() : a.StartItemPosAdjustment;
            t = a.EndItemPosAdjustment_M ? a.EndItemPosAdjustment_M() : a.EndItemPosAdjustment;
            r && ("function" == typeof r ? r.call(a, s, g, "Start") : "object" == typeof r && (s.Start.X += r.X || 0, s.Start.Y += r.Y || 0), k = s.Start.X,
                c = s.Start.Y);
            t && ("function" == typeof t ? t.call(a, s, g, "End") : "object" == typeof t && (s.End.X += t.X || 0, s.End.Y += t.Y || 0), d = s.End.X, n = s.End.Y);
            switch (g) {
                default: this._drawFinishToStart(k, c, d, n, l, m, p, f, f, b, a);
                break;
                case RadiantQ.Gantt.DependencyType.StartToStart:
                    this._drawStartToStart(k, c, d, n, l, m, p);
                    break;
                case RadiantQ.Gantt.DependencyType.FinishToFinish:
                    this._drawFinishToFinish(k, c, d, n, l, m, p);
                    break;
                case RadiantQ.Gantt.DependencyType.StartToFinish:
                    this._drawStartToFinish(k, c, d, n, l, m, p, f, f)
            }
            a = e(".rq-gc-dependency",
                h);
            b || this.CreateTooltip(this, a)
        },
        _drawFinishToStart: function(b, c, a, d, e, f, h, k, n, l, m) {
            c = {
                X: b,
                Y: c
            };
            e = {
                X: a,
                Y: d
            };
            f = this.element;
            l = [];
            l.push({
                X: c.X,
                Y: c.Y
            });
            e.Y > c.Y ? e.Y -= n / 2 : e.Y < c.Y && (e.Y += n / 2);
            e.Y != c.Y ? (!1 == m.IsEndFixedShape_M() && (e.X += 7), a >= b - 7 && a <= b + 7 && m.IsEndFixedShape_M() ? (l.push({
                X: c.X + 15,
                Y: c.Y
            }), l.push({
                X: c.X + 15,
                Y: c.Y + 10
            }), l.push({
                X: e.X,
                Y: c.Y + 10
            })) : e.X < c.X - 7 ? this._insertPointsToGoAroundBarForFS(l, c, e, k, n) : l.push({
                X: e.X,
                Y: c.Y
            })) : e.X < c.X && this._insertPointsToGoAroundBarForFS(l, c, e, k, n);
            d == l[l.length -
                1].Y && a == l[l.length - 1].X || l.push({
                X: e.X,
                Y: e.Y
            });
            f.css({
                "margin-left": c.X,
                "margin-top": c.Y + "px"
            });
            this._drawDeplinesFromPts(l, f, c.X, c.Y, e.X, e.Y, h, RadiantQ.Gantt.DependencyType.FinishToStart)
        },
        _drawStartToStart: function(b, c, a, d, e, f, h) {
            e = this.element;
            f = [];
            f.push({
                X: b,
                Y: c
            });
            d != c && (a < b ? (f.push({
                X: a - 10,
                Y: c
            }), f.push({
                X: a - 10,
                Y: d
            })) : (f.push({
                X: b - 10,
                Y: c
            }), f.push({
                X: b - 10,
                Y: d
            })));
            f.push({
                X: a,
                Y: d
            });
            e.css({
                "margin-left": b,
                "margin-top": c + "px"
            });
            this._drawDeplinesFromPts(f, e, b, c, a, d, h, RadiantQ.Gantt.DependencyType.StartToStart)
        },
        _drawFinishToFinish: function(b, c, a, d, e, f, h) {
            e = this.element;
            f = [];
            f.push({
                X: b,
                Y: c
            });
            d != c && (a < b ? (f.push({
                X: b + 20,
                Y: c
            }), f.push({
                X: b + 20,
                Y: d
            })) : (f.push({
                X: a + 20,
                Y: c
            }), f.push({
                X: a + 20,
                Y: d
            })));
            f.push({
                X: a + 3,
                Y: d
            });
            e.css({
                "margin-left": b,
                "margin-top": c + "px"
            });
            this._drawDeplinesFromPts(f, e, b, c, a, d, h, RadiantQ.Gantt.DependencyType.FinishToFinish)
        },
        _drawStartToFinish: function(b, c, a, d, e, f, h, k, n) {
            e = this.element;
            f = [];
            f.push({
                X: b,
                Y: c
            });
            d != c ? a <= b ? (f.push({
                X: a,
                Y: c
            }), f.push({
                X: a,
                Y: d > c ? d - n / 2 : d + n / 2
            })) : (f.push({
                    X: b - 10,
                    Y: c
                }),
                f.push({
                    X: b - 10,
                    Y: c + k / 2
                }), f.push({
                    X: a + 10,
                    Y: c + k / 2
                }), f.push({
                    X: a + 10,
                    Y: d
                }), f.push({
                    X: a + 3,
                    Y: d
                })) : f.push({
                X: a,
                Y: d
            });
            e.css({
                "margin-left": b,
                "margin-top": c + "px"
            });
            this._drawDeplinesFromPts(f, e, b, c, a, d, h, RadiantQ.Gantt.DependencyType.StartToFinish, n)
        },
        _drawDeplinesFromPts: function(b, c, a, d, g, f, h, k, n) {
            for (var l = "<div class='rq-gc-dependency rq-gc-dependencyLine " + window.radiantQclasses.defaultClass + "' style='background-color:" + h + " !important;'></div>", m = 0; m < b.length; m++) {
                var p = b[m];
                if (m == b.length - 1) this._drawDepArrow(c,
                    a, d, g, f, h, k, b[m - 1].X, n);
                else {
                    var q = b[m + 1],
                        s = Math.abs(p.X - q.X) || 1,
                        r = Math.abs(p.Y - q.Y) || 1,
                        t = Math.min(p.X, q.X) - a,
                        x = Math.min(p.Y, q.Y) - d;
                    p.X == q.X && (r += 1);
                    p = e(l).css({
                        "margin-left": t,
                        "margin-top": x,
                        width: s,
                        height: r
                    });
                    c.append(p)
                }
            }
        },
        _drawDepArrow: function(b, c, a, d, g, f, h, k, n) {
            var l = e("<div id='depArrow' class='rq-gc-dependency rq-gc-dependencyLine-arrow " + window.radiantQclasses.defaultClass + "'></div> "),
                m = g - a,
                p = d - 4 - c;
            switch (h) {
                default: a == g ? (m -= 5, k < d ? (p -= 1, l.addClass("rq-gc-dependencyLine-arrow-right")) : (p +=
                    6, l.addClass("rq-gc-dependencyLine-arrow-left"))) : a > g ? (m -= 5, k < d ? l.addClass("rq-gc-dependencyLine-arrow-right") : l.addClass("rq-gc-dependencyLine-arrow-up")) : (m -= 4, !0 == this.isMilestone && -4 <= p && 3 >= p && (m += 4), g > a && (k < d ? l.addClass("rq-gc-dependencyLine-arrow-right") : l.addClass("rq-gc-dependencyLine-arrow-down")));
                break;
                case RadiantQ.Gantt.DependencyType.StartToStart:
                    m -= 5;
                    d < c && a == g ? (p += 5, l.addClass("rq-gc-dependencyLine-arrow-left")) : l.addClass("rq-gc-dependencyLine-arrow-right");
                    break;
                case RadiantQ.Gantt.DependencyType.FinishToFinish:
                    c <
                        d && a == g ? (p -= 1, l.addClass("rq-gc-dependencyLine-arrow-right")) : (p += 4, l.addClass("rq-gc-dependencyLine-arrow-left"));
                    m -= 5;
                    break;
                case RadiantQ.Gantt.DependencyType.StartToFinish:
                    a == g ? c < d ? (p -= 1, m -= 5, l.addClass("rq-gc-dependencyLine-arrow-right")) : (p += 4, m -= 5, l.addClass("rq-gc-dependencyLine-arrow-left")) : c < d ? (p += 4, m -= 5, l.addClass("rq-gc-dependencyLine-arrow-left")) : a > g ? (m += n / 2 - 5, l.addClass("rq-gc-dependencyLine-arrow-up")) : (m -= n / 2, l.addClass("rq-gc-dependencyLine-arrow-down"))
            }
            null != f && void 0 != f && (l.hasClass("rq-gc-dependencyLine-arrow-up") ?
                l[0].style.setProperty("border-bottom-color", f, "important") : l.hasClass("rq-gc-dependencyLine-arrow-down") ? l[0].style.setProperty("border-top-color", f, "important") : l.hasClass("rq-gc-dependencyLine-arrow-left") && l[0].style.setProperty("border-right-color", f, "important"), l.hasClass("rq-gc-dependencyLine-arrow-right") && l[0].style.setProperty("border-left-color", f, "important"));
            l.css({
                "margin-left": p,
                "margin-top": m
            });
            b.append(l)
        },
        _insertPointsToGoAroundBarForFS: function(b, c, a, d, e) {
            a.Y == c.Y ? (b.push({
                X: c.X +
                    5,
                Y: c.Y
            }), b.push({
                X: c.X + 5,
                Y: c.Y + d / 2
            }), b.push({
                X: a.X - 9,
                Y: c.Y + d / 2
            }), b.push({
                X: a.X - 9,
                Y: a.Y
            })) : a.Y < c.Y ? (a.X -= 8, a.Y -= e / 2, b.push({
                X: c.X + 5,
                Y: c.Y
            }), b.push({
                X: c.X + 5,
                Y: c.Y - d / 2
            }), b.push({
                X: a.X - 9,
                Y: c.Y - d / 2
            }), b.push({
                X: a.X - 9,
                Y: a.Y
            })) : a.Y > c.Y && (a.X -= 8, a.Y += e / 2, b.push({
                X: c.X + 5,
                Y: c.Y
            }), b.push({
                X: c.X + 5,
                Y: c.Y + d / 2
            }), b.push({
                X: a.X - 9,
                Y: c.Y + d / 2
            }), b.push({
                X: a.X - 9,
                Y: a.Y
            }))
        },
        _destroy: function() {
            this.StartTimeBinding && this.StartTimeBinding.Dispose();
            this.EndTimeBinding && this.EndTimeBinding.Dispose();
            this._depViewPropChangedHandler &&
                this._depViewPropChangedHandler.Dispose();
            e(".rq-gc-dependency", this.element).unbind(".tooltipHandler");
            this.element.data("GanttDependencyLine", null)
        }
    }
})(jQuery);
(function(e, b) {
    function c() {
        this._cachedRowCont = b("<div id='cache'></div>");
        this._cachedRows = {}
    }

    function a(a) {
        if (a = g[a.eventNamespace]) a._cachedRowCont.empty(), a._cachedRows = {}
    }
    var d = RadiantQ.Gantt.DefaultStyles,
        g = {};
    e.GanttRows = {
        currentUniqueRowSuffix: 0,
        options: {
            name: "GanttRows",
            Data: null,
            ParentTasksListProperty: null,
            TasksListProperty: null,
            Expand: null,
            TaskTemplate: null,
            OverlappedTasksRenderingOptimization: null,
            ParentTaskTemplate: null,
            TaskStartTime: null,
            ParentTaskStartTime: null,
            TaskEndTime: null,
            ParentTaskEndTime: null,
            GanttChart: null,
            RowHeight: null,
            TaskBarHeight: null,
            KnockoutObjectName: null,
            ViewWidth: null,
            TaskTooltipTemplate: null,
            ResizeInfoPopup: null,
            MovingInfoPopup: null,
            FlexyGantt: null,
            TimeIndicatorLineOption: null,
            UseChartVirtualization: !1,
            EnableAlternativeRowBackground: null,
            TaskBarBrowseToCueLeftTemplate: null,
            TaskBarBrowseToCueRightTemplate: null,
            IsPrinting: !1,
            EnableAutoAdjustForSchedule: !0,
            CanDrawDependency: !1,
            ConnectingInfoPopup: null,
            MinimumWidthForParentBar: 1
        },
        cachedTaskListControlInstance: [],
        CreateTaskListControl: function(a,
            b, d) {
            a[this.getChildWidgetName("TasksListControl")]({
                Data: b,
                ParentTasksListProperty: this.options.ParentTasksListProperty,
                TasksListProperty: this.options.TasksListProperty,
                TaskTemplate: this.options.TaskTemplate,
                ParentTaskTemplate: this.options.ParentTaskTemplate,
                OverlappedTasksRenderingOptimization: this.options.OverlappedTasksRenderingOptimization,
                TaskStartTime: this.options.TaskStartTime,
                ParentTaskStartTime: this.options.ParentTaskStartTime,
                TaskEndTime: this.options.TaskEndTime,
                ParentTaskEndTime: this.options.ParentTaskEndTime,
                RowCount: this.currentUniqueRowSuffix,
                GanttChart: this.options.GanttChart,
                Parent: this,
                KnockoutObjectName: this.options.KnockoutObjectName,
                TaskTooltipTemplate: this.options.TaskTooltipTemplate,
                ResizeInfoPopup: this.options.ResizeInfoPopup,
                MovingInfoPopup: this.options.MovingInfoPopup,
                TaskBarHeight: this.options.TaskBarHeight,
                FlexyGantt: this.options.FlexyGantt,
                UseChartVirtualization: this.options.UseChartVirtualization,
                TaskBarBrowseToCueLeftTemplate: this.options.TaskBarBrowseToCueLeftTemplate,
                TaskBarBrowseToCueRightTemplate: this.options.TaskBarBrowseToCueRightTemplate,
                IsPrinting: this.options.IsPrinting,
                TimeIndicatorLineOption: this.options.TimeIndicatorLineOption,
                UseRQModelBinder: this.UseRQModelBinder,
                EnableAutoAdjustForSchedule: this.options.EnableAutoAdjustForSchedule,
                CanDrawDependency: this.options.CanDrawDependency,
                ConnectingInfoPopup: this.options.ConnectingInfoPopup,
                MinimumWidthForParentBar: this.options.MinimumWidthForParentBar
            });
            this.options.GanttChart.LoadingRow({
                Row: d,
                Data: b
            })
        },
        $tableBody: null,
        getGanttTableParent: function(a) {
            return b(".ui-grid-body", a.parent())
        },
        VSB: null,
        _vsbScrollHandler: null,
        UseRQModelBinder: !1,
        _create: function() {
            d.init();
            var e = this;
            this.itemHeight = this.options.RowHeight;
            this.SCROLLBAR_MIN_SIZE = 10;
            this.VirtualizationID = 0;
            this.totalItems = [];
            this.listItems = [];
            var h = /data-bind/g;
            null != this.options.TaskTemplate && (this.UseRQModelBinder = h.test(this.options.TaskTemplate) && null == this.options.KnockoutObjectName);
            g[this.eventNamespace] = new c;
            this.$chartTableBody = b("<tbody></tbody>");
            var k = this.table = b("<table class='chartRowsContainer rq-gc-rowsParent-table' style='overflow:hidden;'></table").append(this.$chartTableBody);
            k[0].style.cssText = d.ZeroStyle;
            k[0].style.height = "auto";
            var n = eval(this.options.KnockoutObjectName),
                h = this.options.GanttChart,
                l = h.element,
                h = h.$rowsParent;
            this.$tableBody = this.getGanttTableParent(l);
            var m = h.height();
            this.$Area = b(".rq-gc-chartArea-div", l);
            this.VSB = new RadiantQ.Gantt.VerticalScrollBar(k, h, this.options.Data, this.options.RowHeight, this.options.FlexyGantt, !0);
            this.options.GanttChart.VSB = this.VSB;
            this.bindDataCollectionChanged = function() {
                e.options.Data && e.options.Data.CollectionChanged.subscribe(function(a,
                    b) {
                    "insert" == a.type && e.InsertRow(e.element, b, k, e.options.ViewWidth);
                    "remove" == a.type && e.RemoveRow(b, k);
                    n && e.applayBindings(n, e.element[0]);
                    var d = e.options.GanttChart;
                    d.syncVerticalScrollBar && d.syncVerticalScrollBar()
                })
            };
            this.bindDataCollectionChanged();
            this.element.append(k);
            null != e.options.Data && e.Refresh(e.element, e.options.Data, k, e.options.ViewWidth, m);
            e._vsbScrollHandler = e.VSB.OnScroll.subscribe(function(a, d, c) {
                a = e.VSB.$scrollContainer.scrollTop();
                b("div.rq-gc-dependencysParent", e.$Area).scrollTop(a);
                e.options.UseChartVirtualization && e.Refresh(e.element, e.options.Data, k, e.options.ViewWidth, m)
            });
            b(l).bind("ganttchartsourceupdated", function(d, c) {
                b.extend(this.options, c.options);
                this.options.Data = c.options.FlatItemsSource;
                this.options.ParentTaskTemplate = c.options.ParentTaskItemTemplate;
                this.options.TaskTemplate = c.options.TaskItemTemplate;
                this.VirtualizationID = 0;
                this.totalItems = [];
                this.listItems = [];
                this._unBindEventsToRefresh();
                a(this);
                this.bindDataCollectionChanged();
                this.renderBars(c);
                this._updateTimeIndicatorLine();
                var e = this.options.GanttChart;
                e.syncVerticalScrollBar && e.syncVerticalScrollBar()
            }.bind(this));
            b(l).bind("ganttchartrefreshui.RowsRefreshUI", function(b, d) {
                !0 == e.options.GanttChart.options.ResizeToFit && (width = e.options.GanttChart.element.width(), e.$chartTableBody.width(width));
                !0 == d.ForceToReDrawRows && (a(this), e.renderBars(d))
            }.bind(this));
            b(window).resize(function() {
                m = b(".rq-gc-chartArea-div", l).height();
                e.options.UseChartVirtualization && (null != e.options.Data && e.Refresh(e.element, e.options.Data, k,
                    e.options.ViewWidth, m), e._enableAlternativeRowBackground())
            });
            this.renderBars = function(a) {
                this.$chartTableBody.empty();
                null != a.options.FlatItemsSource && e.Refresh(e.element, a.options.FlatItemsSource, k, a.options.ViewWidth, m);
                e.knockoutObjectName && e.applayBindings(e.knockoutObjectName, e.element[0]);
                this._enableAlternativeRowBackground()
            };
            this.element.data("GanttRows", this);
            this._updateTimeIndicatorLine();
            this._updateContextMenus()
        },
        applayBindings: function(a, b) {
            ko.applyBindingsToDescendants(a, b)
        },
        _enableAlternativeRowBackground: function() {
            if (!1 !=
                this.options.EnableAlternativeRowBackground) {
                var a = this,
                    d = this.table.find("td");
                if (0 != d.length) {
                    var c = d[0].parentElement["data-grid-item"]._displayIndex;
                    d.removeClass("rq-grid-alternative-background");
                    d.addClass(function() {
                        b(this);
                        var d = !1;
                        a.options.IsPrinting ? d = 0 != this.parentElement.rowIndex % 2 : (d = 0 != c % 2, c++);
                        if (!0 == d) return "rq-grid-alternative-background"
                    })
                }
            }
        },
        getGanttTableHeight: function() {
            return b("div.grid-body-actualContent", this.$tableBody).height()
        },
        guid: function() {
            var a = "",
                b, d;
            for (b = 0; 32 >
                b; b++) {
                d = 16 * Math.random() | 0;
                if (8 == b || 12 == b || 16 == b || 20 == b) a += "-";
                a += (12 == b ? 4 : 16 == b ? d & 3 | 8 : d).toString(16)
            }
            return a
        },
        Refresh: function(a, d, c, e, l) {
            var m = this.options.GanttChart;
            this.cachedTaskListControlInstance = [];
            m.RenderedRows = [];
            var p = this;
            this.VSB.CreateRow = function(a, f) {
                void 0 == f.uid && (f.uid = p.guid());
                var g = null;
                if (p.options.UseChartVirtualization) g = p.getItemAtIndex(a, d, e), g[0]["data-grid-item"] = f, p.totalItems.push(g), l = b("td", g), !1 == p.options.IsPrinting && !1 == f.IsSelected() && g.hasClass("rq-row-selected") &&
                    g.removeClass("rq-row-selected " + window.radiantQclasses.selectionClass), p.options.TimeIndicatorLineOption && p.cachedTaskListControlInstance.push(l.data("TasksListControl")), p.cleanupListItems(!0);
                else {
                    var g = f.RowHeight || p.options.RowHeight,
                        g = b("<tr class='rq-grid-row' data-uid =" + f.uid + " style='height:" + g + "px;width:100%' > <td id='ChartRow' class='FlexyChartRow rq-fg-gc-row' style='height:" + (g - 1) + "px;width:100%;border-top-width: 0;border-right-width: 0;'> </td> </tr>"),
                        l = g.find("td");
                    l[0].DataContext =
                        f;
                    g[0]["data-grid-item"] = d[a];
                    p.CreateTaskListControl(l, f, g);
                    p.currentUniqueRowSuffix++;
                    !1 == p.options.IsPrinting && f.IsSelected() && g.addClass("rq-row-selected " + window.radiantQclasses.selectionClass);
                    p.options.TimeIndicatorLineOption && p.cachedTaskListControlInstance.push(l.data("TasksListControl"))
                }
                c.css("height", "auto");
                !1 == p.options.IsPrinting && m.RenderedRows.push(f);
                return g
            };
            p.options.UseChartVirtualization && (a = g[this.eventNamespace], l = b("tr", this.element), a._cachedRowCont.append(l));
            this.VSB.Refresh(d,
                this.options.UseChartVirtualization);
            c.width(e);
            this.options.KnockoutObjectName && (a = eval(this.options.KnockoutObjectName), this.applayBindings(a, this.element[0]));
            this._enableAlternativeRowBackground()
        },
        _updateTimeIndicatorLine: function() {
            if (this.options.TimeIndicatorLineOption)
                for (var a = 0; a < this.cachedTaskListControlInstance.length; a++) this.cachedTaskListControlInstance[a].refreshVerticalLine()
        },
        _updateContextMenus: function() {
            var a = this.options.GanttChart;
            if (b.isFunction(RadiantQ.ContextMenuImpl.ContextMenu)) {
                var d =
                    "#" + a.$GanttChart[0].id,
                    c = d + " .rq-gc-taskbar, " + d + " .taskbar-style, " + d + " .taskbar",
                    e = a.$GanttChart.parent(),
                    c = new RadiantQ.ContextMenuImpl.ContextMenu(c, e),
                    d = new RadiantQ.ContextMenuImpl.ContextMenu(d + " .rq-fg-gc-row", e.parent());
                a.options.Parent.TaskContextMenu = c;
                a.options.Parent.RowContextMenu = d
            }
        },
        getItemAtIndex: function(a, d, c) {
            if (0 <= a && a < this.options.Data.length) {
                var e = this.options.Data[a],
                    l, m = a.toString(),
                    p = g[this.eventNamespace];
                if (void 0 != p._cachedRows[e._guid]) l = p._cachedRows[e._guid];
                else {
                    l =
                        b("<tr class='rq-grid-row' data-uid =" + d[a].uid + " style='height:" + this.options.RowHeight + "px;width:100%' > <td name=" + d[a]._data.TName + " class='FlexyChartRow rq-fg-gc-row' style='height:" + this.options.RowHeight + "px;width:100%;border-top-width: 0; border-right-width: 0;'> </td> </tr>");
                    var q = l.find("td");
                    q.width(c);
                    q[0].DataContext = d[a];
                    this.CreateTaskListControl(q, d[a], l);
                    l[0]["data-grid-item"] = d[a];
                    this.currentUniqueRowSuffix++;
                    !1 == this.options.IsPrinting && d[a].IsSelected() && l.addClass("rq-row-selected " +
                        window.radiantQclasses.selectionClass);
                    if (null === this.listItems[m] || void 0 === this.listItems[m]) this.listItems[m] = l;
                    p._cachedRows[e._guid] = l
                }
                l.attr("list-index", a);
                return l
            }
        },
        cleanupListItems: function(a) {
            var b, d = [];
            if (this.processedItems)
                for (b in this.processedItems) d.push(this.processedItems[b]);
            this.totalItems = d;
            !0 !== a && this.ScrollBar.fadeTo(300, 0)
        },
        InsertRow: function(a, d, c, e) {
            for (a = 0; a < d.items.length; a++) {
                var g = null,
                    m = d.items[a];
                void 0 == m.uid && (m.uid = this.guid());
                var g = b("<tr class='rq-grid-row' data-uid=" +
                    m.uid + " style='height:" + (m.RowHeight || this.options.RowHeight) + "px;width:100%' > <td class='FlexyChartRow rq-fg-gc-row' style='height:" + (this.options.RowHeight - 1) + "px;width:100%;border-top-width: 0; border-right-width: 0;'> </td> </tr>"),
                    p = g.find("td");
                p[0].DataContext = m;
                g[0]["data-grid-item"] = m;
                if (this.options.UseChartVirtualization) this.Refresh(this.element, this.options.Data, c, this.options.ViewWidth);
                else {
                    var q = this.options.GanttChart;
                    this.CreateTaskListControl(p, m, g);
                    0 == d.index ? c.find("tr.rq-grid-row").eq(0).before(g[0]) :
                        c.find("tr.rq-grid-row").eq(d.index - 1).after(g[0]);
                    q.syncVerticalScrollBar();
                    !1 == this.options.IsPrinting && q.RenderedRows.push(m)
                }
                p.width(e);
                this.currentUniqueRowSuffix++;
                !1 == this.options.IsPrinting && m.IsSelected() && g.addClass("rq-row-selected " + window.radiantQclasses.selectionClass)
            }
            this._enableAlternativeRowBackground()
        },
        RemoveRow: function(a, d) {
            if (this.options.UseChartVirtualization) {
                this.listItems.splice(a.index, 1);
                0 < this.itemindex ? this.totalItems.splice(a.index - this.itemindex - 1, 1) : this.totalItems.splice(a.index -
                    this.itemindex, 1);
                var c = g[this.eventNamespace],
                    e = a.items[0];
                c._cachedRows[e._guid] && (c._cachedRows[e._guid].remove(), delete c._cachedRows[e._guid]);
                this.Refresh(this.element, this.options.Data, d, this.options.ViewWidth)
            } else c = d.find("tr.rq-grid-row").eq(a.index), c.remove(), b(d).css("height", parseInt(b(d).css("height")) - parseInt(b(c).css("height"))), !1 == this.options.IsPrinting && (c = this.options.GanttChart, e = c.RenderedRows.indexOf(e), -1 != e && c.RenderedRows.splice(e, 1));
            this._enableAlternativeRowBackground()
        },
        _unBindEventsToRefresh: function() {
            var d = this.element.parents("div").filter(".rq-ganttChart");
            b(d).unbind("ganttchartrefreshui.RowsRefreshUI");
            b.observable(this.options.Data).unbind(this.eventNamespace);
            a(this);
            this.$chartTableBody.empty()
        },
        _destroy: function() {
            this._unBindEventsToRefresh();
            this.element.empty();
            this.element.data("GanttRows", null)
        }
    }
})(RadiantQ.Gantt.Widget, jQuery);
(function(e) {
    function b(a, b) {
        this._fg = b;
        this.DataSource = a;
        this._endItemXPosAdjustment = 0;
        this._startTimeBinding = this._endTimeBinding = null;
        this._guid = RadiantQ.Gantt.guidGenerator();
        this.VerticalPositionChanged = new ObjectEvent("VerticalPositionChanged");
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        b = this._fg.options;
        this.EndFlexyNodeData = this.StartFlexyNodeData = null;
        null != b.DependencyLineTypeBinding && this.SetupBinding(b.DependencyLineTypeBinding, "DependencyType");
        null != b.DependencyLineStartItemBinding &&
            this.SetupBinding(b.DependencyLineStartItemBinding, "StartItem");
        null != b.DependencyLineEndItemBinding && this.SetupBinding(b.DependencyLineEndItemBinding, "EndItem");
        null != b.DependencyLineIsStartFixedShapeBinding && this.SetupBinding(b.DependencyLineIsStartFixedShapeBinding, "IsStartFixedShape");
        null != b.DependencyLineIsEndFixedShapeBinding && this.SetupBinding(b.DependencyLineIsEndFixedShapeBinding, "IsEndFixedShape");
        null != b.DependencyLineStartRowItemBinding && this.SetupBinding(b.DependencyLineStartRowItemBinding,
            "StartRowItem");
        null != b.DependencyLineEndRowItemBinding && this.SetupBinding(b.DependencyLineEndRowItemBinding, "EndRowItem");
        null != b.DependencyLineStartItemPosAdjustmentBinding && this.SetupBinding(b.DependencyLineStartItemPosAdjustmentBinding, "StartItemPosAdjustment");
        null != b.DependencyLineEndItemPosAdjustmentBinding && this.SetupBinding(b.DependencyLineEndItemPosAdjustmentBinding, "EndItemPosAdjustment");
        this.SetupStartTimeBinding();
        this.SetupEndTimeBinding();
        b.FlatItemsSource.CollectionChanged.subscribe(this.FlatTreeItemsSource_CollectionChanged,
            this)
    }
    var c = RadiantQ.Gantt;
    b.prototype.SetupStartTimeBinding = function() {
        this._startTimeBinding && this._startTimeBinding.Dispose();
        var a = null,
            a = this._dependencyType == c.DependencyType.FinishToStart || this._dependencyType == c.DependencyType.FinishToFinish ? this._fg.options.TaskEndTimeProperty : this._fg.options.TaskStartTimeProperty;
        null != this._startItem ? this._startTimeBinding = this.SetupBinding({
            Property: a
        }, "StartTime", this._startItem) : this.StartTime_M(Date.MinValue.clone())
    };
    b.prototype.SetupEndTimeBinding =
        function() {
            this._endTimeBinding && this._endTimeBinding.Dispose();
            var a = null,
                a = this._dependencyType == c.DependencyType.FinishToStart || this._dependencyType == c.DependencyType.StartToStart ? this._fg.options.TaskStartTimeProperty : this._fg.options.TaskEndTimeProperty;
            null != this._endItem ? this._endTimeBinding = this.SetupBinding({
                Property: a
            }, "EndTime", this._endItem) : this.EndTime_M(Date.MinValue.clone())
    };
    b.prototype.SetupBinding = function(a, b, c) {
        return a = new Binding(c || this.DataSource, a.Path || a.Property, this, b,
            a.Converter, a.Mode, c)
    };
    b.prototype.FlatTreeItemsSource_CollectionChanged = function(a, b) {
        if (null != b.NewItems)
            for (var c = 0; c < b.NewItems.length; c++) {
                var e = b.NewItems[c];
                e._data == this._startRowItem && this.OnStartRowItemChanged();
                e._data == this._endRowItem && this.OnEndRowItemChanged()
            }
        if (null != b.OldItems)
            for (c = 0; c < b.OldItems.length; c++) e = b.OldItems[c], e._data == this._startRowItem && this.OnStartRowItemChanged(), e._data == this._endRowItem && this.OnEndRowItemChanged()
    };
    b.prototype.DependencyTypeChanged = function() {
        this.SetupStartTimeBinding();
        this.SetupEndTimeBinding()
    };
    b.prototype.StartRowItemChanged = function() {
        this.OnStartRowItemChanged()
    };
    b.prototype.OnStartRowItemChanged = function() {
        this.UpdateStartAndEndFlexyNodeData()
    };
    b.prototype.SetupStartIndexBinding = function() {
        if (null != this._startRowItem) {
            null == this.StartFlexyNodeData && (this.StartFlexyNodeData = this._fg.FlatItemsSource.GetItemFromDataSource(this._startRowItem));
            var a = this.StartFlexyNodeData;
            null == a ? this.StartRowIndex_M(-1) : new Binding(a, "DisplayIndex", this, "StartRowIndex")
        }
    };
    b.prototype.EndRowItemChanged =
        function() {
            this.OnEndRowItemChanged()
    };
    b.prototype.OnEndRowItemChanged = function() {
        this.UpdateStartAndEndFlexyNodeData()
    };
    b.prototype.UpdateStartAndEndFlexyNodeData = function() {
        if (null != this._startRowItem) {
            null == this.StartFlexyNodeData && (this.StartFlexyNodeData = this._fg.FlatItemsSource.GetItemFromDataSource(this._startRowItem));
            var a = this.StartFlexyNodeData;
            null == a ? this.StartRowIndex_M(-1) : new Binding(a, "DisplayIndex", this, "StartRowIndex")
        }
        null != this._endRowItem && (null == this.EndFlexyNodeData && (this.EndFlexyNodeData =
            this._fg.FlatItemsSource.GetItemFromDataSource(this._endRowItem)), a = this.EndFlexyNodeData, null == a ? this.EndRowIndex_M(-1) : new Binding(a, "DisplayIndex", this, "EndRowIndex"))
    };
    b.prototype.SetupEndIndexBinding = function() {
        if (null != this._endRowItem) {
            null == this.EndFlexyNodeData && (this.EndFlexyNodeData = this._fg.FlatItemsSource.GetItemFromDataSource(this._endRowItem));
            var a = this.EndFlexyNodeData;
            null == a ? this.EndRowIndex_M(-1) : new Binding(a, "DisplayIndex", this, "EndRowIndex")
        }
    };
    b.prototype.DisplayIndexChanged =
        function() {
            this.OnVerticalPositionChanged()
    };
    b.prototype.OnVerticalPositionChanged = function() {
        null != this.VerticalPositionChanged && this.VerticalPositionChanged.raise(this, "")
    };
    b.prototype.VerticalPositionChanged = new ObjectEvent("VerticalPositionChanged");
    b.prototype.GetStartItemScheduleToPlotWith = function(a) {
        if (null != this.StartFlexyNodeData) {
            var b = this.StartFlexyNodeData.HierarchicalItem.ResourceSchedule_M();
            if (null != b) return b
        }
        return a
    };
    b.prototype.GetEndItemScheduleToPlotWith = function(a) {
        if (null !=
            this.EndFlexyNodeData) {
            var b = this.EndFlexyNodeData.HierarchicalItem.ResourceSchedule_M();
            if (null != b) return b
        }
        return a
    };
    b.prototype.Visibility_M = function() {
        return !0
    };
    b.prototype._startRowIndex = -1;
    b.prototype._endRowIndex = -1;
    b.prototype._startItem = null;
    b.prototype._startTime = Date.MinValue.clone();
    b.prototype._endItem = null;
    b.prototype._endTime = Date.MinValue.clone();
    b.prototype._dependencyType = null;
    b.prototype._isHighlighted = !1;
    b.prototype._isRelatedItemHighlighted = !1;
    b.prototype._isEndFixedShape = !1;
    b.prototype._isStartFixedShape = !1;
    b.prototype._startRowItem = null;
    b.prototype._endRowItem = null;
    b.prototype._startItemPosAdjustment = {
        X: 0,
        Y: 0
    };
    b.prototype._endItemPosAdjustment = {
        X: 0,
        Y: 0
    };
    b.prototype.StartRowIndex_M = function(a) {
        if (0 == arguments.length) return this._startRowIndex;
        this._startRowIndex = a;
        this.DisplayIndexChanged()
    };
    b.prototype.EndRowIndex_M = function(a) {
        if (0 == arguments.length) return this._endRowIndex;
        this._endRowIndex = a;
        this.DisplayIndexChanged()
    };
    b.prototype.StartItem_M = function(a) {
        if (0 == arguments.length) return this._startItem;
        this._startItem = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "StartItem"
        });
        this._startTimeBinding && this._startTimeBinding.Dispose();
        a && this.SetupStartTimeBinding()
    };
    b.prototype.StartTime_M = function(a) {
        if (0 == arguments.length) return this._startTime;
        this._startTime = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "StartTime"
        })
    };
    b.prototype.EndItem_M = function(a) {
        if (0 == arguments.length) return this._endItem;
        this._endItem = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "EndItem"
        });
        this._endTimeBinding &&
            this._endTimeBinding.Dispose();
        a && this.SetupEndTimeBinding()
    };
    b.prototype.EndTime_M = function(a) {
        if (0 == arguments.length) return this._endTime;
        this._endTime = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "EndTime"
        })
    };
    b.prototype.DependencyType_M = function(a) {
        if (0 == arguments.length) return this._dependencyType;
        this._dependencyType = a;
        this.DependencyTypeChanged()
    };
    b.prototype.IsHighlighted_M = function(a) {
        if (0 == arguments.length) return this._isHighlighted;
        this._isHighlighted = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "IsHighlighted"
        })
    };
    b.prototype.IsRelatedItemHighlighted_M = function(a) {
        if (0 == arguments.length) return this._isRelatedItemHighlighted;
        this._isRelatedItemHighlighted = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "IsRelatedItemHighlighted"
        })
    };
    b.prototype.IsEndFixedShape_M = function(a) {
        if (0 == arguments.length) return this._isEndFixedShape;
        this._isEndFixedShape = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "IsEndFixedShape"
        })
    };
    b.prototype.IsStartFixedShape_M = function(a) {
        if (0 == arguments.length) return this._isStartFixedShape;
        this._isStartFixedShape = a;
        this.PropertyChanged.raise(this, {
            PropertyName: "IsStartFixedShape"
        })
    };
    b.prototype.StartRowItem_M = function(a) {
        if (0 == arguments.length) return this._startRowItem;
        this._startRowItem = a;
        this.StartRowItemChanged()
    };
    b.prototype.EndRowItem_M = function(a) {
        if (0 == arguments.length) return this._endRowItem;
        this._endRowItem = a;
        this.EndRowItemChanged()
    };
    b.prototype.StartItemPosAdjustment_M = function(a) {
        if (0 == arguments.length) return this._startItemPosAdjustment;
        this._startItemPosAdjustment = a;
        this.DisplayIndexChanged()
    };
    b.prototype.EndItemPosAdjustment_M = function(a) {
        if (0 == arguments.length) return this._endItemYPosAdjustment;
        this._endItemYPosAdjustment = a;
        this.DisplayIndexChanged()
    };
    b.prototype.EndItemXPosAdjustment_M = function(a) {
        if (0 == arguments.length) return this._endItemXPosAdjustment;
        this._endItemXPosAdjustment = a;
        this.notifyChange("EndItemXPosAdjustment", a)
    };
    b.prototype.Dispose = function() {};
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(b.prototype, "StartRowIndex", {
            get: function() {
                return this.StartRowIndex_M()
            },
            set: function(a) {
                this.StartRowIndex_M(a)
            }
        }), Object.defineProperty(b.prototype, "EndRowIndex", {
            get: function() {
                return this.EndRowIndex_M()
            },
            set: function(a) {
                this.EndRowIndex_M(a)
            }
        }), Object.defineProperty(b.prototype, "StartItem", {
            get: function() {
                return this.StartItem_M()
            },
            set: function(a) {
                this.StartItem_M(a)
            }
        }), Object.defineProperty(b.prototype, "StartTime", {
            get: function() {
                return this.StartTime_M()
            },
            set: function(a) {
                this.StartTime_M(a)
            }
        }), Object.defineProperty(b.prototype, "EndItem", {
            get: function() {
                return this.EndItem_M()
            },
            set: function(a) {
                this.EndItem_M(a)
            }
        }), Object.defineProperty(b.prototype, "EndTime", {
            get: function() {
                return this.EndTime_M()
            },
            set: function(a) {
                this.EndTime_M(a)
            }
        }), Object.defineProperty(b.prototype, "DependencyType", {
            get: function() {
                return this.DependencyType_M()
            },
            set: function(a) {
                this.DependencyType_M(a)
            }
        }), Object.defineProperty(b.prototype, "IsHighlighted", {
            get: function() {
                return this.IsHighlighted_M()
            },
            set: function(a) {
                this.IsHighlighted_M(a)
            }
        }), Object.defineProperty(b.prototype, "IsRelatedItemHighlighted", {
            get: function() {
                return this.IsRelatedItemHighlighted_M()
            },
            set: function(a) {
                this.IsRelatedItemHighlighted_M(a)
            }
        }), Object.defineProperty(b.prototype, "IsEndFixedShape", {
            get: function() {
                return this.IsEndFixedShape_M()
            },
            set: function(a) {
                this.IsEndFixedShape_M(a)
            }
        }), Object.defineProperty(b.prototype, "IsStartFixedShape", {
            get: function() {
                return this.IsStartFixedShape_M()
            },
            set: function(a) {
                this.IsStartFixedShape_M(a)
            }
        }), Object.defineProperty(b.prototype, "StartRowItem", {
            get: function() {
                return this.StartRowItem_M()
            },
            set: function(a) {
                this.StartRowItem_M(a)
            }
        }), Object.defineProperty(b.prototype, "EndRowItem", {
            get: function() {
                return this.EndRowItem_M()
            },
            set: function(a) {
                this.EndRowItem_M(a)
            }
        }), Object.defineProperty(b.prototype, "StartItemPosAdjustment", {
            get: function() {
                return this.StartItemPosAdjustment_M()
            },
            set: function(a) {
                this.StartItemPosAdjustment_M(a)
            }
        }), Object.defineProperty(b.prototype, "EndItemPosAdjustment", {
            get: function() {
                return this.EndItemPosAdjustment_M()
            },
            set: function(a) {
                this.EndItemPosAdjustment_M(a)
            }
        }),
        Object.defineProperty(b.prototype, "EndItemXPosAdjustment", {
            get: function() {
                return this.EndItemXPosAdjustment_M()
            },
            set: function(a) {
                this.EndItemXPosAdjustment_M(a)
            }
        }));
    RadiantQ.FlexyGantt.FGDependencyView = b
})(jQuery);
(function(e) {
    function b(a, b) {
        RadiantQ.RQ_CollectionChangeNotifier(this);
        this._dataSource = null;
        this._collections = [];
        this.HiddenList = [];
        this._dependencyViewsByRowId = new RadiantQ.Dictionary;
        this._dependencyViewsById = new RadiantQ.Dictionary;
        this.fg = b;
        this.DataSource(a)
    }
    var c = RadiantQ.FlexyGantt.FGDependencyView;
    b.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
    b.prototype.DataSource = function(a) {
        if (0 == arguments.length) return this._dataSource;
        this._dataSource != a && (null != this._dataSource && this.UnwireDataSourceEvents(),
            this._dataSource = a, null != this._dataSource && this.WireDataSourceEvents(), this.UpdateList())
    };
    b.prototype.UnwireDataSourceEvents = function() {
        var a = this._dataSource;
        null != a && a.CollectionChanged && a.CollectionChanged.unsubscribe(this.NotifyingDataSource_CollectionChanged, this)
    };
    b.prototype.WireDataSourceEvents = function() {
        var a = this._dataSource;
        null != a && (a.CollectionChanged ? a.CollectionChanged.subscribe(this.NotifyingDataSource_CollectionChanged, this) : e.observable(a).bind("insert remove replaceAll", this.NotifyingDataSource_CollectionChanged.bind(this)))
    };
    b.prototype.Dispose = function() {
        this.DataSource(null)
    };
    b.prototype.NotifyingDataSource_CollectionChanged = function(a, b) {
        switch (a.type) {
            case "insert":
            case "Add":
                this.OnItemsAdded(b.items);
                break;
            case "remove":
            case "Remove":
                this.OnItemsRemoved(b.items, b.index);
                break;
            case "replaceAll":
            case "Reset":
                this.UpdateList()
        }
    };
    b.prototype.UpdateList = function() {
        for (var a = 0; a < this.length; a++) {
            var b = this[a];
            b.Dispose();
            b.VerticalPositionChanged.unsubscribe(this.depView_VerticalPositionChanged, this)
        }
        this._dependencyViewsByRowId =
            new RadiantQ.Dictionary;
        this._dependencyViewsById = new RadiantQ.Dictionary;
        this.splice(0, this.length);
        if (null != this._dataSource)
            for (a = 0; a < this._dataSource.length; a++) this.OnAddItem(this._dataSource[a])
    };
    b.prototype.OnItemsAdded = function(a) {
        for (var b = 0; b < a.length; b++) this.OnAddItem(a[b])
    };
    b.prototype.OnAddItem = function(a) {
        a = new c(a, this.fg);
        a.VerticalPositionChanged.subscribe(this.depView_VerticalPositionChanged, this);
        this.push(a);
        var b = this._dependencyViewsById[a._guid];
        if (null == b || void 0 == b) a.StartFlexyNodeData &&
            ((b = this._dependencyViewsByRowId[a.StartFlexyNodeData._guid]) ? b.push(a) : this._dependencyViewsByRowId.Add(a.StartFlexyNodeData._guid, [a])), a.EndFlexyNodeData && a.StartFlexyNodeData != a.EndFlexyNodeData && ((b = this._dependencyViewsByRowId[a.EndFlexyNodeData._guid]) ? b.push(a) : this._dependencyViewsByRowId.Add(a.EndFlexyNodeData._guid, [a])), this._dependencyViewsById.Add(a._guid, a)
    };
    b.prototype.OnItemsRemoved = function(a, b) {
        for (var c = 0; c < a.length; c++) this.OnRemoveItem(a[c], b + c)
    };
    b.prototype.OnRemoveItem = function(a,
        b) {
        var c = this[b];
        if (null != c) {
            if (c.StartFlexyNodeData) {
                var e = this._dependencyViewsByRowId[c.StartFlexyNodeData._guid],
                    h = e.indexOf(c);
                1 < e.length && -1 != h ? e.splice(h, 1) : this._dependencyViewsByRowId.Remove(c.StartFlexyNodeData._guid)
            }
            c.EndFlexyNodeData && c.StartFlexyNodeData != c.EndFlexyNodeData && (e = this._dependencyViewsByRowId[c.EndFlexyNodeData._guid], h = e.indexOf(c), 1 < e.length && -1 != h ? e.splice(h, 1) : this._dependencyViewsByRowId.Remove(c.EndFlexyNodeData._guid));
            this._dependencyViewsById.Remove(c._guid);
            this.splice(b,
                1);
            c.VerticalPositionChanged.unsubscribe(this.depView_VerticalPositionChanged, this)
        }
    };
    b.prototype.depView_VerticalPositionChanged = function(a, b) {
        if (-1 == a.StartRowIndex && -1 == a.EndRowIndex) {
            this.HiddenList.push(a);
            var c = this.indexOf(a);
            Array.prototype.splice.call(this, c, 1)
        } else c = this.HiddenList.indexOf(a), -1 != c && (this.HiddenList.splice(c, 1), Array.prototype.push.call(this, a))
    };
    DepListToDepViewListConverter = function(a) {
        this._fg = a;
        this.Convert = function(a) {
            return null == this._fg.FlatItemsSource || null == a ?
                null : new b(a, this._fg)
        }
    };
    RadiantQ.FlexyGantt.FGDependencyViewList = b
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.timespinner = {
        options: {
            step: 1,
            page: 60,
            change: null,
            start: new Date,
            minuteincrement: 30,
            current: null
        },
        TimeFormat: /^([0][0-9]|[1][0-2]|\d)(((:[0-5]\d)(\s?[aApP][mM]))|(\s?[aApP][mM])|$)$/,
        _parse: function(b) {
            if ("string" === typeof b && Number(b) === b) {
                b = this.GetHourAndMinute(b);
                var c = this.options.start;
                return new Date(c.getFullYear(), c.getMonth(), c.getDate(), +b.hour, +b.minute, 0, 0)
            }
            return this.options.start
        },
        disable: function(b) {
            b ? (this.element.prop("disabled", b), this.uiSpinner.addClass("disableStyle"),
                e(".ui-spinner-button", this.element.parent()).css("display", "none")) : (this.element.prop("disabled", b), this.uiSpinner.removeClass("disableStyle"), e(".ui-spinner-button", this.element.parent()).css("display", "block"))
        },
        _format: function(b) {
            var c = Date.CultureInfo.formatPatterns.shortTime;
            this.options.current = b.toString(c);
            return (new Date(b)).toString(c)
        },
        _increment: function(b, c) {
            this.options.start = b.addMinutes(this.options.minuteincrement * c);
            return this.options.start
        },
        _setOption: function(b, c) {
            e.Widget.prototype._setOption.apply(this,
                arguments)
        },
        _value: function(b, c) {
            var a;
            "" !== b && (a = this._parse(b), null !== a && (b = this._format(a)));
            this.element.val(b);
            this._refresh()
        },
        getTime: function() {
            return this.element.val().toString()
        },
        getRoundDate: function(b) {
            var c = this.GetHourAndMinute(this.element.val());
            !1 == this.TimeFormat.test(this.element.val()) && (c = this.GetHourAndMinute(this.options.current));
            return new Date(b.getFullYear(), b.getMonth(), b.getDate(), +c.hour, +c.minute, 0, 0)
        },
        setTime: function(b) {
            this.options.start = null != b ? new Date(b.getFullYear(),
                b.getMonth(), b.getDate(), b.getHours(), b.getMinutes(), 0, 0) : new Date(0, 0, 0, 0, 0, 0, 0);
            this._refresh();
            this._value(b)
        },
        _spin: function(b, c) {
            var a = this.value() || 0;
            this.counter || (this.counter = 1);
            "string" === typeof a || -1 == b && 0 == a.totalMilliseconds || (a = this._increment(a, b));
            this.spinning && !1 === this._trigger("spin", c, {
                value: a
            }) || (this._value(a, !0), this.counter++)
        },
        _events: {
            keydown: function(b) {
                this._start(b) && this._keydown(b) && b.preventDefault();
                this.element.val()
            },
            keyup: "_stop",
            focus: function() {
                this.uiSpinner.addClass("ui-state-active");
                this.options.current = this.element.val()
            },
            blur: function(b) {
                this._refresh();
                this.uiSpinner.removeClass("ui-state-active");
                var c = this.element.val(),
                    a = !1;
                if (!0 == this.TimeFormat.test(c)) {
                    var a = !0,
                        d = this.GetHourAndMinute(c),
                        e = this.options.start;
                    this.options.start = new Date(e.getFullYear(), e.getMonth(), e.getDate(), +d.hour, +d.minute, 0, 0)
                }!1 == a && this.element.val(this.options.current);
                this.options.current !== c && this._trigger("change", b)
            }
        },
        GetHourAndMinute: function(b) {
            var c = b.split(":"),
                a = parseInt(c[0]),
                d = 0;
            b = -1 != b.toLowerCase().indexOf("pm") ? "pm" : "am";
            2 == c.length && (d = parseInt(c[1]));
            return b && "pm" == b && 12 != a ? {
                hour: a + 12,
                minute: d
            } : {
                hour: a,
                minute: d
            }
        },
        _destroy: function() {
            e.ui.spinner.prototype._destroy.apply(this, arguments);
            this._off(this._events)
        }
    }
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.DurationPicker = {
        options: {
            minutes: 30
        },
        TimeSapanWithDay: /^(\d*.\d{2}:\d{2}:\d{2})$/,
        TimeSapanWithoutday: /^(\d{2}:\d{2}:\d{2})$/,
        _create: function() {
            this.element.addClass("radiantq.DurationPicker");
            e.ui.spinner.prototype._create.apply(this, arguments)
        },
        _parse: function(b) {
            return "string" === typeof b && (this.TimeSapanWithDay.test(b) || this.TimeSapanWithoutday.test(b)) ? RQTimeSpan.parse(b) : b
        },
        _increment: function(b, c) {
            var a = RQTimeSpan.Zero_M();
            0 == b && (b = a);
            var d = b.addMinutes(this.options.minutes *
                c);
            return d < a ? a : d
        },
        _value: function(b, c) {
            var a;
            "" !== b && (a = this._parse(b), null !== a && (b = this._format(a)));
            this.element.val(b);
            this._refresh()
        },
        GetDuration: function() {
            return this._parse(this.element.val())
        },
        _spin: function(b, c) {
            var a = this.value() || 0;
            this.counter || (this.counter = 1);
            "string" === typeof a || -1 == b && 0 == a.totalMilliseconds_M() || (a = this._increment(a, b));
            this.spinning && !1 === this._trigger("spin", c, {
                value: a
            }) || (this._value(a, !0), this.counter++)
        },
        disable: function(b) {
            b ? (this.element.prop("disabled", b),
                this.buttons.button("disable")) : (this.element.prop("disabled", b), this.buttons.button("enable"))
        },
        _events: {
            click: function(b) {
                "" == this.element.val() && this.element.val("00:00:00")
            },
            keydown: function(b) {
                this._start(b) && this._keydown(b) && b.preventDefault()
            },
            keyup: "_stop",
            focus: function() {
                this.uiSpinner.addClass("ui-state-active");
                this.previous = this.element.val()
            },
            blur: function(b) {
                if (this.cancelBlur) delete this.cancelBlur;
                else {
                    this._refresh();
                    this.uiSpinner.removeClass("ui-state-active");
                    var c = this.element.val(),
                        a = !1;
                    !0 == this.TimeSapanWithDay.test(c) && !1 == this.TimeSapanWithoutday.test(c) ? a = !0 : !1 == this.TimeSapanWithDay.test(c) && !0 == this.TimeSapanWithoutday.test(c) && (a = !0);
                    !1 == a && this.element.val(this.previous);
                    this.previous !== c && this._trigger("change", b)
                }
            },
            mousewheel: function(b, c) {
                if (c) {
                    if (!this.spinning && !this._start(b)) return !1;
                    this._spin((0 < c ? 1 : -1) * this.options.step, b);
                    clearTimeout(this.mousewheelTimer);
                    this.mousewheelTimer = this._delay(function() {
                        this.spinning && this._stop(b)
                    }, 100);
                    b.preventDefault()
                }
            },
            "mousedown .ui-spinner-button": function(b) {
                function c() {
                    this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = a, this._delay(function() {
                        this.previous = a
                    }))
                }
                var a;
                a = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                b.preventDefault();
                c.call(this);
                this.cancelBlur = !0;
                this._delay(function() {
                    delete this.cancelBlur;
                    c.call(this)
                });
                !1 !== this._start(b) && this._repeat(null, e(b.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, b)
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(b) {
                if (e(b.currentTarget).hasClass("ui-state-active")) {
                    if (!1 === this._start(b)) return !1;
                    this._repeat(null, e(b.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, b)
                }
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _format: function(b) {
            return b.toString()
        }
    }
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.DateTimePicker = {
        options: {
            setdate: null,
            dateformat: "dd.mm.yy",
            minuteincrement: 30,
            Visibility: "block"
        },
        wrapper: null,
        timePicker: null,
        activeElement: function() {
            try {
                return document.activeElement
            } catch (b) {
                return document.documentElement.activeElement
            }
        },
        isInSameObject: function(b) {
            b = b || e(this.activeElement());
            var c = b.parents(".datetimepicker");
            return c.length && c[0] == this.wrapper[0] ? !0 : (c = this.element.data("datepicker")) && b.closest(".ui-datepicker")[0] == c.dpDiv[0] ? !0 : !1
        },
        changeTime: null,
        _create: function() {
            var b = this;
            this.element.data("DateTimePicker", this);
            var c = null,
                a = 0;
            this.element.addClass("datetimepicker");
            this.wrapper = e('<div class="datetimepicker wrapper" style="height:inherit;width:inherit"></div>');
            //this.timePicker = e('<input id="time" class="spinner" value="00:00 AM"/>');
            this.element.wrap(this.wrapper);
            this.wrapper = this.element.parent();
            //this.wrapper.append(this.timePicker);
            //var d = this.timePicker;
            this.element.focusin(function() {
                b.docClickProxy || (b.docClickProxy = e.proxy(b._checkExternalClick,
                    b), e(document).bind("mousedown", b.docClickProxy))
            });
            this.element.datepicker({
                dateFormat: this.options.dateformat,
                onSelect: function() {
                    c = a = e(this).datepicker("getDate");
                    //b.timePicker.focus()
                }
            }).on("change", function(a) {
                RegExp(/\b\d{1,2}[\/-]\d{1,2}[\/-]\d{4}\b/).test(this.value) ? b.element.is(":focus") || b._trigger("onBlur") : (e(this).datepicker("setDate", new Date(c)), a.preventDefault())
            });
            /*this.timePicker.bind("blur.datetimepicker", function() {
                b.element.is(":focus") || b._trigger("onBlur")
            }).focusin(function() {
                b.element.datepicker("hide")
            });*/
            b = this;
            /*d.timespinner({
                start: new Date(0, 0, 0, 0, 0, 0, 0),
                minuteincrement: b.options.minuteincrement
            });*/
            this.RefreshWidthandHeight()
        },
        _checkExternalClick: function(b) {
            e.datepicker._curInst && !1 == this.isInSameObject(e(b.target)) && (this.element.datepicker("hide"), this._trigger("onBlur"), this.docClickProxy && (e(document).unbind("mousedown", this.docClickProxy), this.docClickProxy = null))
        },
        getDate: function() {
            var b = this.element.datepicker("getDate");
			return b;
            //return null != b ? this.timePicker.timespinner("getRoundDate", b) : b
        },
        setDate: function(b) {
            if (null !=
                b) {
                var c = this.element.DateTimePicker("getDate");
                this.element.datepicker("setDate", new Date(b));
                //this.timePicker.timespinner("setTime", new Date(b));
                null != c ? b.equals(c) || this._trigger("onBlur") : this._trigger("onBlur")
            } else this.element.datepicker("setDate", b)/*, this.timePicker.timespinner("setTime", b)*/
        },
        disable: function(b) {
            this.element.prop("disabled", b);
            //this.timePicker.timespinner("disable", b)
        },
        visibility: function(b) {
            this.wrapper.css("display", b);
            this.options.Visibility = b
        },
        widget: function() {
            return this.element.parent()
        },
        RefreshWidthandHeight: function() {
            var b = this.element;
                //c = this.timePicker.timespinner("widget"),
                //a = c.find("input");
            b.css({
                margin: "0px",
                width: "100%"
            });
            /*c.css({
                "vertical-align": "top",
                width: "46%"
            });*/
            /*a.css({
                width: "inherit",
                margin: "2px",
                width: "80%",
                "vertical-align": "top"
            })*/
        },
        _destroy: function() {
            this.element.datepicker("hide");
            e.Widget.prototype._destroy.apply(this, arguments);
            e(document).unbind("mousedown", this.res);
            //this.timePicker.unbind("blur.datetimepicker");
            this.element.unwrap();
            //this.timePicker.remove()
        }
    }
})(jQuery);
(function(e) {
    RadiantQ.Gantt.Widget.ResourcePicker = {
        version: "1.10.2",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            SelectedResources: null,
            delay: 0,
            source: null,
            minLength: 0,
            dropDownHeight: "auto",
            disabled: !1
        },
        overLay: null,
        _create: function() {
            var b = this;
            b.element.attr("readonly", !0);
            b.changedItems = [];
            b.selectedItems = [];
            b._draw();
            b._on(this._events);
            b.selectedItems = [];
            var c =
                e("<ul class='multi-select-menu' style='overflow:auto'>").addClass("ui-autocomplete ui-front").appendTo(b._appendTo()).menu({
                    role: null
                }).hide();
            b.menu = c.data("uiMenu");
            b.menu || (b.menu = c.data("ui-menu"));
            b.menu._scrollIntoView = function(a) {
                if (a.length) {
                    var d, c, f;
                    b.menu._hasScroll() && (d = parseFloat(e.css(b.menu.activeMenu[0], "borderTopWidth")) || 0, c = parseFloat(e.css(b.menu.activeMenu[0], "paddingTop")) || 0, d = a.offset().top - b.menu.activeMenu.offset().top - d - c, c = this.activeMenu.scrollTop(), f = this.activeMenu.height(),
                        a = a.height(), 0 > d ? b.menu.activeMenu.scrollTop(c + d) : d + a > f && b.menu.activeMenu.scrollTop(c + d - f + a))
                }
            };
            b.element.data("ResourcePicker", this);
            b.element.addClass("ResourcePicker");
            b.updateSelectedItem();
            b.overLay = e('<div class="overlay" ></div>')
        },
        setMenuHeight: function() {
            this.menu.element.css("height", this.options.dropDownHeight)
        },
        _appendTo: function() {
            var b = this.options.appendTo;
            b && (b = b.jquery || b.nodeType ? e(b) : this.document.find(b).eq(0));
            b && b[0] || (b = this.element.closest(".ui-front"));
            b.length || (b = this.document[0].body);
            return b
        },
        selectedItems: null,
        changedItems: null,
        createAutoComplet: function() {
            this.updateSelectedItem()
        },
        _resizeMenu: function() {
            var b = this.menu.element;
            b.outerWidth(Math.max(b.width("").outerWidth() + 1, this.element.outerWidth()))
        },
        guid: function() {
            var b = "",
                c, a;
            for (c = 0; 32 > c; c++) {
                a = 16 * Math.random() | 0;
                if (8 == c || 12 == c || 16 == c || 20 == c) b += "-";
                b += (12 == c ? 4 : 16 == c ? a & 3 | 8 : a).toString(16)
            }
            return b
        },
        renderCondent: function(b) {
            var c = "",
                a = this.guid;
            this.guids = [];
            for (var d = this.options.source, e = 0; e < d.length; e++) {
                var f = d[e],
                    h = a();
                this.guids[h] = f;
                c += "<div style='height:20px' class='rq-grid-resourcepicker-item' aria-label ='" + f.toString() + "'><input class='selectBox' id='" + h + "' data-guid='" + h + "' type='checkbox' " + (-1 != this.selectedItems.indexOf(f) ? "checked" : "") + " /> <label for='" + h + "'>" + f.toString() + "</label></div>"
            }
            b[0].innerHTML = c
        },
        guids: [],
        open: function() {
            var b = this,
                c = b.menu.element.empty();
            b.renderCondent(c);
            b.menu.refresh();
            b.setMenuHeight();
            c.show();
            this._resizeMenu();
            c.position(e.extend({
                of: this.element
            }, this.options.position));
            b.wasOpen = !0;
            e("body").append(this.overLay);
            this.triggerCloseAndChangeCallback = e.proxy(this.triggerCloseAndChange, this);
            this.overLay.bind("mousedown", this.triggerCloseAndChangeCallback);
            b.menu.element.find(".selectBox").bind("click", function(a) {
                if (!0 == b.wasOpen && (a = e(a.target), a.hasClass("selectBox"))) {
                    var d = a.data("guid"),
                        d = b.guids[d],
                        c = b.selectedItems.indexOf(d);
                    !0 == a[0].checked && -1 == c ? (a = b.changedItems.indexOf(d), b.selectedItems.push(d), -1 != a ? b.changedItems.splice(a, 1) : b.changedItems.push(d)) : -1 != c && (c = b.selectedItems.indexOf(d), a = b.changedItems.indexOf(d), b.selectedItems.splice(c, 1), -1 != a ? b.changedItems.splice(a, 1) : b.changedItems.push(d));
                    b.updateDispalyText()
                }
            })
        },
        IsChanged: function() {
            return 0 < this.changedItems.length
        },
        close: function() {
            this.menu.element.empty();
            this.menu.element.hide();
            this.wasOpen = !1;
            this.overLay.unbind("mousedown", this.triggerCloseAndChangeCallback);
            this.overLay.remove();
            this._trigger("close")
        },
        wasOpen: null,
        disable: function(b) {
            b ? this.element.prop("disabled", !1) : this.element.prop("disabled", !0)
        },
        updateDispalyText: function() {
            for (var b = this.element, c = this.selectedItems, a = "", d = 0; d < c.length; d++) a += c[d].toString() + ",";
            b.val(a.replace(/\,$/, ""))
        },
        updateSelectedItem: function() {
            var b = this.options.SelectedResources;
            if (null != b)
                for (var c = 0; c < b.length; c++) this.selectedItems.push(b[c]);
            this.updateDispalyText()
        },
        selected: function(b, c) {
            var a = b.data,
                d = e(this).closest(".rq-grid-resourcepicker-item").data("item"),
                g = -1,
                f = -1;
            !0 == this.checked ? (f = a.changedItems.indexOf(d), a.selectedItems.push(d), -1 != f ? a.changedItems.splice(f,
                1) : a.changedItems.push(d)) : (g = b.data.selectedItems.indexOf(d), f = b.data.changedItems.indexOf(d), b.data.selectedItems.splice(g, 1), -1 != f ? b.data.changedItems.splice(f, 1) : b.data.changedItems.push(d));
            b.data.updateDispalyText()
        },
        _events: {
            "mousedown .ui-spinner-button": function(b) {
                this.wasOpen = this.overLay.is(":visible")
            },
            "click .ui-spinner-button": function() {
                this.wasOpen ? this.close() : this.open()
            }
        },
        _draw: function() {
            var b = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(e(this._buttonHtml()).css("height",
                "100%"));
            this.element.attr("role", "spinbutton");
            this.buttons = b.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
            this.options.disabled && this.disable()
        },
        triggerCloseAndChange: function(b) {
            this.close()
        },
        _uiSpinnerHtml: function() {
            return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"
        },
        _buttonHtml: function() {
            return "<a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " + this.options.icons.down + "'>&#9660;</span></a>"
        },
        _setOption: function(b, c) {
            e.Widget.prototype._setOption.apply(this, arguments);
            switch (b) {
                case "SelectedResources":
                    this.updateSelectedItem();
                    break;
                case "source":
                    this.changedItems = [], this.selectedItems = []
            }
        },
        _destroy: function() {
            this.overLay.unbind("mousedown", this.triggerCloseAndChangeCallback);
            this.overLay.remove();
            this.triggerCloseAndChangeCallback && (e(this.document[0].documentElement).unbind("mousedown", this.triggerCloseAndChangeCallback), this.triggerCloseAndChangeCallback = null);
            this.menu.element.remove();
            this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.uiSpinner.replaceWith(this.element)
        },
        widget: function() {
            return this.uiSpinner
        }
    }
})(jQuery);
(function(e) {
    var b, c;
    c = b = !1;
    RadiantQ.Gantt.RowDragDropTracker = function(a) {
        function d(a, b) {
            F.options.CanUserReorderRows && !F._isReadOnly && 0 != H.element.width() && 0 != H.element.height() && (y || 0 == F.SelectedItems.length ? null != _timer && clearTimeout(_timer) : (null != _timer && clearTimeout(_timer), _timer = setTimeout(function() {
                N || (N = !0, g());
                if (null != E) {
                    e(E).unbind(".rowHeaderMouseEvents");
                    if (F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragElement) {
                        var a = e(E).find(".row-dragger");
                        a.length && (a.unbind("mousedown.handleCueMouseDown"),
                            a.unbind("mouseup.handleCueMouseDown"))
                    }
                    F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragEntireRow && (e(E).unbind("mousedown.handleCueMouseDown"), e(E).unbind("mouseup.handleCueMouseDown"))
                }
                F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragEntireRow && (e(E).unbind(".handleCueMouseDown"), e(document).unbind(".handleCueMouseDown"), e(E).unbind(".handleCueMouseDown"));
                if (H.GetRowFromData(F.SelectedItems[0]) && (a = H.GetRowFromData(F.SelectedItems[0]))) {
                    F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragRowHeader &&
                        (E = a[0].firstChild, e(E).bind("mouseenter.rowHeaderMouseEvents", function() {
                        !1 != _isRowsDraggable && !0 != F.PreventDefaultFns && (null != _topSelectedIndex && void 0 != _topSelectedIndex ? y || w.css("display", "block") : w.css("display", "block"))
                    }).bind("mouseleave.rowHeaderMouseEvents", function() {
                        w.css("display", "none")
                    }).dblclick(function(a) {
                        a.preventDefault();
                        a.stopPropagation()
                    }));
                    if (F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragEntireRow || F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragElement) E =
                        a;
                    0 < F.SelectedItems.length && h(null, F.SelectedItems)
                }
            }.bind(this), 0)))
        }

        function g() {
            w = e('<div class="handleCue rq-dnd-handleCue"></div>');
            u = e('<div class="avoidCue rq-dnd-avoidCue" style="align:center; pointer-events:none;"></div>');
            $gridBody = e(".ui-grid-body", F.element);
            $lockedGridBody = e(".ui-body-frozen-div", F.element);
            v = e('<div style="display:none; pointer-events:none; width:100%; border:1.2px solid black; position:absolute;"></div>');
            C = v.clone();
            $lockedGridBody.prepend(v);
            $gridBody.prepend(C);
            $gridBody.append(u);
            v = v.add(C);
            $lockedGridBody.append(u)
        }

        function f(a, b) {
            if (!0 == b)
                if (a.originalEvent.touches[0].pageX || a.originalEvent.touches[0].pageY) var d = a.originalEvent.touches[0].pageX,
            c = a.originalEvent.touches[0].pageY;
            else {
                if (a.originalEvent.touches[0].clientX || a.originalEvent.touches[0].clientY) d = a.originalEvent.touches[0].clientX, c = a.originalEvent.touches[0].clientY
            } else if (a.pageX || a.pageY) d = a.pageX, c = a.pageY;
            else if (a.clientX || a.clientY) d = a.clientX, c = a.clientY;
            return {
                x: d,
                y: c
            }
        }

        function h(a,
            b) {
            if (b && !y) {
                e(".ui-grid-body", I.element);
                L = b;
                var d = H.GetRowFromData(L[0]);
                _topSelectedIndex = I.options.UseVirtualization ? L[0].DisplayIndex_M ? L[0].DisplayIndex_M() : L[0].DisplayIndex() : d[0].rowIndex; - 1 != _topSelectedIndex && ((_isRowsDraggable = m(_topSelectedIndex)) && _isRowHeaderClicked ? w.css("display", "block") : w.css("display", "none"));
                $itempeer = U = d;
                F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragRowHeader && (e(E).append(w), w.unbind(".handleCueMouseDown"), w.bind("mousedown.handleCueMouseDown",
                    function(a) {
                        n(a)
                    }), w.bind("touchstart.handleCueMouseDown", function(a) {
                    n(a)
                }));
                if (F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragElement) {
                    var c = 0,
                        g = function(a) {
                            4 <= Math.abs(f(a, !1).y - c) && (e(document).unbind("mousemove.handleCueMouseDown"), k(a))
                        }, h = e(E).find(".row-dragger");
                    h.length && (h.bind("mousedown.handleCueMouseDown", function(a) {
                        c = f(a, !1).y;
                        e(document).bind("mousemove.handleCueMouseDown", g)
                    }), h.bind("mouseup.handleCueMouseDown", function(a) {
                        e(document).unbind(".handleCueMouseDown");
                        h.unbind(".handleCueMouseDown")
                    }))
                }
                F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragEntireRow && (c = 0, g = function(a) {
                    4 <= Math.abs(f(a, !1).y - c) && (e(document).unbind("mousemove.handleCueMouseDown"), k(a))
                }, e(E).bind("mousedown.handleCueMouseDown", function(a) {
                    c = f(a, !1).y;
                    e(document).bind("mousemove.handleCueMouseDown", g)
                }), e(E).bind("mouseup.handleCueMouseDown", function(a) {
                    e(document).unbind(".handleCueMouseDown");
                    e(E).unbind(".handleCueMouseDown")
                }))
            }
        }

        function k(a) {
            a = $itempeer.position().top;
            v.css("top", a);
            b = c = _isRowsDraggable = y = !0;
            Q = I.$ganttWrapper.data("GanttRowselectable");
            p();
            K.bind("mouseenter.RowDragDropTracker", function(a) {
                _isRowsDraggable && (b = !0, u.css("display", "none"), B ? v.css("display", "none") : v.css("display", "block"))
            });
            K.bind("mouseleave.RowDragDropTracker", function(a) {
                if (_isRowsDraggable) {
                    b = !1;
                    var d = e(a.target).closest("tr.rq-grid-row"),
                        c = K[0].offsetTop + K.height();
                    a.pageY > c || 0 == d.length ? u.css({
                        top: c
                    }) : u.css({
                        top: d.position().top + 4
                    });
                    v.css("display", "none");
                    u.css("display",
                        "block")
                }
            });
            K.bind("mousemove.RowDragDropTracker", function(a) {
                l(a)
            });
            K.bind("touchmove.RowDragDropTracker", function(a) {
                b = M = !0;
                var d;
                if (void 0 != a.originalEvent.changedTouches || null != a.originalEvent.changedTouches) d = e(document.elementFromPoint(a.originalEvent.changedTouches[0].clientX, a.originalEvent.changedTouches[0].clientY)).closest("tr");
                d.hasClass("rq-grid-row") ? l(a) : (b = !1, u.css({
                    top: U.position().top + 4
                }), v.css("display", "none"), u.css("display", "block"));
                a.preventDefault();
                a.stopPropagation()
            });
            e(document).unbind(".RowDragDropTracker");
            e(document).bind("mouseup.RowDragDropTracker", function(a) {
                y = !1;
                M = !0;
                q()
            });
            e(document).bind("touchend.RowDragDropTracker", function(a) {
                window.console && console.log("end event");
                y = !1;
                M = !0;
                q();
                b = !1
            });
            e(document).bind("keyup.RowDragDropTracker", function(a) {
                M = !0;
                27 == a.keyCode && (r(), z = !1)
            });
            e(document).bind("keydown.RowDragDropTracker", function(a) {
                27 == a.keyCode && (B = z = !0)
            })
        }

        function n(a) {
            a = $itempeer.position().top;
            v.css("top", a);
            b = c = _isRowsDraggable = y = !0;
            Q = I.$ganttWrapper.data("GanttRowselectable");
            p();
            K.bind("mouseenter.RowDragDropTracker", function(a) {
                _isRowsDraggable && (b = !0, u.css("display", "none"), B ? v.css("display", "none") : v.css("display", "block"))
            });
            K.bind("mouseleave.RowDragDropTracker", function(a) {
                if (_isRowsDraggable) {
                    b = !1;
                    var d = e(a.target).closest("tr.rq-grid-row"),
                        c = K[0].offsetTop + K.height();
                    a.pageY > c || 0 == d.length ? u.css({
                        top: c
                    }) : u.css({
                        top: d.position().top + 4
                    });
                    v.css("display", "none");
                    u.css("display", "block")
                }
            });
            K.bind("mousemove.RowDragDropTracker", function(a) {
                l(a)
            });
            K.bind("touchmove.RowDragDropTracker",
                function(a) {
                    b = M = !0;
                    var d;
                    if (void 0 != a.originalEvent.changedTouches || null != a.originalEvent.changedTouches) d = e(document.elementFromPoint(a.originalEvent.changedTouches[0].clientX, a.originalEvent.changedTouches[0].clientY)).closest("tr");
                    d.hasClass("rq-grid-row") ? l(a) : (b = !1, u.css({
                        top: U.position().top + 4
                    }), v.css("display", "none"), u.css("display", "block"));
                    a.preventDefault();
                    a.stopPropagation()
                });
            e(document).unbind(".RowDragDropTracker");
            e(document).bind("mouseup.RowDragDropTracker", function(a) {
                y = !1;
                M = !0;
                q()
            });
            e(document).bind("touchend.RowDragDropTracker", function(a) {
                window.console && console.log("end event");
                y = !1;
                M = !0;
                q();
                b = !1
            });
            e(document).bind("keyup.RowDragDropTracker", function(a) {
                M = !0;
                27 == a.keyCode && (r(), z = !1)
            });
            e(document).bind("keydown.RowDragDropTracker", function(a) {
                27 == a.keyCode && (B = z = !0)
            })
        }

        function l(a) {
            if (y && _isRowsDraggable) {
                b = !0;
                var d = e(".ui-grid-body", I.element);
                d.prev();
                var f = d.offset().top,
                    g = I.options.RowHeight;
                (a.pageY || a.originalEvent.changedTouches[0].pageY) < f + g / 2 && b ? (d = $gridBody[0].scrollHeight,
                        f = $gridBody[0].scrollTop, M = !1, x(-10, f, d)) : (a.pageY || a.originalEvent.changedTouches[0].pageY) > f + d[0].clientHeight - g && b ? (d = $gridBody[0].scrollHeight, f = $gridBody[0].scrollTop, M = !1, x(20, f, d)) : M = !0;
                G = void 0 != a.originalEvent.changedTouches || null != a.originalEvent.changedTouches ? U = e(document.elementFromPoint(a.originalEvent.changedTouches[0].clientX, a.originalEvent.changedTouches[0].clientY)).closest("tr.rq-grid-row") : e(a.target).closest("tr.rq-grid-row");
                null == G || void 0 == G || 0 == G.length ? c = !1 : (d = H.GetDataFromRow(G[0]),
                    _destIndex = I.options.UseVirtualization && null != d ? d.DisplayIndex_M ? d.DisplayIndex_M() : d.DisplayIndex() : G[0].rowIndex, c = !0);
                _inChildRows = !1;
                d = _destIndex - _topSelectedIndex;
                I.SelectedItems.containsValue(null != I.ActivityViews && void 0 != I.ActivityViews ? I.ActivityViews[_destIndex] : I.FlatHierarchicalItemsList[_destIndex].corrFlexyNodeData) ? _inChildRows = !0 : d == I.SelectedItems.length && (_enableDropAsChild && A ? _inChildRows = !0 : _enableDropAsChild || D && _isInLastRow || (_inChildRows = !0));
                null != G && void 0 != G && 0 != G.length &&
                    (d = I.options.RowHeight, f = G.position().top, void 0 != a.originalEvent.changedTouches || null != a.originalEvent.changedTouches ? (g = e(document.elementFromPoint(a.originalEvent.changedTouches[0].clientX, a.originalEvent.changedTouches[0].clientY)).closest("tr.rq-grid-row"), a = a.originalEvent.changedTouches[0].pageY - g.offset().top) : a = void 0 == a.offsetY ? a.pageY - e(a.target).offset().top : a.offsetY, g = d / 4, A = a <= g, D = a >= 3 * g, J = a > g && a < 3 * g, O.CanDrop(_destIndex, _enableDropAsChild && J) || _destIndex == _topSelectedIndex || _inChildRows ?
                    (B = !0, F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragElement || F.options.RowDragBehavior == RadiantQ.Gantt.RowDragBehavior.DragEntireRow ? u.css({
                        top: G.position().top - 8,
                        left: G.width() / 2
                    }) : u.css({
                        top: G.position().top + 4
                    }), v.css("display", "none"), u.css("display", "block"), w.css("display", "none")) : (B = !1, v.css("display", "block"), u.css("display", "none")), a = G.next(), _isInLastRow = !1, _enableDropAsChild ? J ? s(f, "1.5px", d + "px") : A ? s(f, "1px", "0px") : 0 < a.length ? s(a.position().top, "1px", "0px") : (_isInLastRow = !0, s(G.position().top + d, "1px", "0px")) : 0 < a.length ? s(G.position().top, "1px", "0px") : D ? (_isInLastRow = !0, s(G.position().top + d, "1px", "0px")) : 0 == a.length && (_isInLastRow = !0, s(G.position().top, "1px", "0px")))
            }
        }

        function m(a) {
            a = O.CanBeginDrag(a);
            !1 == a ? w.addClass("rq-prevent-dnd-handleCue") : w.removeClass("rq-prevent-dnd-handleCue");
            return a
        }

        function p() {
            O.OnBeforeDragStart(_topSelectedIndex, L.length);
            !1 == m(_topSelectedIndex) ? (u.css("display", "none"), v.css("display", "none"), w.css("display", "none"), y = _isRowsDraggable =
                c = !1) : L = Q.selectedItems.slice(0)
        }

        function q() {
            if (null != L && null != G) {
                if (r() || !_isRowsDraggable) return;
                var a = H.GetDataFromRow(G[0]);
                if (b && c) {
                    _destIndex = a.DisplayIndex_M ? a.DisplayIndex_M() : a.DisplayIndex();
                    D && _enableDropAsChild && (_destIndex += 1);
                    _isInLastRow && (_destIndex = null != I.ActivityViews && void 0 != I.ActivityViews ? I.ActivityViews.length - 1 : I.FlatHierarchicalItemsList.length - 1);
                    _isInLastRow && D && (_destIndex = -1);
                    var d = !1;
                    J && _enableDropAsChild && (d = t(_topSelectedIndex, _destIndex));
                    J && _topSelectedIndex == _destIndex &&
                        _enableDropAsChild && (d = !0);
                    var a = L.length,
                        f = L.slice(0),
                        g = O.OnDrop(_topSelectedIndex, a, _destIndex, _enableDropAsChild && J, _isInLastRow, D);
                    if (!d && !B && g && 0 <= _topSelectedIndex && !_inChildRows) {
                        _isInLastRow && D && (_destIndex = null != I.ActivityViews && void 0 != I.ActivityViews ? I.ActivityViews.length : I.FlatHierarchicalItemsList.length);
                        !1 != _enableDropAsChild && J ? O.DoInsertRowsAsChild(_topSelectedIndex, a, _destIndex) : O.DoMoveRows(_topSelectedIndex, a, _destIndex - 1);
                        for (d = 0; d < a; d++)!1 == Q.selectedItems.containsValue(f[d]) &&
                            Q.selectedItems.add(f[d]);
                        O.OnDropped(L)
                    }
                }
                u.css("display", "none");
                v.css("display", "none");
                w.css("display", "none");
                L = [];
                G = null
            }
            c = _isRowHeaderClicked = !1;
            e(document).unbind(".RowDragDropTracker");
            K.unbind(".RowDragDropTracker")
        }

        function s(a, b, d) {
            v.css({
                top: a
            });
            v.height(d);
            v.css("border-width", b)
        }

        function r() {
            return z ? (B = !0, y = c = !1, w.css("display", "none"), u.css("display", "none"), v.css("display", "none"), K.unbind(".RowDragDropTracker"), e(document).unbind(".RowDragDropTracker"), !0) : !1
        }

        function t(a, b) {
            var d =
                F.options.FlatItemsSource[a],
                c = F.options.FlatItemsSource[b];
            return "ProjectGantt" == this.GanttType && (parentActivityIndex = null != d._parentView && void 0 != d._parentView ? d._parentView._activity._displayIndex : d._activity._displayIndex, c.activity._displayIndex == parentActivityIndex) ? !0 : !1
        }

        function x(a, b, d) {
            $gridBody.animate({
                scrollTop: b + a
            }, 1, "swing", function() {
                if (!1 == M) {
                    var c = b + a;
                    0 >= c && (M = !0, c = 0);
                    c >= d && (M = !0);
                    x(a, b + a, d)
                }
            })
        }
        var w = null,
            u = null,
            v = null,
            C = null,
            z = !1,
            y = !1,
            B = !1,
            A = !1,
            D = !1,
            E = null,
            J = !1,
            H = a,
            F = H.options.Parent,
            I = F,
            N = !1,
            G = null,
            O = H,
            Q = null,
            L = [],
            K = H.uiGridBodyTable.add(H.frozenTable);
        _enableDropAsChild = F.options.EnableDropAsChild;
        _destIndex = _topSelectedIndex = null;
        _isRowHeaderClicked = _inChildRows = _isInLastRow = !1;
        _isRowsDraggable = !0;
        _timer = null;
        this.Source = H;
        var U = null;
        K.bind("mousedown.popupHandler", function(a) {
            !1 == y && _rowHeaderMouseDown(a)
        });
        K.bind("touchstart.popupHandler", function(a) {
            !1 == y && _rowHeaderMouseDown(a)
        });
        _rowHeaderMouseDown = function(a) {
            e(a.target).hasClass("rq-grid-column-0") ? (N || (N = !0, g()), _isRowHeaderClicked = !0) : _isRowHeaderClicked = !1
        };
        F.element.bind("ganttcontrolselectionchanged.RowDragDropTracker", function(a, b) {
            d(a, b)
        });
        F.element.bind("flexyganttselectionchanged.RowDragDropTracker", function(a, b) {
            d(a, b)
        });
        var M = !1
    };
    RadiantQ.Gantt.RowDragDropTracker.IsDragStarted_M = function() {
        return c
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(RadiantQ.Gantt.RowDragDropTracker, "IsDragStarted", {
        get: function() {
            return c
        }
    })
})(jQuery);
RadiantQ.Gantt.themes = function() {
    this.defaultClass = "ui-state-default";
    this.headerClass = "ui-widget-header";
    this.hoveringClass = "ui-state-hover";
    this.selectionClass = "ui-state-active";
    this.highlightingClass = "ui-state-highlight";
    this.chartBackground = ""
};
window.radiantQclasses = new RadiantQ.Gantt.themes;
(function(e) {
    e.widget("radiantq.ScaleRendererBase", RadiantQ.Gantt.Widget.ScaleRendererBase);
    e.widget("radiantq.TimeSpanHeader", e.radiantq.ScaleRendererBase, RadiantQ.Gantt.Widget.TimeSpanHeader);
    e.widget("radiantq.GanttChartBackground", RadiantQ.Gantt.Widget.GanttChartBackground);
    e.widget("radiantq.GanttChartCustomRangeBackground", RadiantQ.Gantt.Widget.GanttChartCustomRangeBackground);
    e.widget("radiantq.SpecialLines", e.radiantq.ScaleRendererBase, RadiantQ.Gantt.Widget.SpecialLines);
    e.widget("radiantq.ScalePanelRendererBase",
        RadiantQ.Gantt.Widget.ScalePanelRendererBase);
    e.widget("radiantq.TimeSpanHeaders", e.radiantq.ScalePanelRendererBase, RadiantQ.Gantt.Widget.TimeSpanHeaders);
    e.widget("radiantq.taskbar", RadiantQ.Gantt.Widget.taskbar);
    e.widget("radiantq.TasksListControl", RadiantQ.Gantt.Widget.TasksListControl);
    e.widget("radiantq.GanttChart", RadiantQ.Gantt.Widget.GanttChart);
    e.widget("radiantq.GanttBase", RadiantQ.Gantt.Widget.GanttBase);
    e.widget("radiantq.GanttControl", e.radiantq.GanttBase, RadiantQ.Gantt.Widget.GanttControl);
    e.widget("radiantq.FlexyGantt", e.radiantq.GanttBase, RadiantQ.Gantt.Widget.FlexyGantt);
    e.widget("radiantq.GanttTaskItemsControl", RadiantQ.Gantt.Widget.GanttTaskItemsControl);
    e.widget("radiantq.GanttTaskItemBar", RadiantQ.Gantt.Widget.GanttTaskItemBar);
    e.widget("radiantq.GanttDependencyControl", RadiantQ.Gantt.Widget.GanttDependencyControl);
    e.widget("radiantq.GanttDependencyLine", RadiantQ.Gantt.Widget.GanttDependencyLine);
    e.widget("radiantq.GanttRows", RadiantQ.Gantt.Widget.GanttRows);
    e.widget("radiantq.rowbase",
        RadiantQ.Gantt.Widget.rowbase);
    e.widget("radiantq.GanttRowselectable", e.radiantq.rowbase, RadiantQ.Gantt.Widget.GanttRowselectable);
    e.widget("radiantq.hoverable", e.radiantq.rowbase, RadiantQ.Gantt.Widget.hoverable);
    void 0 != e.ui.spinner && null != e.ui.spinner ? (e.widget("ui.timespinner", e.ui.spinner, RadiantQ.Gantt.Widget.timespinner), e.widget("radiatq.DurationPicker", e.ui.spinner, RadiantQ.Gantt.Widget.DurationPicker)) : window.console && console.log && console.log('"jquery.ui.spinner" file is missing. So, gantt would not create "Timespinner" and "DurationPicker" widgets.');
    e.widget("radiantq.DateTimePicker", RadiantQ.Gantt.Widget.DateTimePicker);
    e.widget("radiantq.ResourcePicker", RadiantQ.Gantt.Widget.ResourcePicker);
    var b = {
        triggerEvent: function(a, b, c) {
            return this._trigger(a, b, c)
        },
        getChildWidgetName: function(a) {
            return a
        },
        widgetBaseSetOption: function() {
            e.Widget.prototype._setOption.apply(this, arguments)
        },
        widgetBaseDestroy: function() {
            e.Widget.prototype.destroy.apply(this, arguments)
        }
    };
    e.extend(e.radiantq.GanttBase.prototype, {
        _triggerHeaderCollectionschangedEvent: function(a,
            b) {
            e.radiantq.GanttBase.prototype.element = this.element;
            e.radiantq.GanttBase.prototype._trigger("HeaderCollectionschanged", a, {
                event: a,
                value: b,
                options: this.options
            })
        }
    }, b);
    var c = {
        baseCreate: function() {
            e.radiantq.GanttBase.prototype._create.apply(this, arguments)
        },
        baseSetOption: function() {
            e.radiantq.GanttBase.prototype._setOption.apply(this, arguments)
        },
        baseDestroy: function() {
            e.radiantq.GanttBase.prototype.destroy.apply(this, arguments)
        }
    }, a = e.extend({}, c, {
            updateGanttChart: function(a, b) {
                var c = this.GetGanttChart();
                0 != c.length && a in c.GanttChart("option") && (c.GanttChart("option", a) == b && "BaseTimeScaleType" != a || c.GanttChart("option", a, b))
            }
        }, b),
        c = e.extend({}, c, {
            updateGanttChart: function(a, b) {
                var c = this.GetGanttChart();
                if (0 != c.length) {
                    switch (a) {
                        case "FlatItemsSource":
                            return c.GanttChart("option", "FlatItemsSource", b);
                        case "TaskStartTimeProperty":
                            return c.GanttChart("option", "TaskStartTime", b);
                        case "ParentTaskStartTimeProperty":
                            return c.GanttChart("option", "ParentTaskStartTime", b);
                        case "TaskEndTimeProperty":
                            return c.GanttChart("option",
                                "TaskEndTime", b);
                        case "ParentTaskEndTimeProperty":
                            return c.GanttChart("option", "ParentTaskEndTime", b)
                    }
                    a in c.GanttChart("option") && (c.GanttChart("option", a) == b && "BaseTimeScaleType" != a || c.GanttChart("option", a, b))
                }
            }
        }, b);
    e.extend(e.radiantq.GanttControl.prototype, a);
    e.extend(e.radiantq.FlexyGantt.prototype, c);
    e.extend(e.radiantq.GanttChart.prototype, b);
    e.extend(e.radiantq.rowbase.prototype, b);
    a = e.extend({
        baseCreate: function() {
            e.radiantq.rowbase.prototype._create.apply(this, arguments)
        },
        baseSetOption: function() {
            e.radiantq.rowbase.prototype._setOption.apply(this,
                arguments)
        },
        baseDestroy: function() {
            e.radiantq.rowbase.prototype.destroy.apply(this, arguments)
        }
    }, b);
    e.extend(e.radiantq.hoverable.prototype, a);
    e.extend(e.radiantq.GanttRowselectable.prototype, a);
    e.extend(e.radiantq.GanttRows.prototype, b);
    e.extend(e.radiantq.GanttTaskItemBar.prototype, b);
    e.extend(e.radiantq.GanttTaskItemsControl.prototype, b);
    e.extend(e.radiantq.taskbar.prototype, b);
    e.extend(e.radiantq.TasksListControl.prototype, b);
    e.extend(e.radiantq.ScaleRendererBase.prototype, b);
    e.extend(e.radiantq.ScalePanelRendererBase.prototype,
        b);
    a = e.extend({
        baseCreate: function() {
            e.radiantq.ScaleRendererBase.prototype._create.apply(this, arguments)
        },
        baseSetOption: function() {
            e.radiantq.ScaleRendererBase.prototype._setOption.apply(this, arguments)
        },
        baseDestroy: function() {
            e.radiantq.ScaleRendererBase.prototype.destroy.apply(this, arguments)
        },
        ScaleRendererBaseUpdateTimeUnits: function() {
            e.radiantq.ScaleRendererBase.prototype.UpdateTimeUnits.apply(this, arguments)
        }
    }, b);
    e.extend(e.radiantq.TimeSpanHeader.prototype, a);
    c = e.extend({
        baseCreate: function() {
            e.radiantq.ScalePanelRendererBase.prototype._create.apply(this,
                arguments)
        },
        baseSetOption: function() {
            e.radiantq.ScalePanelRendererBase.prototype._setOption.apply(this, arguments)
        },
        baseDestroy: function() {
            e.radiantq.ScalePanelRendererBase.prototype.destroy.apply(this, arguments)
        },
        ScaleRendererBaseUpdateTimeUnits: function() {
            e.radiantq.ScalePanelRendererBase.prototype.UpdateTimeUnits.apply(this, arguments)
        }
    }, b);
    e.extend(e.radiantq.TimeSpanHeaders.prototype, c);
    e.extend(e.radiantq.SpecialLines.prototype, a);
    e.extend(e.radiantq.GanttDependencyControl.prototype, b);
    Binder.ActivityTimeBinder =
        function(a, b, c, e) {
            a.DateTimePicker({
                onBlur: function(b) {
                    b = a.DateTimePicker("getDate");
                    e.Activity_M().PreferredStartTime_M(b);
                    e.Activity_M().StartTime_M(b)
                }
            });
            a.DateTimePicker("setDate", c.getter(e))
    };
    Binder.ResourcePickerBinder = function(a, b, c, h) {
        b = [];
        c = h.activity.Assignments_M();
        for (var k = 0; k < c.length; k++) b.push(c[k]._resource);
        a.ResourcePicker({
            source: h.activity.Model.GanttResources_M(),
            SelectedResources: b,
            close: function() {
                var a = e(this).data("ResourcePicker"),
                    b = a.selectedItems;
                !0 == a.IsChanged() && RadiantQ.Gantt.ValueConverters.ConverterUtils.ConvertSelectedResourcesToAssignments(b,
                    h.activity.Assignments_M())
            }
        })
    }
})(jQuery);
(function(e) {
    var b = function() {
        VW.Grid.GridUI.apply(this, arguments);
        this.initFields = function() {
            this.fields = [];
            this.fields.push("Activity.IndentLevel");
            this.fields.push("Activity.CumulativeEffort");
            this.fields.push("Activity.IsExpanded");
            this.fields.push("IndentWidth")
        };
        this.Refresh = function() {
            var a = this.rowHtml();
            this.appendInnerHtml(this.$tbody, a);
            0 != this.FrozenColumnCount && (a = this.rowHtml(null, !0), this.appendInnerHtml(this.$frozenTbody, a));
            this.Loaded();
            this.updateGridHeight();
            this.updateScrollPadding();
            this.updateGridWidth();
            this.triggerRefresh();
            this.CreateColumnEnhancerplugIn();
            this._updateRowDragDropTracker()
        };
        this.triggerRefresh = function() {
            this.element.trigger("refresh")
        };
        this.OnDropped = function(a) {
            this.options.Parent.SelectedRowsDropped.raise({
                DroppedItems: a
            })
        };
        this.CanBeginDrag = function(a) {
            a = {
                DragRowIndex: a,
                Cancel: !1
            };
            this.options.Parent.BeforeRowsDragStart.raise(a);
            return a.Cancel ? !1 : !0
        };
        this.CanDrop = function(a, b) {
            var c = {
                DragOverRowIndex: a,
                DropAsChildren: b,
                Cancel: !1
            };
            this.options.Parent.SelectedRowsDrag.raise(c);
            return !0 == c.Cancel
        };
        this.OnDrop = function(a, b, c, e) {
            a = {
                FirstSelectedItem: a,
                SelectedItemsCount: b,
                DestinationIndex: c,
                DropAsChildren: e,
                Cancel: !1
            };
            this.options.Parent.SelectedRowsDrop.raise(a);
            return !1 == a.Cancel
        };
        null;
        this._updateRowDragDropTracker = function() {
            !1 != this._loaded && (this.options.CanUserReorderRows ? null == this._dndTracker && (this._dndTracker = new RadiantQ.Gantt.RowDragDropTracker(this)) : null != this._dndTracker && (this._dndTracker.Dispose(), this._dndTracker = null))
        };
        this.tmpl = function(a) {
            var b = !0 ==
                a ? this.generateTemplate(this.FrozenColumn, a) : this.generateTemplate(this.Column),
                c = "<tr class='${data._isSelected ? 'rq-row-selected " + window.radiantQclasses.selectionClass + " rq-grid-row' :'rq-grid-row'}' data-uid='${data.uid}' style='height:" + this.options.RowHeight + "px;font-weight: ${data.IsParent_M() ? 'bold' :'normal' }'>",
                c = c + b + "</tr>",
                e = "<tr class='${data._isSelected ? 'rq-row-selected " + window.radiantQclasses.selectionClass + " rq-grid-row rq-grid-alternative-background' :'rq-grid-row  rq-grid-alternative-background'}' data-uid='${data.uid}' style='height:" +
                    this.options.RowHeight + "px;font-weight: ${data.IsParent_M() ? 'bold' :'normal' }'>",
                e = e + b + "</tr>";
            this.renderTemplate(c, e, a)
        };
        this.renderTemplate = function(a, b, c) {
            c ? (this.frozenRowTemplate = Template(a), this.frozenAltRowTemplate = Template(b)) : (this.rowTemplate = Template(a), this.altRowTemplate = Template(b))
        };
        this.list = [];
        this.viewList = new RadiantQ.Gantt.Dictionary;
        this.sourceList = new RadiantQ.Gantt.Dictionary;
        this.dataPropertyChange = function(a, b) {
            var c = "" != this.PropertyName ? this.PropertyName + "." + b.PropertyName :
                b.PropertyName; - 1 != e.inArray(c, this.context.fields) && this.context.propertyChanged(this.View, c)
        };
        this.GetGC = function() {
            return this.element.parents("div.rq-ganttBase").data("GanttControl")
        };
        this.subscribeEvents = function() {
            var a = this,
                b = a.options,
                c = 0,
                f = a.options,
                h = a.uiGridBody[0].scrollHeight,
                k = a.uiGridBody.height();
            a.uiGridBody.scroll(function(n) {
                var l = e(this).height(),
                    m = a.uiGridBody.scrollLeft();
                a.uiGridBody.scrollLeft(m);
                m = this.scrollTop;
                a.uiFrozenGridBody.scrollTop(m);
                if (b.UseGridVirtualization &&
                    (m != c || h != this.scrollHeight || k != l)) {
                    var p = a.rowHtml();
                    a.appendInnerHtml(a.$tbody, p);
                    0 != a.FrozenColumnCount && (p = a.rowHtml(null, !0), a.appendInnerHtml(a.$frozenTbody, p));
                    a.Loaded()
                }
                m != c && 0 < f.Parent.VerticalScrollEvent.fn.length && f.Parent.VerticalScrollEvent.raise(n);
                h = this.scrollHeight;
                k = l;
                c = m;
                0 < a.AfterGridScroll.fn.length && a.AfterGridScroll.raise(self)
            })
        };
        this.createContextMenu = function(a) {
            if (e.isFunction(RadiantQ.ContextMenuImpl.ContextMenu)) {
                var b = [{
                    keyName: "Indent",
                    name: window.RadiantQ_IndentString,
                    icon: "Indent"
                }, {
                    keyName: "Outdent",
                    name: window.RadiantQ_OutdentString,
                    icon: "Outdent"
                }],
                    c = new RadiantQ.ContextMenuImpl.ContextMenu("#" + this.element[0].id + " table.ui-grid-body-table tr", a[0].parentElement);
                c.AddNewItems(b);
                c.ItemClicked.subscribe(function(a, b) {
                    var d = this.element.parents(".rq-ganttBase").data("GanttControl"),
                        c = d.SelectedItems;
                    if (null != c) {
                        if ("Indent" == a)
                            if (this.IsUndoEnabled()) {
                                var e = c[0];
                                null != e && d.CanIndent(e) && (e = new RadiantQ.Gantt.IndentAction(d, e.Activity_M()), d.ActionManager.RecordAction(e))
                            } else
                                for (e =
                                    0; e < c.length; e++) d.Indent(c[e]);
                        if ("Outdent" == a)
                            if (this.IsUndoEnabled()) e = c[0], null != e && 0 < e.IndentLevel_M() && (c = new RadiantQ.Gantt.OutdentAction(d, e.Activity_M()), d.ActionManager.RecordAction(c));
                            else
                                for (e = c.length - 1; 0 <= e; e--) d.Outdent(c[e])
                    }
                }.bind(this));
                var f = this;
                c.BeforeContextMenu.subscribe(function(a, b) {
                    e(b.target).hasClass("editor") ? b.Cancel = !0 : c.Items.Indent && c.Items.Outdent && (f.options.Parent.options.IsReadOnly ? (c.Items.Indent.disabled = !0, c.Items.Outdent.disabled = !0) : (c.Items.Indent.disabled = !1, c.Items.Outdent.disabled = !1))
                });
                this.options.Parent.TableContextMenu = c
            }
        };
        this.closeCell = function() {
            if (this.editedElement) {
                var a = this.activeElement();
                !0 == e.contains(this.editedElement[0], a) && this.element.focus();
                if (null == this.editedElement) return;
                for (var b = this.editedElement.index(), b = this.GetCellIndex(this.editedElement), c = this.editedElement.closest("tr"), a = this.GetDataFromRow(c), f = c[0].rowIndex, c = c.closest("table").hasClass("frozenGanttTable") ? this.FrozenColumn[b] : this.Column[b], b = this.columnField(c),
                        c = [], h = this.Column, k = this.FrozenColumn, n = 0; n < h.length; n++) b == this.columnField(h[n]) && c.push(h[n]);
                for (n = 0; n < k.length; n++) b == this.columnField(k[n]) && c.push(k[n]);
                for (n = 0; n < c.length; n++) {
                    var l = c[n],
                        b = this.createColumnTemplate(l, !0),
                        m = Template(b)(a),
                        b = h.indexOf(l); - 1 == b ? (b = k.indexOf(l), l = this.frozenTable.find("tr")) : l = this.table.find("tr");
                    this.replaceTmpl(l, b, f, m, a)
                }
                a = this.CreateAction(this.ccis);
                this.AddActionToManager(a)
            }
            this.docClickEventProxy && (e(document).unbind("mousedown", this.docClickEventProxy),
                this.docClickEventProxy = null);
            this.editedCell = [];
            this.editedElement = null
        };
        this.ccis;
        this.editCell = function(a) {
            var b = null,
                c = a.closest("tr"),
                f = c.data("uid"),
                f = this.GuidList[f];
            if (void 0 == f) return !1;
            "incell" == this.options.editmode && this.closeCell();
            b = this.GetCellIndex(a);
            b = a.closest("table").hasClass("frozenGanttTable") ? this.FrozenColumn[b] : this.Column[b];
            if (null != this.options.startEdit && !1 == this.options.startEdit(a, f, b)) return !1;
            if ("popup" == this.options.editmode && !0 == f.IsSelected() && void 0 == b.command) return this.cacheValues(f),
            this.createPopupEditor(f), !0;
            if (this.isEditable(f, b)) this.cacheValues(f), this.ccis = new RadiantQ.Gantt.CellChangeInfo(b.field, f, b.field), this.editCellbyData(a, b, f, c);
            else return !1;
            null == this.docClickEventProxy && this.editedElement && "incell" == this.options.editmode && (this.docClickEventProxy = e.proxy(this.docClickEven, this), e(document).bind("mousedown", this.docClickEventProxy));
            return !0
        };
        this.isEditable = function(a, b) {
            if (b.command || !1 == a.IsSelected()) return !1;
            var c = this.columnField(b); - 1 != c.indexOf("_M()") &&
                (c = c.replace(this.checkTag, ""));
            return !0 == a.IsReadOnly && "Activity.ActivityName" != c || b.beginEdit && !1 == b.beginEdit(a, b, this) || a._isParent && ("Activity.PredecessorIndexString" != c && "Activity.ActivityName" != c && "Activity.Assignments" != c && (void 0 == b.isParentEditable || !1 == b.isParentEditable) || !1 == b.isParentEditable) ? !1 : !1 == b.iseditable ? !1 : !0
        };
        this.IsChangeTrackingEnabled = function() {
            return !0
        };
        this.CreateAction = function(a) {
            var b = a.Source_M(),
                b = b.Activity_M ? b.Activity_M() : b,
                c = a.Property_M(),
                e = this.GetGC(),
                h =
                    RadiantQ.Gantt;
            return "StartTime" == c ? new h.SetStartTimeAction(e, b, a.GetCurrentValue(), null == a.Tag ? a.GetOldValue() : a.Tag, a.GetOldValue(), !0) : "EndTime" == c ? new h.SetEndTimeAction(e, b, a.GetCurrentValue(), null == a.Tag ? a.GetOldValue() : a.Tag, a.GetOldValue(), !0) : 0 == c.indexOf("Activity.") ? new h.GenericActivityChangeActionInGrid(e.Model, b.ID_M(), c, a.GetOldValue(), a.GetCurrentValue(), !0) : new h.GenericActivityViewChangeActionInGrid(e, e.Model, b.ID_M(), c, a.GetOldValue(), a.GetCurrentValue(), !0)
        };
        this.AddActionToManager =
            function(a) {
                this.GetGC().ActionManager.RecordAction(a)
        };
        this.OnBeforeDragStart = function(a, b) {
            var c = this.options.Parent,
                e = c.$ganttWrapper.data("GanttRowselectable");
            this._flattenSelection();
            return c.OnBeforeDragStart(a, e.selectedItems.length)
        };
        this._flattenSelection = function() {
            var a = this.options.Parent,
                b = this.options,
                c = a.$ganttWrapper.data("GanttRowselectable"),
                e = a.SelectedItems,
                h = this.GetRowFromData(e[0]),
                k = this.GetRowFromData(e[e.length - 1]);
            a.options.UseVirtualization ? (k = e[0].DisplayIndex_M(), h =
                e[e.length - 1].DisplayIndex_M()) : (k = k[0].rowIndex, h = h[0].rowIndex);
            a.options.SelectionMode == RadiantQ.Gantt.SelectionMode.Single && window.console && console.error("Dragging feature requires selecting multiple rows, but the SelectionMode is set to Single. This is not supported. Set SelectionMode to Multiple or turn off dragging feature.");
            if (e.length < k - h + 1)
                for (a = h; a <= k; a++)!1 == c.selectedItems.containsValue(b.source[a]) && c.selectedItems.add(b.source[a])
        };
        this.MoveRows = function(a, b, c) {
            this.MoveRows(a, b, c,
                null, void 0, void 0)
        };
        this.DoMoveRows = function(a, b, c, e) {
            var h = this.GetGC();
            a = new RadiantQ.Gantt.MoveRowsAction(h, a, b, c, e);
            h.ActionManager.RecordAction(a)
        };
        this.MoveRows = function(a, b, c, f, h, k) {
            this.ignoreChangs = !0;
            var n = null;
            !0 == this.options.UseGridVirtualization && (h = this.GetGC(), n = e(".rq-gc-rowsParent", h.element).data("GanttTaskItemsControl"), this.ignorecollectionChangs = !0, n.ignorecollectionChangs = !0);
            var l = new RadiantQ.Gantt.Utils.DelayUpdates,
                m = this.GetGC();
            h = {
                value: 0
            };
            k = {
                value: 0
            };
            m.MoveRows(a, b,
                c, f, h, k);
            0 < h.value && this.PostMove(a, h, k);
            l.Dispose();
            this.ignorecollectionChangs = this.ignoreChangs = !1;
            !0 == this.options.UseGridVirtualization && n && (n.ignorecollectionChangs = !1, n.RefreshUI(), this.Refresh())
        };
        this.PostMove = function(a, b, c) {
            var e = this.options.datasource;
            c.value++;
            return e.Move(a, b.value, c.value)
        };
        this.InsertRowsAsChild = function(a, b, c) {
            this.InsertRowsAsChildInternal(a, b, c, !1)
        };
        this.DoInsertRowsAsChild = function(a, b, c) {
            this.InsertRowsAsChildInternal(a, b, c, !0)
        };
        this.IsUndoEnabled = function(a) {
            if (0 ==
                arguments.length) {
                var b = this.GetGC();
                return null != b.Model && !0 == b.ActionManager.EnableRecordingActions
            }
        };
        this.EnableDropAsChild = function(a) {
            var b = this.GetGC();
            if (b) {
                if (0 == arguments.length) return this.IsUndoEnabled() ? !1 : b.options.EnableDropAsChild;
                b.options.EnableDropAsChild = a
            }
        };
        this.InsertRowsAsChildInternal = function(a, b, c, e) {
            var h = new RadiantQ.Gantt.Utils.DelayUpdates,
                k = this.GetGC(),
                n = {
                    value: 0
                }, l = {
                    value: 0
                }, m = k.ActivityViews[c];
            if (m) {
                if (0 < m.Activity_M().ChildActivities_M().length && !0 == m.IsExpanded_M()) {
                    c =
                        k.GetIndexOfLastDescendant(m);
                    if (c >= a && c <= a + b - 1) return;
                    e ? (k = m.Activity_M().DisplayIndex_M(), this.DoMoveRows(a, b, c, k)) : (k.MoveRows(a, b, c, m, n, l), 0 < n.value && this.PostMove(a, n, l))
                } else if (k.MoveRows(a, b, c, null, n, l), 0 < n.value) {
                    a = this.PostMove(a, n, l);
                    b = {};
                    for (e = 0; e < n.value; e++) b[e] = k.ActivityViews[e + a].IndentLevel_M();
                    for (e = l = a; e < a + n.value; e++) m = k.ActivityViews.length, k.ActivityViews[l].IndentLevel_M() == b[e - a] ? (k.Indent(k.ActivityViews[l]), m == k.ActivityViews.length ? l++ : e += m - k.ActivityViews.length - 1) : l++
                }
                h.Dispose()
            }
        };
        this.cancelChanges = function(a) {
            for (var b in this.Cache)
                if (-1 != this.changeField.indexOf(b)) {
                    var c = Template.getter(b, a);
                    c.AsText_M ? c.AsText_M() != this.Cache[b] && c.AsText_M(this.Cache[b]) : ("Activity.StartTime" == b && Template.setter("Activity.PreferredStartTime", a, this.Cache[b]), c != this.Cache[b] && Template.setter(b, a, this.Cache[b]))
                }
            this.changeField = []
        };
        this.cacheValues = function(a) {
            this.Cache = {};
            for (var b = this.options.columns, c = 0; c < b.length; c++) {
                var e = this.columnField(b[c]),
                    h = Template.getter(e, a);
                null != h &&
                    h.AsText_M && (h = h.AsText_M());
                this.Cache[e] = h; - 1 != e.indexOf("_M()") && (e = e.replace(this.checkTag, ""), this.Cache[e] = h)
            }
        };
        this.renderRowHtml = function(a, b, c, e, h, k, n) {
            var l = this.options.RowHeight,
                m = -l,
                p = this.options.datasource,
                q = this.uiGridBody,
                s = this.options.UseGridVirtualization,
                r = 0;
            if (!p) return "";
            p instanceof VW.Grid.GridModel && (p = p.data);
            a || e.empty();
            s && !a && (e = q.scrollTop(), q = this.options.Parent.GetStartRowIndexAndTop(p, e), r = q.startPosition, q = q.top, h[0].style.setProperty ? h[0].style.setProperty("margin-top",
                e - q + "px", "important") : h[0].style.setAttribute("margin-top", e - q + "px", "important"));
            this.renderHeight = n;
            h = this.guid;
            e = this.GuidList;
            q = "";
            if (null != k) {
                var t = this.options.Parent.GetScrollableContentHeight(p);
                k.height(t)
            }
            this.unsubscribeAllObjectChanges();
            for (k = r; k < p.length && !(s && !a && m >= n); k++) r = p[k], this.subscribeObjectChanges(r), void 0 == r.uid ? (t = h(), r.uid = t, e[t] = r) : e[r.uid] = r, q = this.options.EnableAlternativeRowBackground ? 0 == k % 2 ? q + b(r) : q + c(r) : q + b(r), m += r.RowHeight ? r.RowHeight : l;
            return q
        };
        return this
    };
    window["VW.Grid.GridUI"] && (b.prototype = VW.Grid.GridUI);
    e.fn.GanttTable = function(a) {
        a = new b(a);
        a._create(this);
        return a
    };
    var c = function() {
        VW.Grid.GridUI.apply(this, arguments);
        this.Refresh = function() {
            var a = this.rowHtml();
            this.appendInnerHtml(this.$tbody, a);
            0 != this.FrozenColumnCount && (a = this.rowHtml(null, !0), this.appendInnerHtml(this.$frozenTbody, a));
            this.Loaded();
            this.updateGridHeight();
            this.updateScrollPadding();
            this.updateGridWidth();
            this.triggerRefresh();
            this.CreateColumnEnhancerplugIn();
            this._updateRowDragDropTracker()
        };
        this.triggerRefresh = function() {
            this.element.trigger("refresh")
        };
        this.initFields = function() {
            this.fields = [];
            this.fields.push("HierarchicalItem.IsExpanded");
            this.fields.push("HierarchicalItem.CanShowCue")
        };
        this.list = [];
        this.viewList = new RadiantQ.Gantt.Dictionary;
        this.sourceList = new RadiantQ.Gantt.Dictionary;
        this.dataPropertyChange = function(a, b) {
            var c = "" != this.PropertyName ? this.PropertyName + "." + b.PropertyName : b.PropertyName; - 1 != e.inArray(c, this.context.fields) ? this.context.propertyChanged(this.View, c) :
                this.context.propertyChanged(a, c)
        };
        this.createContextMenu = function(a) {
            e.isFunction(RadiantQ.ContextMenuImpl.ContextMenu) && void 0 == this.options.Parent.TableContextMenu && (a = new RadiantQ.ContextMenuImpl.ContextMenu("#" + a[0].id + " .rq-grid-row", e("#" + a[0].id).parent()), a.AddNewItems([]), this.options.Parent.TableContextMenu = a)
        };
        null;
        this._updateRowDragDropTracker = function() {
            !1 != this._loaded && (this.options.CanUserReorderRows ? null == this._dndTracker && (this._dndTracker = new RadiantQ.Gantt.RowDragDropTracker(this)) :
                null != this._dndTracker && (this._dndTracker.Dispose(), this._dndTracker = null))
        };
        this.OnDropped = function(a) {
            this.options.Parent.SelectedRowsDropped.raise({
                DroppedItems: a
            })
        };
        this.CanBeginDrag = function(a) {
            a = {
                DragRowIndex: a,
                Cancel: !1
            };
            this.options.Parent.BeforeRowsDragStart.raise(a);
            return a.Cancel ? !1 : !0
        };
        this.CanDrop = function(a, b) {
            var c = {
                DragOverRowIndex: a,
                DropAsChildren: b,
                Cancel: !1
            };
            this.options.Parent.SelectedRowsDrag.raise(c);
            return !0 == c.Cancel
        };
        this.OnDrop = function(a, b, c, e, h, k) {
            a = {
                FirstSelectedItem: a,
                SelectedItemsCount: b,
                DestinationIndex: c,
                DropAsChildren: e,
                Cancel: !1,
                isInLastRow: h,
                isInLastQuarter: k
            };
            this.options.Parent.SelectedRowsDrop.raise(a);
            return !1 == a.Cancel
        };
        this.DoInsertRowsAsChild = function(a, b, c) {};
        this.OnBeforeDragStart = function(a, b) {
            for (var c = this.options.Parent.$ganttWrapper.data("GanttRowselectable"), e = [], h = 0; h < c.selectedItems.length; h++) e.push(c.selectedItems[h]);
            return e
        };
        this.IsChangeTrackingEnabled = function() {
            return !1
        };
        this.AddActionToManager = function(a) {};
        this.DoMoveRows = function(a,
            b, c) {};
        this.tmpl = function(a) {
            var b = null != this.options.Parent.options.RowHeightBinding,
                c = !0 == a ? this.generateTemplate(this.FrozenColumn) : this.generateTemplate(this.Column),
                e = "<tr class='${data._isSelected ? 'rq-row-selected " + window.radiantQclasses.selectionClass + " rq-grid-row' :'rq-grid-row'}' data-uid='${data.uid}' style='height:",
                e = !1 == b ? e + this.options.RowHeight : e + ("${data.RowHeight ? data.RowHeight :" + this.options.RowHeight + " }"),
                e = e + "px;font-weight: ${data.IsParentType() ? 'bold' :'normal' }'>" +
                    c,
                e = e + "</tr>",
                h = "<tr class='${data._isSelected ? 'rq-row-selected  " + window.radiantQclasses.selectionClass + " rq-grid-row rq-grid-alternative-background' :'rq-grid-row  rq-grid-alternative-background'}' data-uid='${data.uid}' style='height:",
                h = !1 == b ? h + this.options.RowHeight : h + ("${data.RowHeight ? data.RowHeight :" + this.options.RowHeight + " }"),
                h = h + "px;font-weight: ${data.IsParentType() ? 'bold' :'normal' }'>" + c,
                h = h + "</tr>";
            this.renderTemplate(e, h, a)
        };
        this.renderTemplate = function(a, b, c) {
            c ? (this.frozenRowTemplate =
                Template(a), this.frozenAltRowTemplate = Template(b)) : (this.rowTemplate = Template(a), this.altRowTemplate = Template(b))
        };
        this.subscribeEvents = function() {
            var a = this,
                b = a.options,
                c = 0,
                f = a.options,
                h = a.uiGridBody[0].scrollHeight,
                k = a.uiGridBody.height();
            a.uiGridBody.scroll(function(n) {
                var l = e(this).height(),
                    m = a.uiGridBody.scrollLeft();
                a.uiGridBody.scrollLeft(m);
                m = this.scrollTop;
                a.uiFrozenGridBody.scrollTop(m);
                if (b.UseGridVirtualization && (m != c || h != this.scrollHeight || k != l)) {
                    var p = a.rowHtml();
                    a.appendInnerHtml(a.$tbody,
                        p);
                    0 != a.FrozenColumnCount && (p = a.rowHtml(null, !0), a.appendInnerHtml(a.$frozenTbody, p));
                    a.Loaded()
                }
                m != c && 0 < f.Parent.VerticalScrollEvent.fn.length && f.Parent.VerticalScrollEvent.raise(n);
                h = this.scrollHeight;
                k = l;
                c = m
            })
        };
        this.isEditable = function(a, b) {
            return !1 == a.IsSelected() ? !1 : !1 == b.iseditable ? !1 : !0
        };
        this.cancelChanges = function(a) {
            for (var b in this.Cache)
                if (-1 != this.changeField.indexOf(b)) {
                    var c = Template.getter(b, a);
                    c.AsText_M ? c.AsText_M() != this.Cache[b] && c.AsText_M(this.Cache[b]) : ("Activity.StartTime" ==
                        b && Template.setter("Activity.PreferredStartTime", a, this.Cache[b]), c != this.Cache[b] && Template.setter(b, a, this.Cache[b]))
                }
            this.changeField = []
        };
        this.cacheValues = function(a) {
            this.Cache = {};
            for (var b = this.options.columns, c = 0; c < b.length; c++) {
                var e = this.columnField(b[c]),
                    h = Template.getter(e, a);
                null != h && h.AsText_M && (h = h.AsText_M());
                this.Cache[e] = h; - 1 != e.indexOf("_M()") && (e = e.replace(this.checkTag, ""), this.Cache[e] = h)
            }
        };
        this.renderRowHtml = function(a, b, c, e, h, k, n) {
            var l = this.options.RowHeight,
                m = -l,
                p = this.options.datasource,
                q = this.uiGridBody,
                s = this.options.UseGridVirtualization,
                r = 0;
            if (!p) return "";
            p instanceof VW.Grid.GridModel && (p = p.data);
            a || e.empty();
            s && !a && (e = q.scrollTop(), q = this.options.Parent.GetStartRowIndexAndTop(p, e), r = q.startPosition, q = q.top, h[0].style.setProperty ? h[0].style.setProperty("margin-top", e - q + "px", "important") : h[0].style.setAttribute("margin-top", e - q + "px", "important"));
            this.renderHeight = n;
            h = this.guid;
            e = this.GuidList;
            q = "";
            if (null != k) {
                var t = this.options.Parent.GetScrollableContentHeight(p);
                k.height(t)
            }
            this.unsubscribeAllObjectChanges();
            for (k = r; k < p.length && !(s && !a && m >= n); k++) r = p[k], this.subscribeObjectChanges(r), void 0 == r.uid ? (t = h(), r.uid = t, e[t] = r) : e[r.uid] = r, q = this.options.EnableAlternativeRowBackground ? 0 == k % 2 ? q + b(r) : q + c(r) : q + b(r), m += r.RowHeight ? r.RowHeight : l;
            return q
        };
        return this
    };
    window["VW.Grid.GridUI"] && (c.prototype = VW.Grid.GridUI);
    e.fn.FlexyGrid = function(a) {
        a = new c(a);
        a._create(this);
        return a
    };
    RadiantQ.Gantt.CellChangeInfo = function(a, b, c) {
        this._changeLabel = a;
        this._bindingProp = c;
        this._dataSource = b;
        this._oldValue = this.GetPropValue(this._dataSource,
            this._bindingProp)
    };
    RadiantQ.Gantt.CellChangeInfo.prototype._oldValue = null;
    RadiantQ.Gantt.CellChangeInfo.prototype._bindingProp = null;
    RadiantQ.Gantt.CellChangeInfo.prototype._dataSource = null;
    RadiantQ.Gantt.CellChangeInfo.prototype._changeLabel = null;
    RadiantQ.Gantt.CellChangeInfo.prototype.Tag = null;
    RadiantQ.Gantt.CellChangeInfo.prototype.Label_M = function(a) {
        if (0 == arguments.length) return this._changeLabel
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.Source_M = function(a) {
        if (0 == arguments.length) return this._dataSource
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.Property_M = function(a) {
        if (0 == arguments.length) return this._bindingProp
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.CellChangeInfo.prototype, "Label", {
        get: function() {
            return this._changeLabel
        }
    }), Object.defineProperty(RadiantQ.Gantt.CellChangeInfo.prototype, "Source", {
        get: function() {
            return this._dataSource
        }
    }), Object.defineProperty(RadiantQ.Gantt.CellChangeInfo.prototype, "Property", {
        get: function() {
            return this._bindingProp
        }
    }));
    RadiantQ.Gantt.CellChangeInfo.prototype.GetCurrentValue =
        function() {
            return this.GetPropValue(this._dataSource, this._bindingProp)
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.GetOldValue = function() {
        return this._oldValue
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.GetPropValue = function(a, b) {
        var c = b.split("."),
            e = c = 1 < c.length ? c[1] : c[0],
            h = c.indexOf("_"); - 1 != h && (e = c.slice(0, h), c = c.slice(0, h + 2));
        h = a;
        "PredecessorIndexString" != c && "PredecessorIndexString_M" != c && (h = h.Activity_M ? a.Activity_M() : a);
        h = c = "function" == typeof h[c] ? h[c]() : h[c];
        "Assignments" == e && (h = jQuery.extend(!0, {}, c));
        return h
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.SetNestedPropValue = function(a, b, c) {
        a = a.Activity_M ? a.Activity_M() : a;
        b = b.split(".");
        var e = b = 1 < b.length ? b[1] : b[0],
            h = b.indexOf("_"); - 1 != h && (e = b.slice(0, h), b = b.slice(0, h + 2));
        "StartTime" == e && a.PreferredStartTime_M(c);
        "Assignments" != e ? "function" == typeof a[b] ? a[b](c) : a[b] = c : (c = c.AsText_M(), "function" == typeof a[b] ? a[b]().AsText_M(c) : a[b].AsText_M(c))
    };
    RadiantQ.Gantt.CellChangeInfo.prototype.HasChanged = function(a, b, c) {
        a = this.GetOldValue();
        b = this.GetCurrentValue();
        return null == a ? null != b : a !== b
    }
})(jQuery);
(function() {
    RadiantQ.ProjectModel = {};
    var e = RadiantQ.ProjectModel;
    e.Utils = function() {
        e.Utils = function() {};
        return e.Utils
    }();
    e.Utils.toString = function(b) {
        switch (b) {
            case RadiantQ.Gantt.DependencyType.FinishToFinish:
                return "0";
            case RadiantQ.Gantt.DependencyType.FinishToStart:
                return "1";
            case RadiantQ.Gantt.DependencyType.StartToFinish:
                return "2";
            case RadiantQ.Gantt.DependencyType.StartToStart:
                return "3";
            default:
                return "1"
        }
    };
    e.Utils.effortToString = function(b) {
        var c = "";
        if (b >= RQTimeSpan.Zero_M()) var c = c + "PT",
        a = parseInt(Math.floor(b.getTotalHours())), c = c + (a.toString() + "H"), c = c + (b.minutes_M().toString() + "M"), c = c + (b.seconds_M().toString() + "S");
        return c
    };
    e.Utils.toLagString = function(b) {
        return (10 * b.getTotalMinutes()).toString()
    };
    e.Utils.tenthOfAMinuteToHours = function(b) {
        var c = 0,
            c = parseFloat(b);
        return c / 600
    };
    e.Utils.toDepType = function(b) {
        switch (b.toString()) {
            case "0":
                return RadiantQ.Gantt.DependencyType.FinishToFinish;
            case "1":
                return RadiantQ.Gantt.DependencyType.FinishToStart;
            case "2":
                return RadiantQ.Gantt.DependencyType.StartToFinish;
            case "3":
                return RadiantQ.Gantt.DependencyType.StartToStart;
            default:
                return RadiantQ.Gantt.DependencyType.FinishToStart
        }
    };
    e.Utils.toTimeOfDay = function(b) {
        b = b.split(":");
        return ts = new RQTimeSpan(0, parseInt(b[0]), parseInt(b[1]), parseInt(b[2]))
    };
    e.Utils.convertResourceTextToAssignments = function(b, c) {
        var a = new e.AssignmentsList;
        if (null != b.AssignedResources && "" != b.AssignedResources)
            for (var d = b.AssignedResources.split(","), g = 0; g < d.length; g++) {
                var f = d[g],
                    h = f,
                    k = 100; - 1 != h.indexOf("[") && (k = RadiantQ.Gantt.ValueConverters.ConverterUtils.ParseAllocUnitsString(h.substring(f.indexOf("["))),
                        h = f.substring(0, h.indexOf("[")), h = h.Trim());
                f = c.ResourceList.getResourceByName(h);
                null == f && (h = parseInt(h), null != h && void 0 != h && (f = c.ResourceList.getResourceByID(h)));
                null != f && (0 == a.getAssignmentByResourceID(f.ID).length ? (h = c.createAssignment(), h.ResourceUID = f.ID, h.TaskUID = b.ID, h.AllocationUnits = parseInt(k), a.push(h)) : a.push(a.getAssignmentByResourceID(f.ID)[0]))
            }
        return a
    }
})();
(function() {
    var e = RadiantQ.ProjectModel,
        b = RadiantQ.Gantt;
    e.Project = function(a) {
        this.Model = null;
        this.usedtaskid = 0;
        this._calendarCollection = new e.ProjectCalendarCollection;
        this.names = new e.XElementSubElementNames;
        this.names.IDField = "UID";
        this.names.TaskNameField = "Name";
        this.names.IndentLevelField = "OutlineLevel";
        this.names.StartDateField = "Start";
        this.names.EndDateField = "Finish";
        this.names.EffortField = "Work";
        this.names.DurationField = "Duration";
        this.names.PredecessorIndicesField = "PredecessorLink";
        this.names.PreferredStartTimeField =
            "ConstraintDate";
        this.names.ProgressPercentField = "PercentComplete";
        this.names.TypeField = "Type";
        this.names.WBSField = "WBS";
        a.Project["@xmlns"] = a.Project.xmlns;
        delete a.Project.xmlns;
        this.xmlObject = a;
        this.projectElem = this.xmlObject.Project;
        this.tasksElem = this.projectElem.Tasks;
        this.assgnsElem = this.projectElem.Assignments;
        this._resourcesElem = this.projectElem.Resources;
        this.assgnsElem || (this.assgnsElem = {});
        this.assgnsElem.Assignment ? this.assgnsElem.Assignment && !this.assgnsElem.Assignment.length && (a = this.assgnsElem.Assignment,
            this.assgnsElem.Assignment = [], this.assgnsElem.Assignment.push(a)) : this.assgnsElem.Assignment = [];
        this.doc = this.projectElem;
        this._baseCalendarID = parseInt(this.projectElem.CalendarUID);
        this.ReadWBSIDsAsManual = !0;
        a = this.tasksElem;
        void 0 != a.Task && void 0 == a.Task.length && (this.projectElem.Tasks = {}, this.projectElem.Tasks.Task = [], this.projectElem.Tasks.Task.push(a.Task));
        this.tasksElem = this.projectElem.Tasks;
        this._list = new e.ProjectTaskList(this);
        this._assgnList = new e.AssignmentsList;
        this._resList = new e.ResourceList;
        var b = this._list;
        if (void 0 != this.tasksElem.Task) {
            a = 0;
            for (var c = this.tasksElem.Task; a < c.length; a++) {
                var f = c[a];
                0 == a ? this.topProjectTask = new e.TopProjectTask(f, this.names, this.projectElem, this) : (f = new e.ProjectTask(f, this.names, this.projectElem, this), b.push(f), f.ID > this.usedtaskid && (this.usedtaskid = f.ID))
            }
        }
        if (void 0 != this._resourcesElem)
            for (b = this._resourcesElem.Resource, a = 0; a < b.length; a++) c = new e.ProjectResource(b[a], this.doc), this._resList.push(c);
        if (void 0 != this.assgnsElem && void 0 != this.assgnsElem.Assignment)
            for (b =
                this.assgnsElem.Assignment, a = 0; a < b.length; a++)
                if (c = new e.ProjectAssignment(this, b[a], this.projectElem), f = c.TaskUID, -1 != f && null != this.Tasks.GetTaskByID(f)) {
                    var f = this.Tasks.GetTaskByID(f),
                        h = c.ResourceUID;
                    0 > h || null == this.ResourceList.getResourceByID(h) || (f.AssignedResources = this._assgnList.addResourceString(f.AssignedResources, c), this._assgnList.push(c))
                }
        for (a = 0; a < this.Tasks.length; a++) this.Tasks[a].IsInit = !0;
        this.Tasks.CollectionChanged.subscribe(this.Tasks_CollectionChanged, this);
        this._assgnList.CollectionChanged.subscribe(this._assgnList_CollectionChanged,
            this);
        this.ResourceList.CollectionChanged.subscribe(this.ResourceList_CollectionChanged, this);
        b = this.projectElem.Calendars.Calendar;
        for (a = 0; a < b.length; a++) c = new e.ProjectCalendar(b[a]), this._calendarCollection.push(c);
        this._defaultElems = {};
        null != this.TopProjectTask && (this.TopProjectTask.IsDirty = !1)
    };
    e.Project.prototype.getDefaultNode = function(a) {
        var b;
        void 0 != this._defaultElems ? b = this._defaultElems[a] : this._defaultElems = {};
        b || (this._defaultElems[a] = "");
        return b
    };
    e.Project.prototype.Tasks_CollectionChanged =
        function(a, b) {
            if ("Add" == b.Action)
                for (var c = 0; c < b.NewItems.length; c++) {
                    var e = b.NewItems[c],
                        h = this.Tasks.indexOf(e);
                    h != this.Tasks.length - 1 && 0 != this.Tasks.length || -1 != this.tasksElem.Task.indexOf(e.Element) ? -1 == this.tasksElem.Task.indexOf(e.Element) && this.tasksElem.Task.splice(h, 0, e.Element) : this.tasksElem.Task.push(e.Element)
                } else if ("Remove" == b.Action)
                    for (c = 0; c < b.OldItems.length; c++) e = this.tasksElem.Task.indexOf(b.OldItems[c].Element), 0 <= e && this.tasksElem.Task.splice(e, 1)
    };
    e.Project.prototype.ResourceList_CollectionChanged =
        function(a, b) {
            if ("Add" == b.Action)
                for (var c = 0; c < b.NewItems.length; c++) {
                    var e = b.NewItems[c],
                        h = this.ResourceList.indexOf(e);
                    h != this.ResourceList.length - 1 && 0 != this.ResourceList.length || -1 != this.ResourcesElem.Resource.indexOf(e.Element) ? -1 == this.ResourcesElem.Resource.indexOf(e.Element) && this.ResourcesElem.Resource.splice(h, 0, e.Element) : this.ResourcesElem.Resource.push(e.Element)
                } else if ("Remove" == b.Action)
                    for (c = 0; c < b.OldItems.length; c++) e = this.ResourcesElem.Resource.indexOf(b.OldItems[c].Element), this.ResourcesElem.Resource.splice(e,
                        1)
    };
    e.Project.prototype._assgnList_CollectionChanged = function(a, b) {
        if ("Add" == b.Action)
            for (var c = 0; c < b.NewItems.length; c++) {
                var e = b.NewItems[c],
                    h = this._assgnList.indexOf(e);
                h != this._assgnList.length - 1 && 0 != this._assgnList.length || -1 != this.assgnsElem.Assignment.indexOf(e.Element) ? -1 == this.assgnsElem.Assignment.indexOf(e.Element) && this.assgnsElem.Assignment.splice(h, 0, e.Element) : this.assgnsElem.Assignment.push(e.Element)
            } else if ("Remove" == b.Action)
                for (c = 0; c < b.OldItems.length; c++) h = this.assgnsElem.Assignment.indexOf(b.OldItems[c].Element),
        this.assgnsElem.Assignment.splice(h, 1)
    };
    e.Project.prototype.getNextUsableID = function() {
        return ++this.usedtaskid
    };
    e.Project.prototype.calculateTasksEndTime = function() {
        for (var a = this.Tasks, b = 0; b < a.length; b++) a[b].EndDate = this.BaseCalendar.Schedule.GetEnd(a[b].StartDate, a[b].Effort)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.Project.prototype, "ResourcesElem", {
        get: function() {
            null == this._resourcesElem && (this._resourcesElem = [], this.projectElem.Resources = {}, this.projectElem.Resources.Resource =
                this._resourcesElem);
            return this._resourcesElem
        },
        set: function() {},
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.Project.prototype, "BaseCalendarID", {
        get: function() {
            return this._baseCalendarID
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.Project.prototype, "TopProjectTask", {
        get: function() {
            return this.topProjectTask
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.Project.prototype, "Document", {
        get: function() {
            return this.doc
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.Project.prototype,
        "BaseCalendar", {
            get: function() {
                return this._calendarCollection.getCalendarById(this.BaseCalendarID)
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.Project.prototype, "Tasks", {
        get: function() {
            return this._list
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.Project.prototype, "ResourceList", {
        get: function() {
            return this._resList
        },
        set: function(a) {
            this._resList != a && (this._resList = a)
        },
        enumerable: !0,
        configurable: !0
    }));
    e.Project.prototype.initFrom = function(a) {
        this.Model = a;
        this.ResourceList.splice(0,
            this.ResourceList.length);
        for (var b = 0; b < a.GanttResources.length; b++) {
            var c = a.GanttResources[b],
                e = this.createResource();
            e.ID = this.getResourceID(c.ResourceID);
            e.ResourceName = c.ResourceName;
            this.ResourceList.push(e)
        }
    };
    e.Project.prototype.getResourceID = function(a) {
        return this.tryParseInt(a, 0) ? void 0 : this.ResourceList.length + 1
    };
    e.Project.prototype.tryParseInt = function(a, b) {
        var c = b;
        null != a && 0 < a.length && NaN != a && (c = parseInt(a));
        return c
    };
    e.Project.prototype.createTask = function() {
        if (null == this.tasksElem) throw new Exception("Project instance is not initialized with a proper XDocument.");
        var a = {}, b = this.constructTask(a, this.names, this.projectElem);
        b.TaskName = "New Task";
        b.StartDate = this.TopProjectTask.StartDate;
        b.Effort = RQTimeSpan.FromDays(1);
        b.ID = this.getNextUsableID();
        b.PreferredStartTime = this.TopProjectTask.StartDate;
        var c = Date.today().clone().toString("yyyy-MM-ddTHH:mm:ss");
        a.CreateDate = c;
        a.IsNull = "0";
        b.IsInit = !0;
        return b
    };
    e.Project.prototype.constructTask = function(a, b, c) {
        return new e.ProjectTask(a, this.names, c, this)
    };
    e.Project.prototype.createResource = function() {
        if (null == this.tasksElem) throw new Exception("Project instance is not initialized with a proper XDocument.");
        return new e.ProjectResource({}, this.projectElem)
    };
    e.Project.prototype.createAssignment = function() {
        if (null == this.tasksElem) throw new Exception("Project instance is not initialized with a proper XDocument.");
        return new e.ProjectAssignment(this, {}, this.projectElem)
    };
    e.Project.prototype.saveTo = function(a) {
        this.TopProjectTask.ValidateDates();
        this.doc.Save(a)
    };
    e.Project.prototype.fromStream = function(a) {
        a = XDocument.Load(a);
        if (null == a) throw new Exception("The stream passed into FromStream does not contain an Xml Document.");
        return new Project(a)
    };
    e.Project.prototype.validateAssignmentEntries = function(a) {
        for (var b = this._assgnList.getAssignmentByTaskID(a.ID), c = e.Utils.convertResourceTextToAssignments(a, this), f = 0; f < b.length; f++) {
            var h = b[0],
                k = c.getAssignmentByResourceID(h.ResourceUID);
            0 == k.length ? (h = this._assgnList.indexOf(h), this._assgnList.splice(h, 1)) : (k = k[0], h.AllocationUnits = k.AllocationUnits, h = c.indexOf(k), c.splice(h, 1))
        }
        for (f = 0; f < c.length; f++) this._assgnList.push(c[f]);
        this.updateAssignmentWorks(a)
    };
    e.Project.prototype.updateAssignmentWorks =
        function(a) {
            var b = this._assgnList.getAssignmentByTaskID(a.ID);
            this.removeDummyAssignment(b);
            null == a.AssignedResources || void 0 == a.AssignedResources || "" == a.AssignedResources ? this.insertDummyAssignment(a) : (this.updateAssignmentTotalWorks(a, b), this.updateAssignmentRemainingWorks(a, b))
    };
    e.Project.prototype.insertDummyAssignment = function(a) {
        var b = this.createAssignment();
        b.ResourceUID = c;
        b.TaskUID = a.ID;
        b.AllocationUnits = 100;
        b.Work = a.Effort;
        b.ActualWork = new RQTimeSpan(a.Effort - a.RemainingWork);
        b.RemainingWork =
            a.RemainingWork;
        b.Start = a.StartDate;
        b.Stop = null == this.Model || null == this.Model.WorkTimeSchedule ? a.StartDate.addTimeSpan(b.ActualWork) : this.Model.WorkTimeSchedule.GetEnd(b.Start, b.ActualWork);
        this._assgnList.push(b)
    };
    var c = -65535;
    e.Project.prototype.removeDummyAssignment = function(a) {
        for (var b = a.length, e = 0; e < b; e++) {
            var f = a[e];
            if (f.ResourceUID == c) {
                this._assgnList.remove(f);
                break
            }
        }
    };
    e.Project.prototype.updateAssignmentTotalWorks = function(a, b) {
        for (var c = a.Effort, e = RQTimeSpan.Zero, h = b.length, k = 0; k < h; k++) {
            var n =
                b[k];
            if (n.Work == RQTimeSpan.Zero) {
                e = RQTimeSpan.Zero;
                break
            }
            e = new RQTimeSpan(e + n.Work)
        }
        if (e != c)
            for (var k = 0, l = RQTimeSpan.Zero, m = 0; m < h; m++) {
                n = b[m];
                k++;
                var p = 1 / h;
                e > RQTimeSpan.Zero && (p = n.Work.Ticks / e.Ticks);
                n.Work = k == h ? new RQTimeSpan(c - l) : RQTimeSpan.fromTicks(parseInt(c.Ticks * p));
                l = new RQTimeSpan(l + n.Work)
            }
    };
    e.Project.prototype.updateAssignmentRemainingWorks = function(a, b) {
        for (var c = a.RemainingWork, e = RQTimeSpan.Zero, h = b.length, k = 0; k < h; k++) {
            var n = b[k];
            if (n.RemainingWork == RQTimeSpan.Zero || null == n.RemainingWork) {
                e =
                    RQTimeSpan.Zero;
                break
            }
            e = new RQTimeSpan(e + n.RemainingWork)
        }
        if (e != c)
            for (var k = 0, l = RQTimeSpan.Zero, m = 0; m < h; m++) {
                n = b[m];
                k++;
                var p = 1 / h;
                e > RQTimeSpan.Zero && (p = n.RemainingWork.Ticks / e.Ticks);
                n.RemainingWork = k == h ? new RQTimeSpan(c - l) : RQTimeSpan.fromTicks(parseInt(c.Ticks * p));
                n.ActualWork = new RQTimeSpan(n.Work - n.RemainingWork);
                n.Start = a.StartDate;
                n.Stop = null == this.Model || null == this.Model.WorkTimeSchedule ? a.StartDate.addTimeSpan(n.ActualWork) : this.Model.WorkTimeSchedule.GetEnd(n.Start, n.ActualWork);
                n.Resume =
                    DateTime.MinValue;
                l = new RQTimeSpan(l + n.RemainingWork)
            }
    };
    e.ProjectTask = function(a, b, c, e) {
        this._project = null;
        this._id = 0;
        this._duration = this._effort = this._endTime = this._startTime = this._taskName = null;
        this._sortOrder = 0;
        this._preferredStartTime = null;
        this._indendLevel = 0;
        this._predecessorIndices = this._type = null;
        this._progressPercent = 0;
        this._WBS = this._description = this._assignedResources = null;
        this.IsInit = !1;
        this.SubElemNames = b;
        this.Element = a;
        this.PropertyChanged = new ObjectEvent("PropertyChanged");
        this.SortOrderChanged =
            new ObjectEvent("SortOrderChanged");
        this.IsDirty = !1;
        if (a, b, e) this._project = e, this._doc = c, this._id = this.getIntDescendantValue(this.SubElemNames.IDField, 0), this._taskName = this.getDescendantValue(this.SubElemNames.TaskNameField), this._startTime = this.getDateDescendantValue(this.SubElemNames.StartDateField), this._endTime = this.getDateDescendantValue(this.SubElemNames.EndDateField), this._effort = this.getTimeSpanDescendantValue(this.SubElemNames.EffortField), this._duration = this.getTimeSpanDescendantValue(this.SubElemNames.DurationField),
        this._sortOrder = this.getIntDescendantValue(this.SubElemNames.SortOrderField, 0), this._preferredStartTime = this.getDateDescendantValue(this.SubElemNames.PreferredStartTimeField), this._indendLevel = this.getIntDescendantValue(this.SubElemNames.IndentLevelField, 0) - 1, this._type = this.getIntDescendantValue(this.SubElemNames.TypeField, 0), this._predecessorIndices = this.preparePredIndicesString(), this._progressPercent = this.getDoubleDescendantValue(this.SubElemNames.ProgressPercentField, 0), this._assignedResources =
            this.Element.AssignedResources, this._description = this.getDescendantValue(this.SubElemNames.DescriptionField), this._WBS = this.getDescendantValue(this.SubElemNames.WBSField)
    };
    e.ProjectTask.prototype.UpdateFinish = function() {
        this.EndDate = this.Project.BaseCalendar.Schedule.GetEnd(this.StartDate, this.Effort)
    };
    e.ProjectTask.prototype.onSortOrderChanged = function(a) {
        null != this.SortOrderChanged && this.SortOrderChanged.raise(this, a)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.ProjectTask.prototype,
            "Project", {
                get: function() {
                    return this._project
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(e.ProjectTask.prototype, "ID", {
            get: function() {
                return this._id
            },
            set: function(a) {
                if (this._id != a) {
                    var b = this._id;
                    this._id = a;
                    this.Element[this.SubElemNames.IDField] = a.toString();
                    this.OnPropertyChanged("ID", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "TaskName", {
            get: function() {
                return this._taskName
            },
            set: function(a) {
                if (this._taskName != a) {
                    var b = this._taskName;
                    this._taskName = a;
                    this.Element[this.SubElemNames.TaskNameField] = a.toString();
                    this.OnPropertyChanged("TaskName", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "StartDate", {
            get: function() {
                return this._startTime
            },
            set: function(a) {
                if (this._startTime != a) {
                    var b = this._startTime;
                    this._startTime = a;
                    this.Element[this.SubElemNames.StartDateField] = a.toString("yyyy-MM-ddTHH:mm:ss");
                    this.OnPropertyChanged("StartDate", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.ProjectTask.prototype, "EndDate", {
            get: function() {
                return this._endTime
            },
            set: function(a) {
                if (this._endTime != a) {
                    var b = this._endTime;
                    this._endTime = a;
                    this.Element[this.SubElemNames.EndDateField] = a.toString("yyyy-MM-ddTHH:mm:ss");
                    this.OnPropertyChanged("EndDate", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "Effort", {
            get: function() {
                var a = this._effort;
                return a == RQTimeSpan.Zero ? this.Duration : a
            },
            set: function(a) {
                if (this._effort != a) {
                    var b =
                        this._effort;
                    this._effort = a;
                    this.Element[this.SubElemNames.EffortField] = e.Utils.effortToString(a);
                    this.OnPropertyChanged("Effort", b, a);
                    this.IsDirty = !0
                }
                this.Duration = a
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "Duration", {
            get: function() {
                return this._duration
            },
            set: function(a) {
                if (this._duration != a) {
                    var b = this._duration;
                    this._duration = a;
                    this.Element[this.SubElemNames.DurationField] = e.Utils.effortToString(a);
                    this.OnPropertyChanged("Duration", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "SortOrder", {
            get: function() {
                return this._sortOrder
            },
            set: function(a) {
                if (this._sortOrder != a) {
                    var b = this._sortOrder;
                    this._sortOrder = a;
                    this.Element[this.SubElemNames.SortOrderField] = a.toString();
                    this.OnPropertyChanged("SortOrder", b, a);
                    this.onSortOrderChanged(a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "WBS", {
            get: function() {
                return this.Project.ReadWBSIDsAsManual ? "*" + this._WBS :
                    this._WBS
            },
            set: function(a) {
                var b = this.stringTrimStart(a, "*");
                if (this._WBS != b) {
                    var c = this._WBS;
                    this._WBS = b;
                    this.Element[this.SubElemNames.WBSField] = b.toString();
                    this.OnPropertyChanged("WBS", c, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "PreferredStartTime", {
            get: function() {
                return 4 == (null == this.Element.ConstraintType || void 0 == this.Element.ConstraintType ? 0 : this.Element.ConstraintType) ? this._preferredStartTime : Date.today().clone()
            },
            set: function(a) {
                if (this._preferredStartTime !=
                    a) {
                    var b = this._preferredStartTime;
                    this._preferredStartTime = a;
                    this.Element[this.SubElemNames.PreferredStartTimeField] = a.toString("yyyy-MM-ddTHH:mm:ss");
                    this.OnPropertyChanged("PreferredStartTime", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "IndentLevel", {
            get: function() {
                return this._indendLevel
            },
            set: function(a) {
                if (this._indendLevel != a) {
                    var b = this._indendLevel;
                    this._indendLevel = a;
                    this.Element[this.SubElemNames.IndentLevelField] = (a + 1).toString();
                    this.OnPropertyChanged("IndentLevel", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "Type", {
            get: function() {
                return this._type
            },
            set: function(a) {
                if (this._type != a) {
                    var b = this._type;
                    this._type = a;
                    this.Element[this.SubElemNames.TypeField] = a.toString();
                    this.OnPropertyChanged("Type", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "RemainingWork", {
            get: function() {
                return new RQTimeSpan(this.Effort - RQTimeSpan.fromTicks(parseFloat(this.Effort.Ticks *
                    (this.ProgressPercent / 100))))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "PredecessorIndices", {
            get: function() {
                return this._predecessorIndices
            },
            set: function(a) {
                if (this._predecessorIndices != a) {
                    var b = this._predecessorIndices;
                    this._predecessorIndices = a;
                    this.updatePredIndicesString(a);
                    this.OnPropertyChanged("PredecessorIndices", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "ProgressPercent", {
            get: function() {
                return this._progressPercent
            },
            set: function(a) {
                if (this._progressPercent != a) {
                    var b = this._progressPercent;
                    this._progressPercent = a;
                    this.Element[this.SubElemNames.ProgressPercentField] = a.toString();
                    this.OnPropertyChanged("ProgressPercent", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "AssignedResources", {
            get: function() {
                var a = this._assignedResources;
                return null != a && void 0 != a ? a : ""
            },
            set: function(a) {
                if (this._assignedResources != a) {
                    var b = this._assignedResources;
                    this._assignedResources =
                        a;
                    this.OnPropertyChanged("AssignedResources", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectTask.prototype, "Description", {
            get: function() {
                return this._description
            },
            set: function(a) {
                if (this._description != a) {
                    var b = this._description;
                    this._description = a;
                    this.Element[this.SubElemNames.DescriptionField] = a.toString();
                    this.OnPropertyChanged("Description", b, a);
                    this.IsDirty = !0
                }
            },
            enumerable: !0,
            configurable: !0
        }));
    e.ProjectTask.prototype.stringTrimStart = function(a, b) {
        if (!b) return a;
        for (var c = a; c.substr(0, b.length) == b;) c = c.substr(b.length);
        return c
    };
    e.ProjectTask.prototype.preparePredIndicesString = function() {
        var a = this.Element[this.SubElemNames.PredecessorIndicesField],
            c = "";
        if (void 0 == a) return c;
        var c = c + a.PredecessorUID.toString(),
            g = b.DependencyType.FinishToStart,
            g = a.Type,
            g = e.Utils.toDepType(g.toString());
        switch (g) {
            case b.DependencyType.FinishToFinish:
                c += "FF";
                break;
            case b.DependencyType.StartToFinish:
                c += "SF";
                break;
            case b.DependencyType.StartToStart:
                c += "SS"
        }
        g = 0;
        g = a.LinkLag;
        g =
            e.Utils.tenthOfAMinuteToHours(g.toString());
        0 < g ? c += "+ " + g : 0 > g && (c += "- " + -g);
        return c
    };
    e.ProjectTask.prototype.updatePredIndicesString = function(a) {
        var c = this.Element.PredecessorLink;
        null != c && void 0 != c && delete this.Element.PredecessorLink;
        if (null != a && "" != a) {
            var c = [],
                g = [],
                f = [],
                h = this._project.Tasks;
            b.Model.DataBoundGanttModel.ProcessPredecessorString(a, 1, c, g, f, void 0);
            for (a = 0; a < c.length; a++) {
                var k = c[a];
                h.ContainsTask(k) && (k = h.GetTaskByID(c[a]).ID);
                var n = {};
                n.PredecessorUID = k;
                n.Type = e.Utils.toString(g[a]);
                n.LinkLag = e.Utils.toLagString(f[a]);
                this.Element.PredecessorLink = n
            }
        }
    };
    e.ProjectTask.prototype.appendChildNode = function(a, b, c) {
        a = this._doc.createElementNS(this._project.projectElem.documentElement.namespaceURI, a);
        var e = this._doc.createTextNode("");
        e.nodeValue = b;
        a.appendChild(e);
        b = this._doc.createTextNode("");
        c.appendChild(b);
        c.appendChild(a)
    };
    e.ProjectTask.prototype.ToString = function() {
        return "TaskName: " + this.TaskName + ", ID: " + this.ID + ", Start: " + this.StartDate + ", End: " + this.EndDate
    };
    e.ProjectTask.prototype.getDescendantValue =
        function(a) {
            if (null == a) return null;
            a = this.Element[a];
            return null == a || void 0 == a ? "" : a
    };
    e.ProjectTask.prototype.getIntDescendantValue = function(a, b) {
        var c = this.Element[a];
        return null == a || null == c || void 0 == c || null == c ? b : parseInt(Math.floor(parseFloat(c)))
    };
    e.ProjectTask.prototype.getDoubleDescendantValue = function(a, b) {
        var c = this.Element[a];
        return null == a || null == c || void 0 == c ? b : null == c ? 0 : parseFloat(c)
    };
    e.ProjectTask.prototype.getDateDescendantValue = function(a) {
        var b = Date.today().clone();
        a = this.Element[a];
        null != a && (b = new Date(a));
        return b
    };
    e.ProjectTask.prototype.getTimeSpanDescendantValue = function(a) {
        var b = this.Element[a];
        return null == a || null == b || void 0 == b || null == b ? RQTimeSpan.Zero : RQTimeSpan.parse(b)
    };
    e.ProjectTask.prototype.setDescendantValue = function(a, b) {
        this.Element[a] = b.toString()
    };
    e.ProjectTask.prototype.OnPropertyChanged = function(a, b, c) {
        this.PropertyChanged && 0 < this.PropertyChanged.fn.length && this.PropertyChanged.raise(this, {
            PropertyName: a,
            OldValue: b,
            value: c
        })
    };
    e.ProjectResource = function() {
        e.ProjectResource =
            function(a, b) {
                this.Element = a;
                this._doc = b;
                this._id = this.getID();
                this._resourceName = this.getResourceName()
        };
        return e.ProjectResource
    }();
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.ProjectResource.prototype, "ID", {
        get: function() {
            return this._id
        },
        set: function(a) {
            this._id != a && (this._id = a, this.Element.UID = a.toString(), this.IsDirty = !0)
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ProjectResource.prototype, "ResourceName", {
        get: function() {
            return this._resourceName
        },
        set: function(a) {
            this._resourceName !=
                a && (this._resourceName = a, this.Element.Name = a.toString(), this.IsDirty = !0)
        },
        enumerable: !0,
        configurable: !0
    }));
    e.ProjectResource.prototype.toString = function() {
        return "Name: " + this.ResourceName + ", ID:" + this.ID
    };
    e.ProjectResource.prototype.getID = function() {
        var a = this.Element.UID;
        return null == a || void 0 == a ? 0 : parseInt(Math.floor(parseFloat(a)))
    };
    e.ProjectResource.prototype.getResourceName = function() {
        var a = this.Element.Name;
        return null != a && void 0 != a ? a : ""
    };
    e.ResourceList = function() {
        new RadiantQ.RQ_ObservableCollection(this);
        this.resourcesByID = new b.Dictionary;
        this.resourcesByName = new b.Dictionary;
        this.CollectionChanged.subscribe(function(a, b) {
            if ("Add" == b.Action)
                for (var c = 0; c < b.NewItems.length; c++) {
                    var e = b.NewItems[c];
                    this.resourcesByID.Add(e.ID, e);
                    this.resourcesByName.Add(e.ResourceName, e)
                } else if ("Remove" == b.Action)
                    for (c = 0; c < b.OldItems.length; c++) e = b.OldItems[c], this.resourcesByID.Remove(e.ID), this.resourcesByName.Remove(e.ResourceName)
        }.bind(this))
    };
    e.ResourceList.prototype = [];
    e.ResourceList.prototype.getResourceByID =
        function(a) {
            return this.resourcesByID.Contains(a) ? this.resourcesByID[a] : null
    };
    e.ResourceList.prototype.getResourceByName = function(a) {
        return this.resourcesByName.Contains(a) ? this.resourcesByName[a] : null
    };
    e.ProjectAssignment = function(a, b, c) {
        NotifyPropertyChanged.apply(this, arguments);
        this.Project = null;
        this.Project = a;
        this.Element = b;
        this._doc = c;
        this._taskUID = this.getTaskUID();
        this._resourceUID = this.getResourceUID();
        this._allocationUnits = this.getUnits();
        this._remainingWork = this.getRemainingWork();
        this._actualWork =
            this.getTimeSpanDescendantValue("ActualWork");
        this._work = this.getTimeSpanDescendantValue("Work");
        this._start = this.getDateDescendantValue("Start");
        this._stop = this.getDateDescendantValue("Stop");
        this._resume = this.getDateDescendantValue("Resume")
    };
    e.ProjectAssignment.prototype = new NotifyPropertyChanged;
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.ProjectAssignment.prototype, "TaskUID", {
            get: function() {
                return this._taskUID
            },
            set: function(a) {
                this._taskUID != a && (this._taskUID = a, this.Element.TaskUID =
                    a.toString())
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "ResourceUID", {
            get: function() {
                return this._resourceUID
            },
            set: function(a) {
                this._resourceUID != a && (this._resourceUID = a, this.Element.ResourceUID = a.toString())
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "AllocationUnits", {
            get: function() {
                return parseInt(Math.floor(100 * this._allocationUnits))
            },
            set: function(a) {
                this._allocationUnits != a && (this._allocationUnits = a, this.Element.Units =
                    (a / 100).toString())
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "RemainingWork", {
            get: function() {
                return this._remainingWork
            },
            set: function(a) {
                this._remainingWork != a && (this._remainingWork = a, this.Element.RemainingWork = e.Utils.effortToString(a))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "ActualWork", {
            get: function() {
                return this._actualWork
            },
            set: function(a) {
                this._actualWork != a && (this._actualWork = a, this.Element.ActualWork =
                    e.Utils.effortToString(a))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "Work", {
            get: function() {
                return this._work
            },
            set: function(a) {
                this._work != a && (this._work = a, this.Element.Work = e.Utils.effortToString(a))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "Start", {
            get: function() {
                return this._start
            },
            set: function(a) {
                this._start != a && (this._start = a, this.Element.Start = a.toString("yyyy-MM-ddTHH:mm:ss"))
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(e.ProjectAssignment.prototype, "Stop", {
            get: function() {
                return this._stop
            },
            set: function(a) {
                this._stop != a && (this._stop = a, this.Element.Stop = a.toString("yyyy-MM-ddTHH:mm:ss"))
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.ProjectAssignment.prototype, "Resume", {
            get: function() {
                return this._resume
            },
            set: function(a) {
                this._resume != a && (this._resume = a, this.Element.Resume = a.toString("yyyy-MM-ddTHH:mm:ss"))
            },
            enumerable: !0,
            configurable: !0
        }));
    e.ProjectAssignment.prototype.toString = function() {
        return "TaskID: " +
            this.TaskUID + ", ResourceUID: " + this.ResourceUID
    };
    e.ProjectAssignment.prototype.setDescendantValue = function(a, b) {
        this.Element[a] = b.toString()
    };
    e.ProjectAssignment.prototype.getTaskUID = function() {
        var a = this.Element.TaskUID;
        return null != a && void 0 != a ? parseInt(a) : 0
    };
    e.ProjectAssignment.prototype.getResourceUID = function() {
        var a = this.Element.ResourceUID;
        return null != a && void 0 != a ? parseInt(a) : 0
    };
    e.ProjectAssignment.prototype.getUnits = function() {
        var a = this.Element.Units;
        return null != a && void 0 != a ? parseInt(a) :
            null
    };
    e.ProjectAssignment.prototype.getRemainingWork = function() {
        var a = this.Element.RemainingWork;
        return null != a && void 0 != a ? a : null
    };
    e.ProjectAssignment.prototype.getDateDescendantValue = function(a) {
        var b = Date.today().clone();
        a = this.Element[a];
        null != a && (b = new Date(a));
        return b
    };
    e.ProjectAssignment.prototype.getTimeSpanDescendantValue = function(a) {
        var b = this.Element[a];
        return null == a || null == b || void 0 == b || null == b ? RQTimeSpan.Zero : RQTimeSpan.parse(b)
    };
    e.AssignmentsList = function() {
        var a = this;
        new RadiantQ.RQ_ObservableCollection(a);
        a.assignmentsByTaskID = new b.Dictionary;
        a.assignmentsByResID = new b.Dictionary;
        a.CollectionChanged.subscribe(function(b, c) {
            if ("Add" == c.Action)
                for (var e = 0; e < c.NewItems.length; e++) {
                    var h = c.NewItems[e];
                    !1 == a.assignmentsByTaskID.Contains(h.TaskUID) && a.assignmentsByTaskID.Add(h.TaskUID, []);
                    !1 == a.assignmentsByResID.Contains(h.ResourceUID) && a.assignmentsByResID.Add(h.ResourceUID, []);
                    a.assignmentsByTaskID[h.TaskUID].push(h);
                    a.assignmentsByResID[h.ResourceUID].push(h)
                } else if ("Remove" == c.Action)
                    for (e = 0; e < c.OldItems.length; e++) {
                        var h =
                            c.OldItems[e],
                            k = a.assignmentsByTaskID[h.TaskUID].indexOf(h);
                        a.assignmentsByTaskID[h.TaskUID].splice(k, 1);
                        k = a.assignmentsByResID[h.ResourceUID].indexOf(h);
                        a.assignmentsByResID[h.ResourceUID].splice(k, 1)
                    }
        })
    };
    e.AssignmentsList.prototype = [];
    e.AssignmentsList.prototype.getAssignmentByTaskID = function(a) {
        return this.assignmentsByTaskID.Contains(a) ? this.assignmentsByTaskID[a] : new e.AssignmentsList
    };
    e.AssignmentsList.prototype.getAssignmentByResourceID = function(a) {
        return this.assignmentsByResID.Contains(a) ?
            this.assignmentsByResID[a] : new e.AssignmentsList
    };
    e.AssignmentsList.prototype.convertResourceToString = function(a) {
        a = "" + (a.Project.ResourceList.getResourceByID(a.ResourceUID).ResourceName + " " + this.allocationUnitText(a));
        return a = a.trimEnd()
    };
    e.AssignmentsList.prototype.addResourceString = function(a, b) {
        var c = a;
        null != c && "" != c && (c += ",");
        return c += this.convertResourceToString(b)
    };
    e.AssignmentsList.prototype.allocationUnitText = function(a) {
        return 100 == a.AllocationUnits ? "" : "[" + parseFloat(a.AllocationUnits /
            100).toString() + "%]"
    };
    e.XElementSubElementNames = function() {
        this.WBSField = this.TypeField = this.SortOrderField = this.DescriptionField = this.AssignedResourcesField = this.ProgressPercentField = this.PreferredStartTimeField = this.DurationField = this.EffortField = this.EndDateField = this.PredecessorIndicesField = this.StartDateField = this.IndentLevelField = this.TaskNameField = this.IDField = null
    };
    e.ProjectTaskList = function(a) {
        new RadiantQ.RQ_ObservableCollection(this);
        this.tasksByID = new b.Dictionary;
        this._project = a;
        this.CollectionChanged.subscribe(function(a,
                b) {
                if ("Add" == b.Action)
                    for (var c = 0; c < b.NewItems.length; c++) {
                        var e = b.NewItems[c];
                        e.SortOrderChanged.subscribe(this.item_SortOrderChanged, this);
                        e.PropertyChanged.subscribe(this.item_PropertyChanged, this);
                        this.tasksByID.Add(e.ID, e);
                        this._project.TopProjectTask.IsDirty = !0
                    } else if ("Remove" == b.Action)
                        for (c = 0; c < b.OldItems.length; c++) e = b.OldItems[c], e.SortOrderChanged.unsubscribe(this.item_SortOrderChanged, this), e.PropertyChanged && e.PropertyChanged.unsubscribe(this.item_PropertyChanged, this), this.tasksByID.Remove(e.ID)
            },
            this)
    };
    e.ProjectTaskList.prototype = [];
    e.ProjectTaskList.prototype.item_PropertyChanged = function(a, b) {
        if ("StartDate" == b.PropertyName || "EndDate" == b.PropertyName || "Effort" == b.PropertyName) this._project.TopProjectTask.IsDirty = !0;
        if ("Effort" == b.PropertyName) {
            var c = a;
            c.IsInit && this._project.updateAssignmentWorks(c)
        }
        "AssignedResources" == b.PropertyName && (c = a, c.IsInit && this._project.validateAssignmentEntries(c))
    };
    e.ProjectTaskList.prototype.item_SortOrderChanged = function(a, b) {
        var c = this.indexOf(a);
        c != b && (this.splice(c,
            1), this.length <= b ? this.push(a) : this.splice(b, 0, a))
    };
    e.ProjectTaskList.prototype.GetTaskByID = function(a) {
        return this.tasksByID[a]
    };
    e.ProjectTaskList.prototype.ContainsTask = function(a) {
        return this.tasksByID.Contains(a)
    };
    e.TopProjectTask = function(a, b, c, e) {
        this.constructor(a, b, c, e);
        this._validating = this.IsDirty = null
    };
    e.TopProjectTask.prototype = new e.ProjectTask;
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.TopProjectTask.prototype, "StartDate", {
        get: function() {
            this.IsDirty && this.validateDates();
            return this._startTime
        },
        set: function(a) {
            this._startTime = a
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.TopProjectTask.prototype, "EndDate", {
        get: function() {
            this.IsDirty && this.validateDates();
            return this._endTime
        },
        set: function(a) {
            this._endTime = a
        },
        enumerable: !0,
        configurable: !0
    }));
    e.TopProjectTask.prototype.validateDates = function() {
        if (!this._validating) try {
            if (this._validating = !0, this.IsDirty) {
                var a = this.StartDate,
                    b = this.EndDate,
                    c;
                for (c in this.Project.Tasks) c.StartDate < a && (a = c.StartDate), c.EndDate >
                    b && (b = c.EndDate);
                this.StartDate = a;
                this.EndDate = b;
                this.IsDirty = !1
            }
        } finally {
            this._validating = !1
        }
    };
    e.ProjectCalendarCollection = function() {
        new RadiantQ.RQ_ObservableCollection(this);
        this._dictCalendarsById = new b.Dictionary;
        this.CollectionChanged.subscribe(function(a, b) {
            if ("Add" == b.Action)
                for (var c = 0; c < b.NewItems.length; c++) {
                    var e = b.NewItems[c];
                    this._dictCalendarsById.Add(e.ID, e)
                } else if ("Remove" == b.Action)
                    for (c = 0; c < b.OldItems.length; c++) this._dictCalendarsById.Remove(b.OldItems[c].ID)
        }, this)
    };
    e.ProjectCalendarCollection.prototype = [];
    e.ProjectCalendarCollection.prototype.getCalendarById = function(a) {
        return !1 == this._dictCalendarsById.Contains(a) ? null : this._dictCalendarsById[a]
    };
    e.ProjectCalendar = function(a) {
        this._calendarElem = a;
        this._schedule = this._calWithExceptions = null;
        this.ID = this.getUID(this._calendarElem);
        if (this.IsBaseCalendar) {
            var c = this._calendarElem.WeekDays.WeekDay,
                g = [];
            a = new RadiantQ.Gantt.Dictionary;
            for (var f = new RadiantQ.Gantt.Dictionary, h = 0; h < c.length; h++) {
                var k = c[h];
                if (0 < this.getWeekDay(k)) k = new e.ProjectWeekDay(c[h]),
                g.push(k);
                else
                    for (var n = e.ProjectWeekDay.isDayWorking(k), l = this.getDaysRangeInWeekDay(k), m = [], p = 0; p < l.length; p++) {
                        var q = l[p];
                        e.ProjectWeekDay.parseWorkingTimes(k.WorkingTimes, m);
                        q = new RadiantQ.Gantt.ExceptionDay(q.Date().toShortDateString(), q, m);
                        n ? a.Add(q) : f.Add(q)
                    }
            }
            c = new b.Calendar(this.ID, g, "Calendar ID: " + this.ID);
            g = [];
            for (h = 0; 7 > h; h++) g.push(RadiantQ.Gantt.WeekDay.Undefined);
            this._calWithExceptions = new RadiantQ.Gantt.CalendarWithExceptions(c, g, a, f)
        }
    };
    e.ProjectCalendar.prototype.getUID = function(a) {
        a =
            this._calendarElem.UID;
        return null == a ? -1 : parseInt(a)
    };
    e.ProjectCalendar.prototype.getWeekDay = function(a) {
        a = a.DayType;
        return null == a ? 0 : parseInt(a)
    };
    e.ProjectCalendar.prototype.getDaysRangeInWeekDay = function(a) {
        var b = [],
            c = a.TimePeriod;
        if (null == c) return b;
        a = new Date(c.ToDate);
        c = new Date(c.FromDate);
        do b.push(c), c += TimeSpan.FromDays(1); while (c.Date < a.Date);
        return b
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.ProjectCalendar.prototype, "Schedule", {
        get: function() {
            null == this._schedule && (this._schedule =
                RadiantQ.Gantt.CalendarWithExceptions.CreateWorkTimeSchedule(this._calWithExceptions));
            return this._schedule
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ProjectCalendar.prototype, "IsBaseCalendar", {
        get: function() {
            var a = this._calendarElem.IsBaseCalendar;
            return null == a ? !0 : 0 < parseInt(a) ? !0 : !1
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ProjectCalendar.prototype, "BaseCalendarID", {
        get: function() {
            var a = this._calendarElem.BaseCalendarUID;
            return null == a ? -1 : parseInt(a)
        },
        enumerable: !0,
        configurable: !0
    }));
    e.ProjectWeekDay = function(a) {
        this.base = b.WeekDay;
        this.base();
        this._weekDay = a;
        this.IsWorkingDay = e.ProjectWeekDay.isDayWorking(this._weekDay);
        elem = this._weekDay.WorkingTimes;
        e.ProjectWeekDay.parseWorkingTimes(elem, this.WorkingTimes)
    };
    e.ProjectWeekDay.prototype = new b.WeekDay;
    e.ProjectWeekDay.isDayWorking = function(a) {
        a = a.DayWorking;
        return null == a ? !0 : Boolean(parseInt(a))
    };
    e.ProjectWeekDay.parseWorkingTimes = function(a, c) {
        if (null != a)
            for (var g = a.WorkingTime, f = RQTimeSpan.Zero, h = 0; h < g.length; h++) {
                var k =
                    new e.ProjectWorkDayWorkingTime(g[h]);
                k.From == f && k.From == k.To && (k = new b.WorkDayWorkingTime(f, new RQTimeSpan(24, 0, 0)));
                c.push(k)
            }
    };
    e.ProjectWorkDayWorkingTime = function(a) {
        this.From = e.Utils.toTimeOfDay(a.FromTime.toString());
        this.To = e.Utils.toTimeOfDay(a.ToTime.toString())
    }
})();
RadiantQ.ExcelModel = {};
(function() {
    var e = RadiantQ.ExcelModel;
    e.ExcelModel = function() {};
    e.ExcelModel.prototype.saveTo = function(b) {
        var c = new e.Workbook;
        c.Worksheet = new e.Worksheet;
        var a = new e.Style;
        a.IsBold = !0;
        a.ID = "headerColumnStyle";
        c.Styles.push(a);
        a = new e.Style;
        a.Format = "M-d-yyyy";
        a.ID = "startTimeColumnStyle";
        c.Styles.push(a);
        var a = [],
            d = new e.Row;
        d.StyleID = "headerColumnStyle";
        var g = new e.Cell;
        g.Text = "ID";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "Task Name";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "WBSID";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "Start Date";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "Effort";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "PredecessorIndices";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "SortOrder";
        d.Cells.push(g);
        g = new e.Cell;
        g.Text = "Description";
        d.Cells.push(g);
        a.push(d);
        var f = [],
            d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 100;
        f.push(d);
        d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 50;
        f.push(d);
        d = new e.Column;
        d.Width = 230;
        f.push(d);
        for (var h = b.length, k = 0; k < h; k++) {
            var n = b[k],
                d = new e.Row,
                g = new e.Cell;
            g.Text = n.TaskID;
            d.Cells.push(g);
            g = new e.Cell;
            g.Text = n.TaskName;
            d.Cells.push(g);
            g = new e.Cell;
            g.Text = n.WBSID;
            d.Cells.push(g);
            g = new e.Cell;
            g.DateTime = n.StartTime;
            g.StyleID = "startTimeColumnStyle";
            d.Cells.push(g);
            g = new e.Cell;
            g.Text = RadiantQ.ProjectModel.Utils.effortToString(n.CompletedEffort);
            d.Cells.push(g);
            g = new e.Cell;
            g.Text = n.PredecessorIndices;
            d.Cells.push(g);
            g = new e.Cell;
            g.Number = n.SortOrder;
            d.Cells.push(g);
            g = new e.Cell;
            g.Text = n.Description;
            d.Cells.push(g);
            a.push(d)
        }
        c.Worksheet.Columns = f;
        c.Worksheet.Rows = a;
        return c.writeXml()
    };
    e.Workbook = function() {
        this.Worksheet = null;
        this.Styles = [];
        this.XMLElement = null
    };
    e.Workbook.prototype.writeXml = function() {
        var b = this.XMLElement,
            b = {
                "ss:Workbook": {}
            };
        b["ss:Workbook"]["@xmlns:ss"] = "urn:schemas-microsoft-com:office:spreadsheet";
        b["ss:Workbook"]["ss:Styles"] = {};
        b["ss:Workbook"]["ss:Styles"]["ss:Style"] = [];
        for (var c = this.Styles.length, a = 0; a < c; a++) {
            var d =
                this.Styles[a].writeXml();
            b["ss:Workbook"]["ss:Styles"]["ss:Style"].push(d)
        }
        this.Worksheet.writeXml(b["ss:Workbook"]);
        return b
    };
    e.Style = function() {
        this.IsBold = !1;
        this.ID = "";
        this.FontSize = 0;
        this.Format = this.FontName = ""
    };
    e.Style.prototype.writeXml = function() {
        var b = {};
        b["@ss:ID"] = this.ID;
        b["ss:Font"] = {};
        b["ss:Font"]["@ss:FontName"] = this.FontName;
        b["ss:Font"]["@ss:FontSize"] = this.FontSize.toString();
        b["ss:Font"]["@ss:Bold"] = this.IsBold.toString();
        b["ss:NumberFormat"] = {};
        b["ss:NumberFormat"]["@ss:Format"] =
            this.Format;
        return b
    };
    e.Worksheet = function() {
        this.Name = "sheet1";
        this.Columns = [];
        this.Rows = []
    };
    e.Worksheet.prototype.writeXml = function(b) {
        b["ss:Worksheet"] = {};
        b["ss:Worksheet"]["@ss:Name"] = this.Name;
        b["ss:Worksheet"]["ss:Table"] = {};
        b["ss:Worksheet"]["ss:Table"]["ss:Column"] = [];
        for (var c = this.Columns.length, a = 0; a < c; a++) {
            var d = this.Columns[a].writeXml();
            b["ss:Worksheet"]["ss:Table"]["ss:Column"].push(d)
        }
        c = this.Rows.length;
        b["ss:Worksheet"]["ss:Table"]["ss:Row"] = [];
        for (a = 0; a < c; a++) d = this.Rows[a].writeXml(),
        b["ss:Worksheet"]["ss:Table"]["ss:Row"].push(d)
    };
    e.Column = function() {
        this.Width = 100
    };
    e.Column.prototype.writeXml = function() {
        var b = {};
        b["@ss:Width"] = this.Width;
        return b
    };
    e.Row = function() {
        this.Cells = [];
        this.StyleID = null
    };
    e.Row.prototype.writeXml = function() {
        var b = {};
        b["@ss:StyleID"] = this.StyleID;
        b["ss:Cell"] = [];
        for (var c = this.Cells.length, a = 0; a < c; a++) {
            var d = this.Cells[a].writeXml();
            b["ss:Cell"].push(d)
        }
        return b
    };
    e.Cell = function() {
        this.StyleID = this.Formate = this.DateTime = this.Number = this.Text = null
    };
    e.Cell.prototype.writeXml =
        function() {
            var b = {};
            b["@ss:StyleID"] = this.StyleID;
            b["ss:Data"] = {};
            this.DateTime ? (b["ss:Data"]["@ss:Type"] = "DateTime", b["ss:Data"]["#text"] = this.DateTime.toString("yyyy-MM-ddTHH:mm:ss")) : this.Number ? (b["ss:Data"]["@ss:Type"] = "Number", b["ss:Data"]["#text"] = this.Number) : (b["ss:Data"]["@ss:Type"] = "String", b["ss:Data"]["#text"] = this.Text);
            return b
    };
    e.ExcelTask = function() {
        this._taskID = 0;
        this._compEffort = this._startTime = this._taskName = null;
        this._sortOrder = 0;
        this._WBSID = this._description = this._predIndices =
            null;
        this.PropertyChanged = new ObjectEvent("PropertyChanged")
    };
    e.ExcelTask.prototype.onSortOrderChanged = function(b) {
        null != this.SortOrderChanged && this.SortOrderChanged.raise(this, b)
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(e.ExcelTask.prototype, "TaskID", {
        get: function() {
            return this._taskID
        },
        set: function(b) {
            if (this._taskID != b) {
                var c = this._taskID;
                this._taskID = b;
                this.OnPropertyChanged("TaskID", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "TaskName", {
        get: function() {
            return this._taskName
        },
        set: function(b) {
            if (this._taskName != b) {
                var c = this._taskName;
                this._taskName = b;
                this.OnPropertyChanged("TaskName", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "StartTime", {
        get: function() {
            return this._startTime
        },
        set: function(b) {
            if (this._startTime != b) {
                var c = this._startTime;
                this._startTime = b;
                this.OnPropertyChanged("StartTime", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "CompletedEffort", {
        get: function() {
            return this._compEffort
        },
        set: function(b) {
            if (this._compEffort != b) {
                var c = this._compEffort;
                this._compEffort = b;
                this.OnPropertyChanged("CompletedEffort", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "SortOrder", {
        get: function() {
            return this._sortOrder
        },
        set: function(b) {
            if (this._sortOrder != b) {
                var c = this._sortOrder;
                this._sortOrder = b;
                this.OnPropertyChanged("SortOrder", c, b);
                this.onSortOrderChanged(b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "WBSID", {
        get: function() {
            return this._WBSID
        },
        set: function(b) {
            if (this._WBSID != b) {
                var c = this._WBSID;
                this._WBSID = b;
                this.OnPropertyChanged("WBSID", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "PredecessorIndices", {
        get: function() {
            return this._predIndices
        },
        set: function(b) {
            if (this._predIndices != b) {
                var c = this._predIndices;
                this._predIndices = b;
                this.OnPropertyChanged("PredecessorIndices", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e.ExcelTask.prototype, "Description", {
        get: function() {
            return this._description
        },
        set: function(b) {
            if (this._description != b) {
                var c = this._description;
                this._description = b;
                this.OnPropertyChanged("Description", c, b)
            }
        },
        enumerable: !0,
        configurable: !0
    }));
    e.ExcelTask.prototype.OnPropertyChanged = function(b, c, a) {
        this.PropertyChanged && 0 < this.PropertyChanged.fn.length && this.PropertyChanged.raise(this, {
            PropertyName: b,
            OldValue: c,
            value: a
        })
    }
})();
(function(e) {
    var b = null,
        c = 0;
    createSVG = function(a, c) {
        var e = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        e.setAttribute("version", "1.1");
        e.setAttribute("viewBox", "0 0 1 1");
        e.setAttribute("preserveAspectRatio", "none");
        e.setAttribute("height", "21px");
        void 0 != a.y2 ? (b = document.createElementNS("http://www.w3.org/2000/svg", "linearGradient"), b.setAttribute("id", "gradient"), b.setAttribute("gradientUnits", "userSpaceOnUse"), b.setAttribute("x1", "" + a.x1 + "%"), b.setAttribute("y1", "" + a.y1 + "%"), b.setAttribute("x2",
            "" + a.x2 + "%"), b.setAttribute("y2", "" + a.y2 + "%")) : void 0 == a.y2 && (b = document.createElementNS("http://www.w3.org/2000/svg", "radialGradient"), b.setAttribute("id", "gradient"), b.setAttribute("gradientUnits", "userSpaceOnUse"), b.setAttribute("cx", "" + a.x1 + "%"), b.setAttribute("cy", "" + a.y1 + "%"), b.setAttribute("r", "" + a.x2 + "%"));
        for (var f = 0; f < c.length; f++) {
            var h = c[f],
                k = document.createElementNS("http://www.w3.org/2000/svg", "stop"),
                n;
            for (n in h) h.hasOwnProperty(n) && k.setAttribute(n, h[n]);
            b.appendChild(k)
        }
        e.appendChild(b);
        f = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        f.setAttribute("x", "0");
        f.setAttribute("y", "0");
        f.setAttribute("height", "21px");
        f.setAttribute("width", "100%");
        f.setAttribute("fill", "url(#gradient)");
        e.appendChild(f);
        return e
    };
    getGradientImageURL = function(a, b) {
        if (void 0 === window.canvg) window.console ? console.error("canvg.js file is not found.") : alert("canvg.js file is not found.");
        else {
            var c = createSVG(a, b),
                c = (new XMLSerializer).serializeToString(c),
                f = e('<canvas id="canvas" style="display:none;"></canvas>');
            canvg(f[0], c);
            return f[0].toDataURL()
        }
    };
    window.RadiantQ && RadiantQ.Gantt && (RadiantQ.Gantt.GetGradientImageURL = getGradientImageURL);
    setGradientAsBackground = function(a, b, c) {
        b = getGradientImageURL(b, c);
        c = e("<style></style>");
        c.append("" + a + "{background-image:url(" + b + ") !important;}");
        e(document.head).append(c)
    };
    e.fn.setGradientAsBackground = function(a, b) {
        if (0 == e("script[src*=canvg]", document).length || void 0 === canvg) window.console ? console.error("canvg.js file is not found.") : alert("canvg.js file is not found.");
        else {
            var g = this.selector;
            if ("" === g) {
                var f = "dynamicGradient" + c,
                    g = "." + f;
                this.addClass(f);
                c++
            }
            setGradientAsBackground(g, a, b)
        }
    }
})(jQuery);
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.IAction = function() {
    this.AllowToMergeWithPrevious = !1
};
RadiantQ.IAction.prototype.Execute = function() {};
RadiantQ.IAction.prototype.UnExecute = function() {};
RadiantQ.IAction.prototype.CanExecute = function() {};
RadiantQ.IAction.prototype.CanUnExecute = function() {};
RadiantQ.IAction.prototype.TryToMerge = function(e) {};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.IActionHistory = function() {
    Array.call(this)
};
RadiantQ.IActionHistory.prototype = [];
RadiantQ.IActionHistory.prototype.CanMoveBack = !1;
RadiantQ.IActionHistory.prototype.CanMoveForward = !1;
RadiantQ.IActionHistory.prototype.CurrentState = null;
RadiantQ.IActionHistory.prototype.CollectionChanged = null;
RadiantQ.IActionHistory.prototype.AppendAction = function(e) {};
RadiantQ.IActionHistory.prototype.Clear = function() {};
RadiantQ.IActionHistory.prototype.MoveBack = function() {};
RadiantQ.IActionHistory.prototype.MoveForward = function() {};
RadiantQ.IActionHistory.prototype.EnumUndoableActions = function() {};
RadiantQ.IActionHistory.prototype.CanMoveBack_M = function() {};
RadiantQ.IActionHistory.prototype.CanMoveForward_M = function() {};
RadiantQ.IActionHistory.prototype.CurrentState_M = function() {};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.SampleHistory = function() {
    RadiantQ.IActionHistory.apply(this, arguments);
    this.Init = function() {
        this.Head = new RadiantQ.SimpleHistoryNode;
        this.CurrentState_M(new RadiantQ.SimpleHistoryNode)
    };
    this.Init();
    this.CollectionChanged = new ObjectEvent("CollectionChanged");
    this._mCurrentState = new RadiantQ.SimpleHistoryNode;
    this.LastAction = this.Head = null;
    this.Length = 0
};
RadiantQ.SampleHistory.prototype = new RadiantQ.IActionHistory;
RadiantQ.SampleHistory.prototype.CurrentState_M = function(e) {
    if (0 == arguments.length) return this._mCurrentState;
    null != e ? this._mCurrentState = e : window.console && console.error && console.error("ArgumentNullException on CurrentState.")
};
RadiantQ.SampleHistory.prototype.CanMoveForward_M = function(e) {
    if (0 == arguments.length) return null != this.CurrentState_M().NextAction && null != this.CurrentState_M().NextNode
};
RadiantQ.SampleHistory.prototype.CanMoveBack_M = function(e) {
    if (0 == arguments.length) return null != this.CurrentState_M().PreviousAction && null != this.CurrentState_M().PreviousNode
};
RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.SampleHistory.prototype, "CurrentState", {
    get: function() {
        return this._mCurrentState
    },
    set: function(e) {
        null != e ? this._mCurrentState = e : window.console && console.error && console.error("ArgumentNullException on CurrentState.")
    }
}), Object.defineProperty(RadiantQ.SampleHistory.prototype, "CanMoveForward", {
    get: function() {
        return null != this.CurrentState.NextAction && null != this.CurrentState.NextNode
    }
}), Object.defineProperty(RadiantQ.SampleHistory.prototype,
    "CanMoveBack", {
        get: function() {
            return null != this.CurrentState.PreviousAction && null != this.CurrentState.PreviousNode
        }
    }));
RadiantQ.SampleHistory.prototype.RaiseUndoBufferChanged = function() {
    0 < this.CollectionChanged.fn.Length && this.CollectionChanged.raise(this)
};
RadiantQ.SampleHistory.prototype.AppendAction = function(e) {
    if (null != this.CurrentState_M().PreviousAction && this.CurrentState_M().PreviousAction.TryToMerge(e)) return this.RaiseUndoBufferChanged(), !1;
    this.CurrentState_M().NextAction = e;
    this.CurrentState_M().NextNode = new RadiantQ.SimpleHistoryNode(e, this.CurrentState_M());
    return !0
};
RadiantQ.SampleHistory.prototype.Clear = function() {
    this.Init();
    this.RaiseUndoBufferChanged()
};
RadiantQ.SampleHistory.prototype.EnumUndoableActions = function() {
    for (var e = this.Head, b = {}; null != e && e != this.CurrentState_M() && null != e.NextAction;) b.push(e.NextAction), e = e.NextNode;
    return b
};
RadiantQ.SampleHistory.prototype.EnumRedoableActions = function() {
    for (var e = this.CurrentState_M(), b = {}; null != e && null != e.NextAction;) b.push(e.NextAction), e = e.NextNode;
    return b
};
RadiantQ.SampleHistory.prototype.MoveForward = function() {
    if (!this.CanMoveForward_M()) throw new InvalidOperationException("History.MoveForward() cannot execute because CanMoveForward returned false (the current state is the last state in the undo buffer.");
    this.CurrentState_M().NextAction.Execute();
    this.CurrentState_M(this.CurrentState_M().NextNode);
    this.Length += 1;
    this.RaiseUndoBufferChanged()
};
RadiantQ.SampleHistory.prototype.MoveBack = function() {
    if (!this.CanMoveBack_M()) throw new InvalidOperationException("History.MoveBack() cannot execute because CanMoveBack returned false (the current state is the last state in the undo buffer.");
    this.CurrentState_M().PreviousAction.UnExecute();
    this.CurrentState_M(this.CurrentState_M().PreviousNode);
    this.Length -= 1;
    this.RaiseUndoBufferChanged()
};
RadiantQ.SampleHistory.prototype.GetEnumerator = function() {
    return this.EnumUndoableActions().GetEnumerator()
};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.SimpleHistoryNode = function(e, b) {
    this.PreviousAction = e;
    this.PreviousNode = b
};
RadiantQ.SimpleHistoryNode.prototype.PreviousAction = null;
RadiantQ.SimpleHistoryNode.prototype.PreviousNode = null;
RadiantQ.SimpleHistoryNode.prototype.NextAction = null;
RadiantQ.SimpleHistoryNode.prototype.NextNode = null;
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.IMultiAction = function() {
    RadiantQ.RQ_CollectionChangeNotifier.call(this);
    this.IsDelayed = !1
};
RadiantQ.IMultiAction.prototype = new RadiantQ.RQ_CollectionChangeNotifier;
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.ITransaction = function() {};
RadiantQ.ITransaction.prototype.AccumulatingAction = null;
RadiantQ.ITransaction.prototype.IsDelayed = !1;
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.MultiAction = function() {
    RadiantQ.IMultiAction.call(this);
    this.IsDelayed = !0;
    this.Execute = function() {
        if (this.IsDelayed)
            for (var e = 0; e < this.length; e++) this[e].Execute();
        else this.IsDelayed = !0
    };
    this.UnExecute = function() {
        this.reverse();
        for (var e = 0; e < this.length; e++) this[e].UnExecute()
    };
    this.CanExecute = function() {
        for (var e = 0; e < this.length; e++)
            if (!action.CanExecute()) return !1;
        return !0
    };
    this.CanUnExecute = function() {
        for (var e = 0; e < this.length; e++)
            if (!action.CanUnExecute()) return !1;
        return !0
    };
    this.TryToMerge =
        function(e) {
            return !1
    };
    this.AllowToMergeWithPrevious = null
};
RadiantQ.MultiAction.prototype = new RadiantQ.IMultiAction;
RadiantQ.MultiAction.prototype.Execute = function() {
    if (IsDelayed)
        for (var e = 0; e < this.length; e++) action.Execute();
    else IsDelayed = !0
};
RadiantQ.MultiAction.prototype.UnExecute = function() {
    this.reverse();
    for (var e = 0; e < this.length; e++) action.UnExecute()
};
RadiantQ.MultiAction.prototype.CanExecute = function() {
    for (var e = 0; e < this.length; e++)
        if (!action.CanExecute()) return !1;
    return !0
};
RadiantQ.MultiAction.prototype.CanUnExecute = function() {
    for (var e = 0; e < this.length; e++)
        if (!action.CanUnExecute()) return !1;
    return !0
};
RadiantQ.MultiAction.prototype.TryToMerge = function(e) {
    return !1
};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.TransactionBase = function(e, b) {
    RadiantQ.ITransaction.apply(this, arguments);
    this.ActionManager = e;
    null != e && e.OpenTransaction(this);
    this.IsDelayed = !0;
    this.IsDelayed = b;
    this.accumulatingAction;
    this.AccumulatingAction_M = function(b) {
        if (0 == arguments.length) return this.accumulatingAction
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(this, "AccumulatingAction", {
        get: function() {
            return this.accumulatingAction
        }
    })
};
RadiantQ.TransactionBase.prototype = new RadiantQ.ITransaction;
RadiantQ.TransactionBase.prototype.ActionManager = null;
RadiantQ.TransactionBase.prototype.Aborted = !1;
RadiantQ.TransactionBase.prototype.Commit = function() {
    null != this.ActionManager && this.ActionManager.CommitTransaction()
};
RadiantQ.TransactionBase.prototype.Rollback = function() {
    null != this.ActionManager && (this.ActionManager.RollBackTransaction(), this.Aborted = !0)
};
RadiantQ.TransactionBase.prototype.Dispose = function() {
    this.Aborted || this.Commit()
};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.Transaction = function(e, b) {
    RadiantQ.TransactionBase.apply(this, arguments);
    this.accumulatingAction = new RadiantQ.MultiAction;
    this.Commit = function() {
        this.AccumulatingAction.IsDelayed = this.IsDelayed;
        RadiantQ.TransactionBase.prototype.Commit.apply(this)
    }
};
RadiantQ.Transaction.prototype = new RadiantQ.TransactionBase;
RadiantQ.Transaction.Create = function(e, b) {
    return void 0 != b || null != b ? new RadiantQ.Transaction(e, b) : new RadiantQ.Transaction(e, !0)
};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.AbstractAction = function() {
    this.mAllowToMergeWithPrevious = !0;
    this.ExecuteCount = 0
};
RadiantQ.AbstractAction.prototype = [];
RadiantQ.AbstractAction.prototype.AllowToMergeWithPrevious_M = function(e) {
    if (0 == arguments.length) return this.mAllowToMergeWithPrevious;
    this.mAllowToMergeWithPrevious = e
};
RadiantQ.CanUseDefineProperty && Object.defineProperty(RadiantQ.AbstractAction.prototype, "AllowToMergeWithPrevious", {
    get: function() {
        return this.mAllowToMergeWithPrevious
    },
    set: function(e) {
        this.mAllowToMergeWithPrevious = e
    }
});
RadiantQ.AbstractAction.prototype.Execute = function() {
    this.CanExecute() && (this.ExecuteCore(), this.ExecuteCount++)
};
RadiantQ.AbstractAction.prototype.UnExecute = function() {
    this.CanUnExecute() && (this.UnExecuteCore(), this.ExecuteCount--)
};
RadiantQ.AbstractAction.prototype.ExecuteCore = function() {};
RadiantQ.AbstractAction.prototype.UnExecuteCore = function() {};
RadiantQ.AbstractAction.prototype.CanExecute = function() {
    return 0 == this.ExecuteCount
};
RadiantQ.AbstractAction.prototype.CanUnExecute = function() {
    return !this.CanExecute()
};
RadiantQ.AbstractAction.prototype.TryToMerge = function(e) {
    return !1
};
void 0 == window.RadiantQ && (window.RadiantQ = {});
RadiantQ.ActionManager = function() {
    History = new RadiantQ.SampleHistory;
    this.CollectionChanged = new ObjectEvent("CollectionChanged");
    this.RaiseUndoBufferChanged = function(e, b) {
        null != this.CollectionChanged && this.CollectionChanged.raise(this, b)
    };
    this.CurrentAction = null;
    this.EnableRecordingActions = this.ActionIsExecuting = !1;
    this.RecordAction = function(e) {
        null == e && window.console && console.error && console.error("ArgumentNullException - ActionManager.RecordAction: the existingAction argument is null");
        this.CheckNotRunningBeforeRecording(e);
        if (!this.EnableRecordingActions && e.CanExecute()) e.Execute();
        else {
            var b = this.RecordingTransaction_M();
            null != b ? (b.AccumulatingAction_M().push(e), b.IsDelayed || e.Execute()) : this.RunActionDirectly(e)
        }
    };
    this.CheckNotRunningBeforeRecording = function(e) {
        null != this.CurrentAction && window.console && console.error && console.error("InvalidOperationException :ActionManager.RecordActionDirectly: the ActionManager is currently running or undoing an action ({0}), and this action (while being executed) attempted to recursively record another action ({1}), which is not allowed. You can examine the stack trace of this exception to see what the executing action did wrong and change this action not to influence the Undo stack during its execution. Checking if ActionManager.ActionIsExecuting == true before launching another transaction might help to avoid the problem. Thanks and sorry for the inconvenience.",
            this.CurrentAction.toString())
    };
    this.recordActionLock = {};
    this.RunActionDirectly = function(e) {
        this.CheckNotRunningBeforeRecording(e);
        this.CurrentAction = e;
        History.AppendAction(e) && History.MoveForward();
        this.CurrentAction = null
    };
    this.CreateTransaction = function() {
        return Transaction.Create(this)
    };
    this.CreateTransaction = function(e) {
        return Transaction.Create(this, e)
    };
    this.mTransactionStack = [];
    this._mHistory;
    this.History_M = function(e) {
        if (0 == arguments.length) return this.mHistory;
        null != this.mHistory && mHistory.CollectionChanged.subscribe(this.RaiseUndoBufferChanged,
            this);
        this.mHistory = e;
        null != this.mHistory && this.mHistory.CollectionChanged.unsubscribe(this.RaiseUndoBufferChanged, this)
    };
    this.TransactionStack_M = function(e) {
        if (0 == arguments.length) return this.mTransactionStack;
        this.mTransactionStack = e
    };
    this.RecordingTransaction_M = function(e) {
        if (0 == arguments.length) return 0 < this.TransactionStack_M().length ? this.TransactionStack_M()[0] : null
    };
    this.CanUndo_M = function(e) {
        if (0 == arguments.length) return History.CanMoveBack_M()
    };
    this.CanRedo_M = function(e) {
        if (0 == arguments.length) return History.CanMoveForward_M()
    };
    RadiantQ.CanUseDefineProperty && (Object.defineProperty(this, "History", {
        get: function() {
            return this.mHistory
        },
        set: function(e) {
            null != this.mHistory && mHistory.CollectionChanged.subscribe(this.RaiseUndoBufferChanged, this);
            this.mHistory = e;
            null != this.mHistory && this.mHistory.CollectionChanged.unsubscribe(this.RaiseUndoBufferChanged, this)
        }
    }), Object.defineProperty(this, "TransactionStack", {
        get: function() {
            return this.mTransactionStack
        },
        set: function(e) {
            this.mTransactionStack = e
        }
    }), Object.defineProperty(this, "RecordingTransaction", {
        get: function() {
            return 0 < this.TransactionStack_M().length ? this.TransactionStack_M()[0] : null
        }
    }), Object.defineProperty(this, "CanUndo", {
        get: function() {
            return History.CanMoveBack
        }
    }), Object.defineProperty(this, "CanRedo", {
        get: function() {
            return History.CanMoveForward
        }
    }));
    this.OpenTransaction = function(e) {
        this.TransactionStack_M().push(e)
    };
    this.CommitTransaction = function() {
        0 == this.TransactionStack_M().length && window.console && console.error && console.error("nvalidOperationExceptionActionManager.CommitTransaction was called when there is no open transaction (TransactionStack is empty). Please examine the stack trace of this exception to find code which called CommitTransaction one time too many. Normally you don't call OpenTransaction and CommitTransaction directly, but use using(var t = Transaction.Create(Root)) instead.");
        var e = this.TransactionStack_M().pop();
        0 < e.AccumulatingAction_M().length && this.RecordAction(e.AccumulatingAction_M())
    };
    this.RollBackTransaction = function() {
        if (0 != this.TransactionStack_M().length) {
            var e = this.TransactionStack_M()[0];
            null != e && null != e.AccumulatingAction_M() && e.AccumulatingAction_M().UnExecute();
            this.TransactionStack_M().splice()
        }
    };
    this.Undo = function() {
        this.CanUndo_M() && (this.ActionIsExecuting && window.console && console.error && console.error("InvalidOperationExceptionActionManager is currently busy executing a transaction ({0}). This transaction has called Undo() which is not allowed until the transaction ends. Please examine the stack trace of this exception to see what part of your code called Undo.",
            this.CurrentAction), this.CurrentAction = History.CurrentState_M().PreviousAction, History.MoveBack(), this.CurrentAction = null)
    };
    this.Redo = function() {
        this.CanRedo_M() && (this.ActionIsExecuting && window.console && console.error && console.error("InvalidOperationExceptionActionManager is currently busy executing a transaction ({0}). This transaction has called Redo() which is not allowed until the transaction ends. Please examine the stack trace of this exception to see what part of your code called Redo.", this.CurrentAction),
            this.CurrentAction = History.CurrentState_M().NextAction, History.MoveForward(), this.CurrentAction = null)
    };
    this.Clear = function() {
        History.Clear();
        this.CurrentAction = null
    };
    this.EnumUndoableActions = function() {
        return History.EnumUndoableActions()
    };
    this.EnumRedoableActions = function() {
        return History.EnumRedoableActions()
    }
};
void 0 == window.RadiantQ ? window.RadiantQ = {} : void 0 == window.RadiantQ.Gantt && (window.RadiantQ.Gantt = {});
RadiantQ.Gantt.GanttControlActionManager = function() {};
RadiantQ.Gantt.GanttControlActionManager.prototype = new RadiantQ.ActionManager;
RadiantQ.Gantt.IgnoreFirstAbstractAction = function(e) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this.IgnoreFirst = arguments[arguments.length - 1];
    this.callCount = 0;
    this.ExecuteCore = function() {
        this.callCount++;
        !0 == this.IgnoreFirst && 1 == this.callCount || this.OnExecuteCore()
    };
    this.OnExecuteCore = function() {}
};
RadiantQ.Gantt.IgnoreFirstAbstractAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.IgnoreFirstAbstractAction.prototype.IgnoreFirst = null;
RadiantQ.Gantt.SetTimeActionBase = function(e, b, c, a, d, g) {
    RadiantQ.Gantt.IgnoreFirstAbstractAction.apply(this, arguments);
    e && (this.GC = e);
    b && (this.ActivityID = b.ID_M(), this.OldPrefTime = a || b.PreferredStartTime_M(), this.OldTime = d || b.StartTime_M());
    c && (this.NewTime = c)
};
RadiantQ.Gantt.SetTimeActionBase.prototype = new RadiantQ.Gantt.IgnoreFirstAbstractAction;
RadiantQ.Gantt.SetTimeActionBase.prototype.GetActivity = function() {
    return this.GC.Model.GetActivityById(this.ActivityID)
};
RadiantQ.Gantt.SetTimeActionBase.prototype.ActivityID = null;
RadiantQ.Gantt.SetTimeActionBase.prototype.NewTime = null;
RadiantQ.Gantt.SetTimeActionBase.prototype.GC = null;
RadiantQ.Gantt.SetTimeActionBase.prototype.OldTime = null;
RadiantQ.Gantt.SetTimeActionBase.prototype.OldPrefTime = null;
RadiantQ.Gantt.SetStartTimeAction = function(e, b, c, a, d, g) {
    RadiantQ.Gantt.SetTimeActionBase.apply(this, arguments);
    this.Name = 'Set StartTime on Task: "{0}"' + b.ActivityName_M();
    this.OnExecuteCore = function() {
        var a = this.GetActivity();
        a.PreferredStartTime_M(this.NewTime);
        a.StartTime_M(this.NewTime);
        this.GC.RaiseActivityTimeChanged(a, RadiantQ.Gantt.ActivityTimeChangeType.StartTimeChanged, this.NewTime)
    };
    this.UnExecuteCore = function() {
        var a = this.GetActivity();
        a.PreferredStartTime_M(this.OldPrefTime);
        a.StartTime_M(this.OldTime);
        this.GC.RaiseActivityTimeChanged(a, RadiantQ.Gantt.ActivityTimeChangeType.StartTimeChanged, this.OldTime)
    }
};
RadiantQ.Gantt.SetStartTimeAction.prototype = new RadiantQ.Gantt.SetTimeActionBase;
RadiantQ.Gantt.SetEndTimeAction = function(e, b, c, a, d, g) {
    RadiantQ.Gantt.SetTimeActionBase.apply(this, arguments);
    this.Name = 'Set EndTime on Task: "{0}"' + b.ActivityName_M();
    this.OnExecuteCore = function() {
        var a = this.GetActivity();
        a.EndTime_M(this.NewTime);
        this.GC.RaiseActivityTimeChanged(a, RadiantQ.Gantt.ActivityTimeChangeType.DurationResized, this.NewTime)
    };
    this.UnExecuteCore = function() {
        var a = this.GetActivity();
        a.PreferredStartTime_M(this.OldPrefTime);
        a.EndTime_M(this.OldTime);
        this.GC.RaiseActivityTimeChanged(a,
            RadiantQ.Gantt.ActivityTimeChangeType.DurationResized, this.OldTime)
    }
};
RadiantQ.Gantt.SetEndTimeAction.prototype = new RadiantQ.Gantt.SetTimeActionBase;
RadiantQ.Gantt.SetDurationAction = function(e, b, c) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this._gc = e;
    this.ActivityID = b.ID_M();
    this._oldDuration = b.Duration_M();
    this._newDuration = c;
    this.Name = 'Set Duration on Task: "{0}"' + b.ActivityName_M();
    this.ExecuteCore = function() {
        this.GetActivity(this.ActivityID).Duration_M(this._newDuration)
    };
    this.UnExecuteCore = function() {
        this.GetActivity(this.ActivityID).Duration_M(this._oldDuration)
    }
};
RadiantQ.Gantt.SetDurationAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.SetDurationAction.prototype._oldDuration = null;
RadiantQ.Gantt.SetDurationAction.prototype._newDuration = null;
RadiantQ.Gantt.SetDurationAction.prototype._gc = null;
RadiantQ.Gantt.SetDurationAction.prototype.GetActivity = function() {
    return this._gc.Model.GetActivityById(this.ActivityID)
};
RadiantQ.Gantt.SetDurationAction.prototypeActivityID = null;
RadiantQ.Gantt.CreateNewDependencyAction = function(e, b, c, a) {
    RadiantQ.Gantt.IgnoreFirstAbstractAction.apply(this, arguments);
    this._model = e;
    this._fromActID = b.ID_M();
    this._toActID = c.ID_M();
    this.Name = 'Create new Dependency from: "{0}" to: "{1}"' + b.ActivityName_M() + "  " + c.ActivityName_M();
    this.OnExecuteCore = function() {
        this._model.CreateNewDependency(this._model.GetActivityById(this._fromActID), this._model.GetActivityById(this._toActID))
    };
    this.UnExecuteCore = function() {
        RadiantQ.Gantt.CreateNewDependencyAction.DeleteDependency(this._model,
            this._fromActID, this._toActID)
    }
};
RadiantQ.Gantt.CreateNewDependencyAction.prototype = new RadiantQ.Gantt.IgnoreFirstAbstractAction;
RadiantQ.Gantt.CreateNewDependencyAction.prototype._model = null;
RadiantQ.Gantt.CreateNewDependencyAction.prototype._fromActID = null;
RadiantQ.Gantt.CreateNewDependencyAction.prototype._toActID = null;
RadiantQ.Gantt.CreateNewDependencyAction.DeleteDependency = function(e, b, c) {
    c = e.Dependencies_M().GetPredecessors(e.GetActivityById(c));
    for (var a = 0; a < c.length; a++) {
        var d = c[a];
        if (d.FromActivity_M().ID_M() == b) {
            e.Dependencies_M().remove(d);
            break
        }
    }
};
RadiantQ.Gantt.DeleteDependencyAction = function(e, b, c) {
    RadiantQ.Gantt.IgnoreFirstAbstractAction.apply(this, arguments);
    this._model = e;
    this._fromActID = b.FromActivity_M().ID_M();
    this._toActID = b.ToActivity_M().ID_M();
    this._lag = b.Lag;
    this._type = b.Type;
    this.OnExecuteCore = function() {
        RadiantQ.Gantt.CreateNewDependencyAction.DeleteDependency(this._model, this._fromActID, this._toActID)
    };
    this.UnExecuteCore = function() {
        this._model.CreateNewDependency(this._model.GetActivityById(this._fromActID), this._model.GetActivityById(this._toActID),
            this._type, this._lag)
    }
};
RadiantQ.Gantt.DeleteDependencyAction.prototype = new RadiantQ.Gantt.IgnoreFirstAbstractAction;
RadiantQ.Gantt.DeleteDependencyAction.prototype._model = null;
RadiantQ.Gantt.DeleteDependencyAction.prototype._fromActID = null;
RadiantQ.Gantt.DeleteDependencyAction.prototype._toActID = null;
RadiantQ.Gantt.DeleteDependencyAction.prototype._lag = null;
RadiantQ.Gantt.DeleteDependencyAction.prototype._type = null;
RadiantQ.Gantt.SetProgressValueAction = function(e, b, c) {
    RadiantQ.Gantt.IgnoreFirstAbstractAction.apply(this, arguments);
    this._act = e;
    this._oldPP = e.ProgressPercent_M();
    this._newPP = b;
    this.Name = 'Change Progress on Task: "{0}"' + e.ActivityName_M();
    this.OnExecuteCore = function() {
        this._act.ProgressPercent_M(this._newPP)
    };
    this.UnExecuteCore = function() {
        this._act.ProgressPercent_M(this._oldPP)
    }
};
RadiantQ.Gantt.SetProgressValueAction.prototype = new RadiantQ.Gantt.IgnoreFirstAbstractAction;
RadiantQ.Gantt.SetProgressValueAction.prototype._act = null;
RadiantQ.Gantt.SetProgressValueAction.prototype._oldPP = null;
RadiantQ.Gantt.SetProgressValueAction.prototype._newPP = null;
RadiantQ.Gantt.AffectedDependenciesTrackingAction = function(e) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this.AffectedActivityDependencies = new RadiantQ.Gantt.Dictionary;
    this._actDeps = new RadiantQ.Gantt.Dictionary;
    e && (this.GC = e, this.Model = e.Model)
};
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.GC = null;
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.Model = null;
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.AffectedActivityDependencies = new RadiantQ.Gantt.Dictionary;
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype._actDeps = new RadiantQ.Gantt.Dictionary;
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.CacheDependencies = function() {
    this.AffectedActivityDependencies.Clear();
    for (var e = 1; e <= this.Model.AllActivities_M().length; e++) {
        var b = this.Model.AllActivities_M()[e];
        b && (null != b.PredecessorIndexString_M() && void 0 != b.PredecessorIndexString_M() ? this._actDeps.Add(b.ID_M(), b.PredecessorIndexString_M()) : this._actDeps.Add(b.ID_M(), ""))
    }
};
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.TrackAffectedDependenciesFromCache = function() {
    this.AffectedActivityDependencies.Clear();
    for (var e = 0; e < this._actDeps.keys.length; e++) {
        var b = this.Model.GetActivityById(this._actDeps.keys[e]);
        !1 == (b.PredecessorIndexString_M() === this._actDeps[b.ID_M()]) && this.AffectedActivityDependencies.Add(b.ID_M(), this._actDeps[b.ID_M()])
    }
};
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.ReapplyAffectedActivityDependencies = function() {
    for (var e = 0; e < this.AffectedActivityDependencies.keys.length; e++) {
        var b = this.AffectedActivityDependencies.keys[e],
            c = this.Model.GetActivityById(b);
        View.GanttActivityView.prototype.UpdateActivityDependency(this.Model, c, this.AffectedActivityDependencies[b], RadiantQ.Gantt.Model.NewDependencyAddScenarioType.None)
    }
    this.AffectedActivityDependencies.Clear()
};
RadiantQ.Gantt.AffectedDependenciesTrackingAction.prototype.GetActivityView = function(e) {
    return null == this.GC.Model.GetActivityById(e) ? null : this.GC.ActivityViews.GetActivityViewByID(e)
};
RadiantQ.Gantt.IndentOutdentBase = function(e, b) {
    RadiantQ.Gantt.AffectedDependenciesTrackingAction.apply(this, arguments);
    void 0 != b && null != b && (this.ActivityID = b.ID_M())
};
RadiantQ.Gantt.IndentOutdentBase.prototype = new RadiantQ.Gantt.AffectedDependenciesTrackingAction;
RadiantQ.Gantt.IndentOutdentBase.prototype.ActivityID = null;
RadiantQ.Gantt.IndentAction = function(e, b) {
    RadiantQ.Gantt.IndentOutdentBase.apply(this, arguments);
    this.Name = 'Indented task "{0}"' + b.ActivityName_M();
    this.ExecuteCore = function() {
        var b = this.GetActivityView(this.ActivityID);
        if (null != b) {
            b.Activity_M();
            var a = this.GC.ActivityViews.indexOf(b);
            0 < a && (a = this.GC.GetParentableActivityView(a - 1, b.IndentLevel_M()), null != a ? (this.CacheDependencies(), this.oldParentStart = a.Activity_M().StartTime_M(), this.oldParentEffort = a.Activity_M().Effort_M(), this.GC.Indent(b), this.TrackAffectedDependenciesFromCache()) :
                window.console && console.error && console.error("IndentAction called on an activity that cannot be indented. Use GanttControl.CanIndent to check first."))
        }
    };
    this.UnExecuteCore = function() {
        var b = this.GetActivityView(this.ActivityID);
        if (null != b) {
            var a = b.Activity_M().Parent_M();
            this.GC.Outdent(b);
            this.ReapplyAffectedActivityDependencies();
            null != a && 0 == a.ChildActivities_M().length && (a.StartTime_M(this.oldParentStart), a.Effort_M(this.oldParentEffort))
        }
    }
};
RadiantQ.Gantt.IndentAction.prototype = new RadiantQ.Gantt.IndentOutdentBase;
RadiantQ.Gantt.IndentAction.prototype.oldParentStart = null;
RadiantQ.Gantt.IndentAction.prototype.oldParentEffort = null;
RadiantQ.Gantt.OutdentAction = function(e, b) {
    RadiantQ.Gantt.IndentOutdentBase.apply(this, arguments);
    this.Name = 'Outdented Task: "{0}"' + b.ActivityName_M();
    this.ExecuteCore = function() {
        var b = this.GetActivityView(this.ActivityID);
        if (null != b) {
            var a = b.Activity_M(),
                d = this.GC.ActivityViews[0] == b,
                e = b.IndentLevel_M();
            if (!d && 0 < e) {
                this.CacheDependencies();
                this.oldStart = a.StartTime_M();
                this.oldEffort = a.Effort_M();
                this.originalNextSiblingId = -1;
                for (a = this.GC.ActivityViews.indexOf(b) + 1; a < this.GC.ActivityViews.length; a++)
                    if (d =
                        this.GC.ActivityViews[a], d.IndentLevel_M() == b.IndentLevel_M()) {
                        this.originalNextSiblingId = d.Activity_M().ID_M();
                        break
                    }
                this.GC.Outdent(b);
                this.TrackAffectedDependenciesFromCache()
            }
        }
    };
    this.UnExecuteCore = function() {
        var b = this.GetActivityView(this.ActivityID);
        if (null != b) {
            b.Activity_M().Parent_M();
            this.GC.Indent(b);
            if (-1 != this.originalNextSiblingId) {
                for (var a = -1, d = this.GC.ActivityViews.indexOf(b) + 1; d < this.GC.ActivityViews.length; d++) {
                    var e = this.GC.ActivityViews[d];
                    if (e.Activity_M().ID_M() == this.originalNextSiblingId) {
                        a =
                            d;
                        break
                    }
                }
                this.originalNextSiblingId = -1;
                if (-1 != a) {
                    for (var f = new RadiantQ.Gantt.Dictionary, d = a; d < this.GC.ActivityViews.length; d++) {
                        e = this.GC.ActivityViews[d];
                        if (e.IndentLevel_M() <= b.IndentLevel_M()) break;
                        e.IndentLevel_M() == b.IndentLevel_M() + 1 && f.Add(e, e.PredecessorIndexString_M())
                    }
                    for (a = 0; a < f.keys.length; a++) this.GC.Outdent(f.keys[a]);
                    for (a = 0; a < f.keys.length; a++) d = f.keys[a], d.PredecessorIndexString_M() != f[d] && d.PredecessorIndexString_M(f[d])
                }
            }
            this.ReapplyAffectedActivityDependencies();
            b.Activity_M().StartTime_M(this.oldStart);
            b.Activity_M().Effort_M(this.oldEffort)
        }
    }
};
RadiantQ.Gantt.OutdentAction.prototype = new RadiantQ.Gantt.IndentOutdentBase;
RadiantQ.Gantt.OutdentAction.prototype.oldStart = null;
RadiantQ.Gantt.OutdentAction.prototype.oldEffort = null;
RadiantQ.Gantt.OutdentAction.prototype.originalNextSiblingId = -1;
RadiantQ.Gantt.ExpandCollapseActivityViewAction = function(e, b, c) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this.GC = e;
    this.actID = void 0 != b.Activity_M ? b.Activity_M().ID_M() : b.ID_M();
    this.Name = (this._expand = c) ? 'Activity "{0}" expanded' + b.Activity_M().ActivityName_M() : 'Activity "{0}" collapsed' + b.Activity_M().ActivityName_M();
    this.ExecuteCore = function() {
        var a = this.GC.ActivityViews.GetActivityViewByID(this.actID);
        null != a && a.IsExpanded_M(this._expand)
    };
    this.UnExecuteCore = function() {
        var a = this.GC.ActivityViews.GetActivityViewByID(this.actID);
        null != a && a.IsExpanded_M(!this._expand)
    }
};
RadiantQ.Gantt.ExpandCollapseActivityViewAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.ExpandCollapseActivityViewAction.prototype.GC = null;
RadiantQ.Gantt.ExpandCollapseActivityViewAction.prototype.actID = null;
RadiantQ.Gantt.ExpandCollapseActivityViewAction.prototype._expand = null;
RadiantQ.Gantt.AddAction = function(e, b) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this.newtask = b;
    this.gc = e;
    "object" !== typeof e.options.DataSource && window.console && console.error && console.error("Exception on The GanttControl's ItemsSource should be an IList so that the bound task object can be added/deleted on redo/undo.");
    this.Name = "Added new task.";
    this.ExecuteCore = function() {
        this.newActivityID = this.gc.AddNewItem(this.newtask).ID_M()
    };
    this.UnExecuteCore = function() {
        var b = this.gc.RemoveActivity(this.newActivityID);
        this.gc.options.DataSource.remove(b[0].DataSource_M())
    }
};
RadiantQ.Gantt.AddAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.AddAction.prototype.gc = null;
RadiantQ.Gantt.AddAction.prototype.newtask = null;
RadiantQ.Gantt.AddAction.prototype.newActivityID = null;
RadiantQ.Gantt.GenericCellChangeActionInGrid = function(e, b, c, a, d) {
    RadiantQ.Gantt.IgnoreFirstAbstractAction.apply(this, arguments);
    this.source = e;
    this._newValue = a;
    this._oldValue = c;
    this.propName = b;
    this.Name = 'Changed property "{0}" in grid' + b;
    this.OnExecuteCore = function() {
        RadiantQ.Gantt.CellChangeInfo.prototype.SetNestedPropValue(this.Source_M(), this.propName, this._newValue)
    };
    this.UnExecuteCore = function() {
        RadiantQ.Gantt.CellChangeInfo.prototype.SetNestedPropValue(this.Source_M(), this.propName, this._oldValue)
    }
};
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype = new RadiantQ.Gantt.IgnoreFirstAbstractAction;
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.source = null;
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.propName = null;
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype._oldValue = null;
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype._newValue = null;
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.Source_M = function(e) {
    if (0 == arguments.length) return this.source
};
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.PropName_M = function(e) {
    if (0 == arguments.length) return this.propName
};
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.OldValue_M = function(e) {
    if (0 == arguments.length) return this._oldValue
};
RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype.NewValue_M = function(e) {
    if (0 == arguments.length) return this._newValue
};
RadiantQ.CanUseDefineProperty && (Object.defineProperty(RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype, "Source", {
    get: function() {
        return this.source
    }
}), Object.defineProperty(RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype, "PropName", {
    get: function() {
        return this.propName
    }
}), Object.defineProperty(RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype, "OldValue", {
    get: function() {
        return this._oldValue
    }
}), Object.defineProperty(RadiantQ.Gantt.GenericCellChangeActionInGrid.prototype, "NewValue", {
    get: function() {
        return this._newValue
    }
}));
RadiantQ.Gantt.GenericActivityChangeActionInGrid = function(e, b, c, a, d, g) {
    RadiantQ.Gantt.GenericCellChangeActionInGrid.call(this, e, c, a, d, g);
    this._model = e;
    this.actId = b;
    this.Source_M = function(a) {
        if (0 == arguments.length) return this._model.GetActivityById(this.actId)
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(this, "Source", {
        get: function() {
            return this._model.GetActivityById(this.actId)
        }
    })
};
RadiantQ.Gantt.GenericActivityChangeActionInGrid.prototype = new RadiantQ.Gantt.GenericCellChangeActionInGrid;
RadiantQ.Gantt.GenericActivityChangeActionInGrid.prototype._model;
RadiantQ.Gantt.GenericActivityChangeActionInGrid.prototype.actId;
RadiantQ.Gantt.GenericActivityViewChangeActionInGrid = function(e, b, c, a, d, g, f) {
    RadiantQ.Gantt.GenericCellChangeActionInGrid.call(this, b, a, d, g, f);
    this._model = b;
    this.actId = c;
    this._gc = e;
    this.Source_M = function(a) {
        if (0 == arguments.length) return this._gc.ActivityViews.GetActivityViewByID(this.actId)
    };
    RadiantQ.CanUseDefineProperty && Object.defineProperty(this, "Source", {
        get: function() {
            return this._gc.ActivityViews.GetActivityViewByID(this.actId)
        }
    })
};
RadiantQ.Gantt.GenericActivityViewChangeActionInGrid.prototype = new RadiantQ.Gantt.GenericCellChangeActionInGrid;
RadiantQ.Gantt.GenericActivityViewChangeActionInGrid.prototype._model = null;
RadiantQ.Gantt.GenericActivityViewChangeActionInGrid.prototype.actId = null;
RadiantQ.Gantt.GenericActivityViewChangeActionInGrid.prototype._gc = null;
RadiantQ.Gantt.MoveSelectedItemsBase = function(e, b, c, a, d) {
    RadiantQ.Gantt.AffectedDependenciesTrackingAction.apply(this, arguments);
    if (1 == arguments.length) {
        var g = this.GC;
        this._idlByActId = new RadiantQ.Gantt.Dictionary;
        if (null != g.SelectedItem_M()) {
            for (var f = Number.MAX_VALUE, h = g.SelectedItems, k = 0; k < h.length; k++) {
                var n = h[k],
                    n = n._activity._displayIndex;
                this._selIndices.push(n);
                n < f && (f = n)
            }
            this.selTopIndex = f;
            g.OnBeforeDragStart(this.selTopIndex, g.SelectedItems.length);
            this.toMoveCount = g.SelectedItems.length;
            this.toMoveDest = this.GetBeforeMoveDest(this.selTopIndex, this.toMoveCount);
            this.CanMoveToDest(this.selTopIndex, this.toMoveDest) ? this.CommonInit() : this.selTopIndex = -1
        } else throw new Exception("This Move Action cannot be created when there are no selected items in the gantt.");
    } else if (5 == arguments.length) {
        g = this.GC;
        this._idlByActId = new RadiantQ.Gantt.Dictionary;
        if (null == d || void 0 == d) d = a;
        f = 0; - 1 < d && (f = g.ActivityViews[d].Activity_M().ChildActivities_M().length);
        if (a >= b - 1 && a < b + c && 0 == f) throw new Exception("MoveSelectedItemsBase constructor called with invalid destination index.");
        h = g.SelectedItems;
        for (k = 0; k < h.length; k++) n = h[k], n = n._activity._displayIndex, this._selIndices.push(n);
        this.selTopIndex = b;
        this.toMoveCount = c;
        this.toMoveDest = a;
        this.CommonInit()
    }
    this.ExecuteCore = function() {
        var a = this.GC;
        if (-1 != this.selTopIndex) {
            this.CacheDependencies();
            a.SelectedItems.splice();
            a.GetGanttTable().MoveRows(this.selTopIndex, this.toMoveCount, this.toMoveDest, null, void 0, void 0);
            this.TrackAffectedDependenciesFromCache();
            for (var b = this.GetAfterMoveDest(), c = 0; c < this.toMoveCount; c++) a.SelectedItems.push(a.ActivityViews.GetActivityViewByID(b +
                c))
        }
    };
    this.UnExecuteCore = function() {
        var a = this.GC;
        if (-1 != this.selTopIndex) {
            a.SelectedItems.splice();
            var b = this.GetAfterMoveDest();
            a.GetGanttTable().MoveRows(b, this.toMoveCount, this.GetUndoDest(b, this.toMoveCount), null, void 0, void 0);
            for (var c = b = this.selTopIndex; c < b + this.toMoveCount; c++) {
                var d = a.ActivityViews[c],
                    e = this._idlByActId[d.Activity_M().ID_M()];
                e != d.IndentLevel_M() && this.AdjustIndent(d, e)
            }
            this.ReapplyAffectedActivityDependencies();
            for (c = 0; c < this._selIndices; c++) a.SelectedItems.push(a.ActivityViews[c])
        }
    }
};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype = new RadiantQ.Gantt.AffectedDependenciesTrackingAction;
RadiantQ.Gantt.MoveSelectedItemsBase.prototype._selIndices = [];
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.selTopIndex = null;
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.toMoveCount = 1;
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.toMoveDest = -1;
RadiantQ.Gantt.MoveSelectedItemsBase.prototype._idlByActId = new RadiantQ.Gantt.Dictionary;
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.CommonInit = function() {
    for (var e = this.selTopIndex; e < this.selTopIndex + this.toMoveCount; e++) {
        var b = this.GC.ActivityViews[e];
        this._idlByActId.Add(b.Activity_M().ID_M(), b.IndentLevel_M())
    }
};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.AdjustIndent = function(e, b) {
    for (var c = b - e.IndentLevel_M(); 0 > c;) c++, this.GC.Outdent(e);
    for (; 0 < c;) c--, this.GC.Indent(e)
};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.GetBeforeMoveDest = function(e, b) {};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.GetAfterMoveDest = function() {
    return this.selTopIndex < this.toMoveDest ? this.toMoveDest - this.toMoveCount + 1 : this.toMoveDest + 1
};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.GetUndoDest = function(e, b) {
    return this.selTopIndex < this.toMoveDest ? this.selTopIndex - 1 : this.selTopIndex + b - 1
};
RadiantQ.Gantt.MoveSelectedItemsBase.prototype.CanMoveToDest = function(e, b) {};
RadiantQ.Gantt.MoveSelectedItemsDownAction = function(e) {
    this.Name = "Moved Selected Items down";
    this.GetBeforeMoveDest = function(b, c) {
        return b + c
    };
    this.CanMoveToDest = function(b, c) {
        return c < this.GC.ActivityViews.length ? !0 : !1
    };
    RadiantQ.Gantt.MoveSelectedItemsBase.apply(this, arguments)
};
RadiantQ.Gantt.MoveSelectedItemsDownAction.prototype = new RadiantQ.Gantt.MoveSelectedItemsBase;
RadiantQ.Gantt.MoveSelectedItemsUpAction = function(e) {
    this.Name = "Moved selected items up.";
    this.GetBeforeMoveDest = function(b, c) {
        return b - 2
    };
    this.CanMoveToDest = function(b, c) {
        return 0 < b ? !0 : !1
    };
    RadiantQ.Gantt.MoveSelectedItemsBase.apply(this, arguments)
};
RadiantQ.Gantt.MoveSelectedItemsUpAction.prototype = new RadiantQ.Gantt.MoveSelectedItemsBase;
RadiantQ.Gantt.MoveRowsAction = function(e, b, c, a, d) {
    this.Name = "Moved rows from index {0}, count: {1}, to index {2}" + b + c + a;
    this.GetBeforeMoveDest = function(a, b) {
        throw new NotImplementedException;
    };
    this.CanMoveToDest = function(a, b) {
        return !0
    };
    RadiantQ.Gantt.MoveSelectedItemsBase.apply(this, arguments)
};
RadiantQ.Gantt.MoveRowsAction.prototype = new RadiantQ.Gantt.MoveSelectedItemsBase;
RadiantQ.Gantt.InsertAction = function(e, b, c, a) {
    RadiantQ.AbstractAction.apply(this, arguments);
    this.asChild = a;
    this.basedOnActivityId = b.Activity_M().ID_M();
    this.cachedTask = c;
    this.ganttControl = e;
    this.Name = 'Inserted new Activity based on "{0}"' + b.Activity_M().ActivityName_M();
    this.ExecuteCore = function() {
        var a = this.ganttControl.ActivityViews.GetActivityViewByID(this.basedOnActivityId);
        this.parentEndBeforeInsertAsChild = DateTime.MinValue;
        this.asChild ? (a.IsParent_M() || (this.parentEndBeforeInsertAsChild = a.Activity_M().EndTime_M()),
            this.insertedActivityID = RadiantQ.Gantt.InsertAction.InsertAsChildCommon(this.ganttControl, this.basedOnActivityId, this.cachedTask)) : this.insertedActivityID = this.ganttControl.InsertNewItemAsSiblingBelow(this.cachedTask, this.ganttControl.ActivityViews.indexOf(a), !0).ID_M()
    };
    this.UnExecuteCore = function() {
        RadiantQ.Gantt.DeleteAction.DeleteCommon(this.ganttControl, this.insertedActivityID);
        if (this.parentEndBeforeInsertAsChild != DateTime.MinValue) {
            var a = this.ganttControl.ActivityViews.GetActivityViewByID(this.basedOnActivityId);
            !1 == a.IsParent_M() && a.Activity_M().EndTime_M() != this.parentEndBeforeInsertAsChild && a.Activity_M().EndTime_M(this.parentEndBeforeInsertAsChild)
        }
    }
};
RadiantQ.Gantt.InsertAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.InsertAction.prototype.cachedTask;
RadiantQ.Gantt.InsertAction.prototype.ganttControl;
RadiantQ.Gantt.InsertAction.prototype.basedOnActivityId;
RadiantQ.Gantt.InsertAction.prototype.insertedActivityID;
RadiantQ.Gantt.InsertAction.prototype.asChild;
RadiantQ.Gantt.InsertAction.prototype.parentEndBeforeInsertAsChild = new Date;
RadiantQ.Gantt.InsertAction.InsertAsChildCommon = function(e, b, c) {
    b = -1 != b ? e.Model.GetActivityById(b) : null;
    var a = e.ActivityViews.GetActivityViewByID(b.ID_M());
    c = e.InsertNewItemAsChildOf(c, e.ActivityViews.indexOf(a), !0);
    for (var a = e.ActivityViews.GetActivityViewByID(c.ID_M()), d = a.Activity_M().ID_M(); c.Parent_M() != b;) e.Outdent(a);
    return d
};
RadiantQ.Gantt.DeleteAction = function(e, b) {
    RadiantQ.AbstractAction.apply(this, arguments);
    if ("object" != typeof e.options.DataSource) throw new Exception("The GanttControl's ItemsSource should be an IList so that the bound task object can be deleted/added on redo/undo.");
    this._predByID = new RadiantQ.Gantt.Dictionary;
    this.removedActivityId = b.ID_M();
    this.ganttControl = e;
    this.cachedTask = b.DataSource_M();
    if (0 < b.ChildActivities_M().length) throw new Exception("All child activities must be deleted before deleting the parent.");
    var c = e.Model.Dependencies_M().GetSuccessors(b);
    b.PredecessorIndexString_M() && this._predByID.Add(b.ID_M(), b.PredecessorIndexString_M());
    for (var a = 0; a < c.length; a++) {
        var d = c[a];
        this._predByID.Add(d.ToActivity_M().ID_M(), d.ToActivity_M().PredecessorIndexString_M())
    }
    null != b.Parent_M() ? (this.parentID = b.Parent_M().ID_M(), this.childIndex = b.Parent_M().ChildActivities_M().indexOf(b)) : this.childIndex = e.Model.Activities_M().indexOf(b);
    this.Name = 'Deleted Activity "{0}"' + b.ActivityName_M();
    this.ExecuteCore = function() {
        RadiantQ.Gantt.DeleteAction.DeleteCommon(this.ganttControl,
            this.removedActivityId)
    };
    this.UnExecuteCore = function() {
        var a = -1 != this.parentID ? this.ganttControl.Model.GetActivityById(this.parentID) : null,
            b = null;
        if (null != a) {
            var c = this.ganttControl.ActivityViews.GetActivityViewByID(a.ID_M());
            if (this.childIndex == a.ChildActivities_M().length) RadiantQ.Gantt.InsertAction.InsertAsChildCommon(this.ganttControl, this.parentID, this.cachedTask);
            else if (0 == this.childIndex) {
                var a = RadiantQ.Gantt.InsertAction.InsertAsChildCommon(this.ganttControl, this.parentID, this.cachedTask),
                    d = this.ganttControl.ActivityViews.GetActivityViewByID(a),
                    a = c.DisplayIndex_M(),
                    d = d.DisplayIndex_M();
                this.ganttControl.GetGanttTable().MoveRows(d, 1, a, c, void 0, void 0)
            } else b = c.Activity_M().ChildActivities_M()[this.childIndex - 1]
        } else 0 == this.childIndex ? (a = this.ganttControl.AddNewItem(this.cachedTask).ID_M(), d = this.ganttControl.ActivityViews.GetActivityViewByID(a), d = d.DisplayIndex_M(), this.ganttControl.GetGanttTable().MoveRows(d, 1, -1, null, void 0, void 0)) : b = this.ganttControl.Model.Activities_M()[this.childIndex -
            1];
        null != b && (b = this.ganttControl.ActivityViews.GetActivityViewByID(b.ID_M()), this.ganttControl.InsertNewItemAsSiblingBelow(this.cachedTask, this.ganttControl.ActivityViews.indexOf(b), !0));
        for (b = 0; b < this._predByID.keys.length; b++) a = this._predByID.keys[b], this._predByID[a] && (c = this.ganttControl.ActivityViews.GetActivityViewByID(a).Activity_M(), View.GanttActivityView.prototype.UpdateActivityDependency(this.ganttControl.Model, c, this._predByID[a], RadiantQ.Gantt.Model.NewDependencyAddScenarioType.None))
    }
};
RadiantQ.Gantt.DeleteAction.prototype = new RadiantQ.AbstractAction;
RadiantQ.Gantt.DeleteAction.prototype.ganttControl;
RadiantQ.Gantt.DeleteAction.prototype.removedActivityId;
RadiantQ.Gantt.DeleteAction.prototype.parentID = -1;
RadiantQ.Gantt.DeleteAction.prototype.childIndex;
RadiantQ.Gantt.DeleteAction.prototype.cachedTask;
RadiantQ.Gantt.DeleteAction.prototype._predByID = new RadiantQ.Gantt.Dictionary;
RadiantQ.Gantt.DeleteAction.DeleteCommon = function(e, b) {
    var c = e.RemoveActivity(b);
    e.options.DataSource.remove(c[0].DataSource_M())
};
(function(e) {
    function b(b, a, d, g, f) {
        this.element = e(b);
        this.ItemsSource = d;
        this.RowHeight = g;
        this.GC = f;
        this.$scrollContainer = e(a);
        this.$actualContent = e(".vsb-actualContent", this.$scrollContainer);
        0 == this.$actualContent.length && (this.$actualContent = e("<div class='vsb-actualContent' style='float:left;'></div>"), this.$scrollContainer.append(this.$actualContent));
        this.OnScroll = new ObjectEvent("OnScroll");
        this._isOnScroll = !1;
        this.subscribeEvents()
    }
    b.prototype.subscribeEvents = function() {
        var b = this,
            a = b.$scrollContainer.scrollTop();
        this.$scrollContainer.bind("scroll.vsbHandler", function(d) {
            var e = b.$scrollContainer.scrollTop();
            a != e && (a = e, b._isOnScroll = !0, e = {
                element: this,
                CanRefresh: !1
            }, !0 == e.CanRefresh && b.Refresh(b.ItemsSource), 0 < b.OnScroll.fn.length && b.OnScroll.raise(b, d, e), b._isOnScroll = !1)
        })
    };
    b.prototype.GetViewHeight = function() {
        var b = this.$scrollContainer.height();
        this.GC.element && (b = this.GC.element.height());
        return b
    };
    b.prototype.CreateRow = function(b, a) {
        return e("<tr><td>" + b + "</td></tr>")
    };
    b.prototype.Refresh = function(b,
        a, d) {
        d = d || this.element;
        var g = e("tbody", d),
            f = 0,
            h = this.RowHeight,
            k = this.GetViewHeight(),
            n = this.$scrollContainer.scrollTop(),
            l = 0;
        this.ItemsSource = b;
        this.UpdateScrollContentHeight();
        var m = 0;
        0 < d.length && a && (m = n % h, this.GC && this.GC.options && null != this.GC.options.RowHeightBinding ? (m = this.GC.GetStartRowIndexAndTop(b, n), l = m.startPosition, m = m.top) : l = Math.floor(n / h), f -= m, m = n - m);
        for (n = e("<div></div>"); l < b.length && !(a && f >= k); l++) {
            var p = b[l],
                q = this.CreateRow(l, p);
            q && (n.append(q), f += p.RowHeight ? p.RowHeight : h)
        }
        g.empty();
        g.append(n.children());
        0 < d.length && a && (d[0].style.setProperty ? d[0].style.setProperty("margin-top", m + "px", "important") : d[0].style.setAttribute("margin-top", m + "px", "important"))
    };
    b.prototype.UpdateScrollContentHeight = function(b) {
        var a = this.ItemsSource || [],
            d = this.RowHeight;
        0 == arguments.length && (b = this.GC && this.GC.GetScrollableContentHeight ? this.GC.GetScrollableContentHeight(a) : a.length * d);
        this.$actualContent.height(b)
    };
    b.prototype.SyncScrollEventWith = function(b, a, d) {
        if (b instanceof jQuery) {
            if (0 == b.length) return
        } else if (null ==
            b.nodeName) {
            window.console && console.log && console.log("You couldn't sync with non HTML elements.");
            return
        }
        var g = this.$scrollContainer,
            f = e(b);
        this.UpdateScrollContentHeight(f[0].scrollHeight);
        var h = 0,
            k = 0,
            n = this;
        this._scrollElemIsHovered = !1;
        this.OnScroll.subscribe(function() {
            h = g.scrollTop();
            this._scrollElemIsHovered || h != k && f.scrollTop(h)
        }, this);
        a && (f.hover(function() {
            n._scrollElemIsHovered = !0
        }, function() {
            n._scrollElemIsHovered = !1
        }), d && d instanceof ObjectEvent ? d.subscribe(function() {
            k = f.scrollTop();
            h !=
                k && g.scrollTop(k)
        }, this) : f.bind("scroll.syncVSBHandler", function() {
            k = f.scrollTop();
            h != k && g.scrollTop(k)
        }.bind(this)))
    };
    RadiantQ.Gantt.VerticalScrollBar = b
})(jQuery);
(function() {
    RadiantQ.Culture = {};
    RadiantQ.SupportedCultures = [];
    RadiantQ.CurrentCulture = navigator.language || navigator.userLanguage;
    RadiantQ.Culture.Load = function(e) {
        e && (RadiantQ.CurrentCulture = e);
        if (void 0 == window.RadiantQ_ConvertToMilestoneString) {
            RadiantQ.SupportedCultures.push("en-US");
            RadiantQ.SupportedCultures.push("fr-FR");
            RadiantQ.SupportedCultures.push("de-DE");
            RadiantQ.SupportedCultures.push("es-ES");
            RadiantQ.SupportedCultures.push("ru-RU");
            RadiantQ.SupportedCultures.push("nb-NO");
            RadiantQ.SupportedCultures.push("ja-JP");
            void 0 == RadiantQ.localizationPath && (RadiantQ.LocalizationPath = "Src/ResourceStrings/");
            void 0 == RadiantQ.DateLocalizationPath && (RadiantQ.DateLocalizationPath = "Src/Scripts/Utils/globalization/");
            e = $("head", document);
            var b = document.createElement("script");
            b.type = "text/javascript";
            b.src = RadiantQ.DateLocalizationPath + RadiantQ.CurrentCulture + ".js";
            e.prepend(b); - 1 == RadiantQ.SupportedCultures.indexOf(RadiantQ.CurrentCulture) && (RadiantQ.CurrentCulture = "en-US");
            b = document.createElement("script");
            b.type = "text/javascript";
            b.src = RadiantQ.LocalizationPath + RadiantQ.CurrentCulture + ".js";
            e.prepend(b)
        }
    }
})();
(function(e) {
    RadiantQ.Gantt.Utils.EndResizeable = function(b, c, a, d) {
        if (!1 != b instanceof jQuery) {
            var g = null;
            if (!0 == c instanceof jQuery) g = c.width();
            else if (null != c) return;
            var f = b.width(),
                h = e(".rq-utils-resizeable", b);
            0 == h.length && (h = e("<div class='rq-utils-resizeable'></div>"), b.append(h));
            h.css({
                "margin-left": f + "px"
            });
            var k = e("<div class='resizeClone'></div>");
            h.unbind("mousedown.rq-utils-resizeable");
            h.bind("mousedown.rq-utils-resizeable", function(c) {
                c.stopPropagation();
                var l = c.pageX;
                f = b.width();
                b.append(k);
                k.css({
                    width: f + "px"
                });
                _ganttMouseMoveDelegate = function(a) {
                    _endResizeMouseMove(a, k, l, f, g)
                };
                _ganttMouseUpDelegate = function(c) {
                    document.mouseButtonPressed = !1;
                    c = k.width();
                    _endResizeMouseUp(c, k, h, b, d);
                    if (void 0 != a || null != a) "function" == typeof a ? a.call(b, c, d) : console.error("onResizeEndCallback should be an function")
                };
                e(document).bind("mousemove.rq-utils-resizeable", _ganttMouseMoveDelegate).bind("mouseup.rq-utils-resizeable", _ganttMouseUpDelegate)
            });
            _endResizeMouseMove = function(a, b, c, d, e) {
                a = d + a.pageX - c;
                null != e && a >= e ? b.width(e) : 0 > a ? b.width(0) : b.width(a);
                return b
            };
            _endResizeMouseUp = function(a, b, c, d) {
                d.width(a);
                c.css({
                    "margin-left": a + "px"
                });
                e(document).unbind("mousemove.rq-utils-resizeable").unbind("mouseup.rq-utils-resizeable");
                b.remove()
            }
        }
    }
})(jQuery);
